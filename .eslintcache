[{"D:\\Work\\beyond-data\\src\\index.js":"1","D:\\Work\\beyond-data\\src\\reportWebVitals.js":"2","D:\\Work\\beyond-data\\src\\App.js":"3","D:\\Work\\beyond-data\\src\\Routes\\AutoMLRoutes.js":"4","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\NewProject\\NewProject.js":"5","D:\\Work\\beyond-data\\src\\Components\\Header\\AutoMLHeader\\AutoMLHeader.js":"6","D:\\Work\\beyond-data\\src\\Components\\SideBar\\AutoMLSideBar\\AutoMLSideBar.js":"7","D:\\Work\\beyond-data\\src\\Components\\BreadCrumbs\\AutoMLBreadcrumbs\\AutoMLBreadcrumbs.js":"8","D:\\Work\\beyond-data\\src\\Components\\Input\\Upload\\AutoMLNewUpload\\AutoMLNewUpload.js":"9","D:\\Work\\beyond-data\\src\\Components\\Button\\AutoMLNewProjectButton\\AutoMLNewProjectButton.js":"10","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLExistingProjects\\AutoMLExistingProjectsTable.js":"11","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\CreateNewProject\\CreateNewProject.js":"12","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\ExistingModels\\ExistingModels.js":"13","D:\\Work\\beyond-data\\src\\Components\\Button\\AutoMLNewModelButton\\AutoMLNewModelButton.js":"14","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLExistingModels\\AutoMLExistingModelsTable.js":"15","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\CreateNewModel\\CreateNewModel.js":"16","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\SelectDatasets\\SelectDatasets.js":"17","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLExistingDatasets\\AutoMLExistingDatasetsTable.js":"18","D:\\Work\\beyond-data\\src\\Components\\Containers\\CompaniesGroup\\CompaniesGroup.js":"19","D:\\Work\\beyond-data\\src\\Components\\Dropdowns\\AutoMLSelectDatasetsDropdown\\AutoMLSelectDatasetsDropdown.js":"20","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\SelectedDatasets\\SelectedDatasets.js":"21","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLSelectedDatasets\\AutoMLSelectedDatasetsTable.js":"22","D:\\Work\\beyond-data\\src\\Components\\List\\SelectedDataList.js":"23","D:\\Work\\beyond-data\\src\\Components\\Drawers\\AutoMLProjectsDrawer\\AutoMLProjectsDrawer.js":"24","D:\\Work\\beyond-data\\src\\Components\\List\\AutoMLProjectsModelsList\\AutoMLProjectsModelsList.js":"25","D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLProjectShareModal\\AutoMLProjectShareModal.js":"26","D:\\Work\\beyond-data\\src\\Components\\Tabs\\AutoMLProjectsTypeTabs.js":"27","D:\\Work\\beyond-data\\src\\Components\\Drawers\\AutoMLModelsDrawer\\AutoMLModelsDrawer.js":"28","D:\\Work\\beyond-data\\src\\Components\\Tabs\\AutoMLSelectDatasetsTabs\\AutoMLSelectDatasetsTabs.js":"29","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLSelectedDataPopupTables\\AutoMLSelectedDatasetsPreviewRowsTable.js":"30","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLSelectedDatasetsMetaTable\\AutoMLSelectedDatasetsMetaTable.js":"31","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\DatasetProcessing\\DatasetProcessing.js":"32","D:\\Work\\beyond-data\\src\\Components\\List\\AutoMLDatasetProcessingList\\AutoMLDatasetProcessingList.js":"33","D:\\Work\\beyond-data\\src\\Components\\Containers\\ColumnsGroup\\ColumnsGroup.js":"34","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\LinkColumns\\LinkColumns.js":"35","D:\\Work\\beyond-data\\src\\Components\\ReactFlow\\LinkColumnsReactFlow\\LinkColumnsReactFlow.js":"36","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\CustomisedDataset\\CustomisedDataset.js":"37","D:\\Work\\beyond-data\\src\\Components\\Tabs\\AutoMLCustomisedDatasetTabs\\AutoMLCustomisedDatasetTabs.js":"38","D:\\Work\\beyond-data\\src\\Components\\Dropdowns\\AutoMLCustomisedDatasetDropdown\\AutoMLCustomisedDatasetDropdown.js":"39","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLCustomisedDatasetsMetaTable\\AutoMLCustomisedDatasetsMetaTable.js":"40","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLCustomisedDatasetsPreviewTable\\AutoMLCustomisedDatasetsPreviewTable.js":"41","D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLSaveDatasetModal\\AutoMLSaveDatasetModal.js":"42","D:\\Work\\beyond-data\\src\\Components\\Cards\\AutoMLExistingDatabucketCard\\AutoMLExistingDatabucketCard.js":"43","D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLProject\\AutoMLProjectContext.js":"44","D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLDeleteProjectModal\\AutoMLDeleteProjectModal.js":"45","D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLPageState\\AutoMLPageStateContext.js":"46","D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLModelContext\\AutoMLModelContext.js":"47","D:\\Work\\beyond-data\\src\\Config\\config.js":"48","D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLAuthContext\\AutoMLAuthContext.js":"49","D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLDeleteModelModal\\AutoMLDeleteModelModal.js":"50","D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLSelectedDatasetsCart\\AutoMLSelectedDatasetsCart.js":"51","D:\\Work\\beyond-data\\src\\Components\\ErrorScreens\\Error404.js":"52","D:\\Work\\beyond-data\\src\\Components\\Loader\\Cliploader.js":"53","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\Correlation\\CorrelationScreen.js":"54","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\SelectModelType\\SelectModelType.js":"55","D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLCustomTable\\AutoMLCustomTableContext.js":"56","D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLShareModelModal\\AutoMLShareModelModal.js":"57","D:\\Work\\beyond-data\\src\\Components\\NoData\\NoData.js":"58","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\RetrainModel\\RetrainModel.js":"59","D:\\Work\\beyond-data\\src\\Components\\Dropzone\\AutoMLDropZone.js":"60","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\PredictModel\\AutoMLPredictModel.js":"61","D:\\Work\\beyond-data\\src\\Components\\Popover\\NotificationPopover.js":"62","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\Notifications\\AllNotifications.js":"63","D:\\Work\\beyond-data\\src\\Components\\Loader\\AutoMLGeneratingDatasetLoader\\AutoMLGeneratingDatasetLoader.js":"64","D:\\Work\\beyond-data\\src\\Components\\Loader\\AutoMLModelTrainingLoader\\AutoMLModelTrainingLoader.js":"65","D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLNotifications\\AutoMLNotificationsContext.js":"66","D:\\Work\\beyond-data\\src\\Routes\\DataLakeRoutes\\DataLakesRoutes.js":"67","D:\\Work\\beyond-data\\src\\Pages\\DataLake\\DataBucketsMain\\DataBucketsMain.js":"68","D:\\Work\\beyond-data\\src\\Components\\Tabs\\CustomTabs\\CustomTabs.js":"69","D:\\Work\\beyond-data\\src\\Components\\Graphs\\DataLakeSpaceGraph\\DataLakeSpaceGraph.js":"70","D:\\Work\\beyond-data\\src\\Components\\Tables\\DataLakeDatabucketstable\\DataLakeDatabucketstable.js":"71","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeBucketShareModal\\DataLakeBucketShareModal.js":"72","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeNewBucketModal\\DataLakeNewBucketModal.js":"73","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeUploadDatasetModal\\DataLakeUploadDatasetModal.js":"74","D:\\Work\\beyond-data\\src\\Components\\Dropzone\\DataLakeDropZone\\DataLakeDropZone.js":"75","D:\\Work\\beyond-data\\src\\Components\\Collapsable\\UploadCollapsable\\UploadCollapsable.js":"76","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeBucketDeleteModal\\DataLakeBucketDeleteModal.js":"77","D:\\Work\\beyond-data\\src\\Pages\\DataLake\\DatasetsMain\\DatasetsMain.js":"78","D:\\Work\\beyond-data\\src\\Components\\Tables\\DataLakeDatasetsTable\\DataLakeDatasetstable.js":"79","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeDeleteDatasetModal\\DataLakeDeleteDatasetModal.js":"80","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeShareDatasetModal\\DataLakeShareDatasetModal.js":"81","D:\\Work\\beyond-data\\src\\Components\\Drawers\\DataLakeDatasetInfoDrawer\\DataLakeDatasetInfoDrawer.js":"82","D:\\Work\\beyond-data\\src\\Pages\\DataLake\\DataLakeConcat\\DataLakeConcat.js":"83","D:\\Work\\beyond-data\\src\\Components\\Dropzone\\DataLakeConcatDropzone\\DataLakeConcatDropzone.js":"84","D:\\Work\\beyond-data\\src\\Pages\\DataLake\\DatasetConfigure\\DatasetConfigure.js":"85","D:\\Work\\beyond-data\\src\\Components\\Tables\\DataLakeConfigureMetaTable\\DataLakeConfigureMetaTable.js":"86","D:\\Work\\beyond-data\\src\\Data\\Contexts\\DataLake\\DataLakeBucketContext\\DataLakeBucketContext.js":"87","D:\\Work\\beyond-data\\src\\Data\\Contexts\\DataLake\\DataLakeDatasetContext\\DataLakeDatasetContext.js":"88","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeBucketDownloadModal\\DataLakeBucketDownloadModal.js":"89","D:\\Work\\beyond-data\\src\\Components\\Modals\\Misc\\BucketShareReplaceModal\\BucketShareReplaceModal.js":"90","D:\\Work\\beyond-data\\src\\Data\\Contexts\\DataLakeFileUploadContext\\DataLakeFileUploadContext.js":"91","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeDownloadDatasetModal\\DataLakeDownloadDatasetModal.js":"92","D:\\Work\\beyond-data\\src\\Components\\BreadCrumbs\\DataLakeBreadcrumbs\\DataLakeBreadcrumbs.js":"93"},{"size":449,"mtime":1612336223155,"results":"94","hashOfConfig":"95"},{"size":362,"mtime":499162500000,"results":"96","hashOfConfig":"95"},{"size":462,"mtime":1623410902855,"results":"97","hashOfConfig":"95"},{"size":15388,"mtime":1620230606076,"results":"98","hashOfConfig":"95"},{"size":8974,"mtime":1618903756880,"results":"99","hashOfConfig":"95"},{"size":7027,"mtime":1623999463292,"results":"100","hashOfConfig":"95"},{"size":1066,"mtime":1623758753327,"results":"101","hashOfConfig":"95"},{"size":7276,"mtime":1619002613628,"results":"102","hashOfConfig":"95"},{"size":1250,"mtime":1612332337921,"results":"103","hashOfConfig":"104"},{"size":1546,"mtime":1618867531643,"results":"105","hashOfConfig":"95"},{"size":14440,"mtime":1620149109267,"results":"106","hashOfConfig":"95"},{"size":7342,"mtime":1617704333305,"results":"107","hashOfConfig":"95"},{"size":11854,"mtime":1618903697387,"results":"108","hashOfConfig":"95"},{"size":773,"mtime":1613728904521,"results":"109","hashOfConfig":"95"},{"size":12132,"mtime":1618311275701,"results":"110","hashOfConfig":"95"},{"size":7164,"mtime":1618866617147,"results":"111","hashOfConfig":"95"},{"size":15115,"mtime":1617702222610,"results":"112","hashOfConfig":"95"},{"size":4468,"mtime":1617794705533,"results":"113","hashOfConfig":"95"},{"size":1646,"mtime":1615789548655,"results":"114","hashOfConfig":"95"},{"size":1660,"mtime":1613036567117,"results":"115","hashOfConfig":"95"},{"size":7624,"mtime":1617702749031,"results":"116","hashOfConfig":"95"},{"size":2831,"mtime":1615799389652,"results":"117","hashOfConfig":"95"},{"size":2293,"mtime":1617102124417,"results":"118","hashOfConfig":"95"},{"size":9517,"mtime":1618862144218,"results":"119","hashOfConfig":"95"},{"size":2262,"mtime":1615373029576,"results":"120","hashOfConfig":"95"},{"size":4300,"mtime":1618827713596,"results":"121","hashOfConfig":"95"},{"size":2854,"mtime":1614929597013,"results":"122","hashOfConfig":"95"},{"size":11944,"mtime":1617858861377,"results":"123","hashOfConfig":"95"},{"size":3173,"mtime":1615793869184,"results":"124","hashOfConfig":"95"},{"size":587,"mtime":1621596653809,"results":"125","hashOfConfig":"95"},{"size":851,"mtime":1614232259704,"results":"126","hashOfConfig":"95"},{"size":10485,"mtime":1617949282322,"results":"127","hashOfConfig":"95"},{"size":2431,"mtime":1617102483688,"results":"128","hashOfConfig":"95"},{"size":1640,"mtime":1615886069371,"results":"129","hashOfConfig":"95"},{"size":17668,"mtime":1617965233070,"results":"130","hashOfConfig":"95"},{"size":16943,"mtime":1617183376646,"results":"131","hashOfConfig":"95"},{"size":12004,"mtime":1618999255664,"results":"132","hashOfConfig":"95"},{"size":2749,"mtime":1614929612171,"results":"133","hashOfConfig":"95"},{"size":1721,"mtime":1614757810151,"results":"134","hashOfConfig":"95"},{"size":2054,"mtime":1618993374467,"results":"135","hashOfConfig":"95"},{"size":1007,"mtime":1614836004367,"results":"136","hashOfConfig":"95"},{"size":19916,"mtime":1618999235452,"results":"137","hashOfConfig":"95"},{"size":1109,"mtime":1617785152223,"results":"138","hashOfConfig":"95"},{"size":1399,"mtime":1615373635020,"results":"139","hashOfConfig":"95"},{"size":4541,"mtime":1622443410243,"results":"140","hashOfConfig":"95"},{"size":1573,"mtime":1618867254041,"results":"141","hashOfConfig":"95"},{"size":1927,"mtime":1615891355533,"results":"142","hashOfConfig":"95"},{"size":46,"mtime":1621256032216,"results":"143","hashOfConfig":"95"},{"size":1289,"mtime":1615452942906,"results":"144","hashOfConfig":"95"},{"size":4382,"mtime":1618825408684,"results":"145","hashOfConfig":"95"},{"size":3384,"mtime":1615886745131,"results":"146","hashOfConfig":"95"},{"size":689,"mtime":1617000422114,"results":"147","hashOfConfig":"95"},{"size":1853,"mtime":1624001168612,"results":"148","hashOfConfig":"95"},{"size":6293,"mtime":1619087811503,"results":"149","hashOfConfig":"95"},{"size":118,"mtime":1617081819211,"results":"150","hashOfConfig":"95"},{"size":1048,"mtime":1618674897242,"results":"151","hashOfConfig":"95"},{"size":4218,"mtime":1618827602248,"results":"152","hashOfConfig":"95"},{"size":480,"mtime":1617788457009,"results":"153","hashOfConfig":"95"},{"size":4453,"mtime":1617880083161,"results":"154","hashOfConfig":"95"},{"size":1882,"mtime":1617879796082,"results":"155","hashOfConfig":"95"},{"size":6532,"mtime":1617879220565,"results":"156","hashOfConfig":"95"},{"size":11388,"mtime":1623999480283,"results":"157","hashOfConfig":"95"},{"size":3231,"mtime":1618662558530,"results":"158","hashOfConfig":"95"},{"size":2852,"mtime":1618759583399,"results":"159","hashOfConfig":"95"},{"size":2827,"mtime":1619000551258,"results":"160","hashOfConfig":"95"},{"size":1777,"mtime":1624010562702,"results":"161","hashOfConfig":"95"},{"size":6370,"mtime":1623651268578,"results":"162","hashOfConfig":"95"},{"size":46969,"mtime":1624001359973,"results":"163","hashOfConfig":"95"},{"size":3542,"mtime":1623743186221,"results":"164","hashOfConfig":"95"},{"size":1421,"mtime":1622539847523,"results":"165","hashOfConfig":"95"},{"size":7433,"mtime":1624001442140,"results":"166","hashOfConfig":"95"},{"size":7904,"mtime":1622616989624,"results":"167","hashOfConfig":"95"},{"size":9989,"mtime":1624001403801,"results":"168","hashOfConfig":"95"},{"size":3613,"mtime":1623222315944,"results":"169","hashOfConfig":"95"},{"size":6454,"mtime":1623408681203,"results":"170","hashOfConfig":"95"},{"size":3738,"mtime":1623665665432,"results":"171","hashOfConfig":"95"},{"size":8666,"mtime":1622617021036,"results":"172","hashOfConfig":"95"},{"size":30743,"mtime":1624001375854,"results":"173","hashOfConfig":"95"},{"size":11583,"mtime":1624000208236,"results":"174","hashOfConfig":"95"},{"size":8534,"mtime":1622459046446,"results":"175","hashOfConfig":"95"},{"size":7657,"mtime":1622459097474,"results":"176","hashOfConfig":"95"},{"size":10684,"mtime":1623667300900,"results":"177","hashOfConfig":"95"},{"size":18295,"mtime":1624001383911,"results":"178","hashOfConfig":"95"},{"size":3210,"mtime":1623752622639,"results":"179","hashOfConfig":"95"},{"size":12212,"mtime":1624007435647,"results":"180","hashOfConfig":"95"},{"size":2752,"mtime":1623047095524,"results":"181","hashOfConfig":"95"},{"size":1148,"mtime":1622529105463,"results":"182","hashOfConfig":"95"},{"size":1008,"mtime":1622784964962,"results":"183","hashOfConfig":"95"},{"size":7783,"mtime":1622700011437,"results":"184","hashOfConfig":"95"},{"size":7667,"mtime":1622702141222,"results":"185","hashOfConfig":"95"},{"size":2538,"mtime":1623307050533,"results":"186","hashOfConfig":"95"},{"size":7673,"mtime":1623657807670,"results":"187","hashOfConfig":"95"},{"size":1834,"mtime":1623412813374,"results":"188","hashOfConfig":"95"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},"12hu73l",{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"191"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"191"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"191"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"191"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1by3avi",{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"191"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"191"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"191"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"191"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"191"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"191"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"191"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"191"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"191"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"191"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"191"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"191"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"191"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"191"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"191"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"191"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"191"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"191"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"191"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"191"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"191"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"191"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"191"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"191"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"191"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"191"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"191"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"191"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"191"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"191"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"191"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"191"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"191"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"191"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"191"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"191"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"191"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"191"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"191"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"191"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"191"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"191"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"392","usedDeprecatedRules":"191"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"395"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"191"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"191"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"191"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"191"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"191"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419","usedDeprecatedRules":"191"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"191"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"191"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428","usedDeprecatedRules":"191"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"191"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},"D:\\Work\\beyond-data\\src\\index.js",[],["434","435"],"D:\\Work\\beyond-data\\src\\reportWebVitals.js",[],"D:\\Work\\beyond-data\\src\\App.js",["436","437"],"import \"antd/dist/antd.css\";\nimport \"./App.css\";\nimport { BrowserRouter, Switch } from \"react-router-dom\";\nimport AutoMLRoutes from \"./Routes/AutoMLRoutes\";\nimport DataLakesRoutes from \"./Routes/DataLakeRoutes/DataLakesRoutes\";\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <DataLakesRoutes />\n        {/* <AutoMLRoutes /> */}\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","D:\\Work\\beyond-data\\src\\Routes\\AutoMLRoutes.js",["438","439","440","441"],"import Layout, { Content } from \"antd/lib/layout/layout\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Prompt, Route, Switch, useHistory, useParams } from \"react-router-dom\";\r\nimport AutoMLBreadcrumbs from \"../Components/BreadCrumbs/AutoMLBreadcrumbs/AutoMLBreadcrumbs\";\r\nimport AutoMLHeader from \"../Components/Header/AutoMLHeader/AutoMLHeader\";\r\nimport AutoMLSideBar from \"../Components/SideBar/AutoMLSideBar/AutoMLSideBar\";\r\nimport CreateNewModel from \"../Pages/AutoML/CreateNewModel/CreateNewModel\";\r\nimport CreateNewProject from \"../Pages/AutoML/CreateNewProject/CreateNewProject\";\r\nimport ExistingModels from \"../Pages/AutoML/ExistingModels/ExistingModels\";\r\nimport NewProject from \"../Pages/AutoML/NewProject/NewProject\";\r\nimport SelectDatasets from \"../Pages/AutoML/SelectDatasets/SelectDatasets\";\r\nimport SelectedDatasets from \"../Pages/AutoML/SelectedDatasets/SelectedDatasets\";\r\nimport styles from \"./AutoMLRoutes.module.scss\";\r\nimport leftArrow from \"../Components/Images/AutoML/leftarrow.svg\";\r\nimport rightArrow from \"../Components/Images/AutoML/rightarrow.svg\";\r\nimport DatasetProcessing from \"../Pages/AutoML/DatasetProcessing/DatasetProcessing\";\r\nimport LinkColumns from \"../Pages/AutoML/LinkColumns/LinkColumns\";\r\nimport CustomisedDataset from \"../Pages/AutoML/CustomisedDataset/CustomisedDataset\";\r\nimport { ProjectProvider } from \"../Data/Contexts/AutoMLProject/AutoMLProjectContext\";\r\nimport { PageProvider } from \"../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport { ModelProvider } from \"../Data/Contexts/AutoMLModelContext/AutoMLModelContext\";\r\nimport { AuthProvider } from \"../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { SelectedDatasetsProvider } from \"../Data/Contexts/AutoMLSelectedDatasetsCart/AutoMLSelectedDatasetsCart\";\r\nimport Error404 from \"../Components/ErrorScreens/Error404\";\r\nimport CorrelationScreen from \"../Pages/AutoML/Correlation/CorrelationScreen\";\r\nimport SelectModelType from \"../Pages/AutoML/SelectModelType/SelectModelType\";\r\nimport { CustomTableProvider } from \"../Data/Contexts/AutoMLCustomTable/AutoMLCustomTableContext\";\r\nimport { message } from \"antd\";\r\nimport RetrainModel from \"../Pages/AutoML/RetrainModel/RetrainModel\";\r\nimport PredictModel from \"../Pages/AutoML/PredictModel/AutoMLPredictModel\";\r\nimport AllNotifications from \"../Pages/AutoML/Notifications/AllNotifications\";\r\nimport { NotificationsProvider } from \"../Data/Contexts/AutoMLNotifications/AutoMLNotificationsContext\";\r\nimport DataBucketsMain from \"../Pages/DataLake/DataBucketsMain/DataBucketsMain\";\r\n\r\nexport default function AutoMLRoutes() {\r\n  let pages = JSON.parse(localStorage.getItem(\"Page\"));\r\n  let project = JSON.parse(localStorage.getItem(\"Project\"));\r\n  let model = JSON.parse(localStorage.getItem(\"Model\"));\r\n  let history = useHistory();\r\n\r\n  const [prompt, setprompt] = useState(false);\r\n\r\n  const goNext = () => {\r\n    let route = history.location.pathname.split(\"/\");\r\n    if (route.includes(\"customised_dataset\") && pages) {\r\n    } else if (route.includes(\"link_columns\") && pages) {\r\n      // if (pages.all.metascreen === true) {\r\n      //   history.push({\r\n      //     pathname: `/automl/projects/${project.name}/models/asdasd/customised_dataset`,\r\n      //     state: {\r\n      //       detail: `I am ${project.name}`,\r\n      //       page_name: \"automl_models\",\r\n      //     },\r\n      //   });\r\n      // }\r\n    } else if (route.includes(\"dataset_processing\") && pages) {\r\n      // if (pages.all.linking === true) {\r\n      //   history.push({\r\n      //     pathname: `/automl/projects/${project.name}/models/asdasd/link_columns`,\r\n      //     state: {\r\n      //       detail: `I am ${project.name}`,\r\n      //       page_name: \"automl_models\",\r\n      //     },\r\n      //   });\r\n      // }\r\n    } else if (route.includes(\"selected_datasets\") && pages) {\r\n      if (pages.all.datasetprocessing === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/${project.name}/models/${model.model.name}/dataset_processing`,\r\n          state: {\r\n            detail: `I am ${project.name}`,\r\n            page_name: \"automl_models\",\r\n          },\r\n        });\r\n      }\r\n    } else if (route.includes(\"select_datasets\") && pages) {\r\n      if (pages.all.selecteddatasets === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/${project.name}/models/${model.model.name}/selected_datasets`,\r\n          state: {\r\n            detail: `I am ${project.name}`,\r\n            page_name: \"automl_models\",\r\n          },\r\n        });\r\n      }\r\n    } else if (route.includes(\"models\") && pages) {\r\n      if (pages.all.selectdatasets === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/${project.name}/models/${model.model.name}/select_datasets`,\r\n          state: {\r\n            detail: `I am ${project.name}`,\r\n            page_name: \"automl_models\",\r\n          },\r\n        });\r\n      }\r\n    } else if (route.includes(\"projects\") && pages) {\r\n      if (pages.all.models === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/${project.name}/models`,\r\n          state: {\r\n            detail: `I am ${project.name}`,\r\n            page_name: \"automl_models\",\r\n          },\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const goBack = () => {\r\n    setprompt(false);\r\n    let route = history.location.pathname.split(\"/\");\r\n    if (route.includes(\"modify_model\") && pages) {\r\n      // setprompt(true);\r\n      history.push({\r\n        pathname: `/automl/projects/${project.name}/models`,\r\n        state: {\r\n          detail: `I am ${project.name}`,\r\n          page_name: \"automl_models\",\r\n        },\r\n      });\r\n    } else if (route.includes(\"predict_model\") && pages) {\r\n      // setprompt(true);\r\n      history.push({\r\n        pathname: `/automl/projects/${project.name}/models`,\r\n        state: {\r\n          detail: `I am ${project.name}`,\r\n          page_name: \"automl_models\",\r\n        },\r\n      });\r\n    } else if (route.includes(\"feature_selection\") && pages) {\r\n      // setprompt(true);\r\n      if (pages.all.models === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/${project.name}/models`,\r\n          state: {\r\n            detail: `I am ${project.name}`,\r\n            page_name: \"automl_models\",\r\n          },\r\n        });\r\n      }\r\n    } else if (route.includes(\"customised_dataset\") && pages) {\r\n      if (pages.all.linking === true) {\r\n        // history.push({\r\n        //   pathname: `/automl/projects/${project.name}/models/${model.model.name}/link_columns`,\r\n        //   state: {\r\n        //     detail: `I am ${project.name}`,\r\n        //     page_name: \"automl_models\",\r\n        //   },\r\n        // });\r\n      }\r\n    } else if (route.includes(\"link_columns\") && pages) {\r\n      // setprompt(true);\r\n      if (pages.all.datasetprocessing === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/${project.name}/models/${model.model.name}/dataset_processing`,\r\n          state: {\r\n            detail: `I am ${project.name}`,\r\n            page_name: \"automl_models\",\r\n          },\r\n        });\r\n      }\r\n    } else if (route.includes(\"dataset_processing\") && pages) {\r\n      if (pages.all.selecteddatasets === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/${project.name}/models/${model.model.name}/selected_datasets`,\r\n          state: {\r\n            detail: `I am ${project.name}`,\r\n            page_name: \"automl_models\",\r\n          },\r\n        });\r\n      }\r\n    } else if (route.includes(\"selected_datasets\") && pages) {\r\n      if (pages.all.selectdatasets === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/${project.name}/models/${model.model.name}/select_datasets`,\r\n          state: {\r\n            detail: `I am ${project.name}`,\r\n            page_name: \"automl_models\",\r\n          },\r\n        });\r\n      }\r\n    } else if (route.includes(\"select_datasets\") && pages) {\r\n      if (pages.all.models === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/${project.name}/models`,\r\n          state: {\r\n            detail: `I am ${project.name}`,\r\n            page_name: \"automl_models\",\r\n          },\r\n        });\r\n      }\r\n    } else if (route.includes(\"models\") && pages) {\r\n      if (pages.all.projects === true) {\r\n        history.push({\r\n          pathname: `/automl/projects/`,\r\n          state: {\r\n            detail: `null`,\r\n            page_name: \"automl_projects\",\r\n          },\r\n        });\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <AuthProvider>\r\n        <NotificationsProvider>\r\n          <PageProvider>\r\n            <ProjectProvider>\r\n              <ModelProvider>\r\n                <SelectedDatasetsProvider>\r\n                  <CustomTableProvider>\r\n                    <Layout style={{ height: \"100vh\" }}>\r\n                      <AutoMLHeader />\r\n                      <Layout>\r\n                        <AutoMLSideBar />\r\n                        <Layout style={{ backgroundColor: \"#F5FAFF\" }}>\r\n                          <AutoMLBreadcrumbs />\r\n                          <Content className={styles.content}>\r\n                            <Switch>\r\n                              {/* <Route\r\n                                exact\r\n                                path=\"/datalake/databuckets\"\r\n                                component={DataBucketsMain}\r\n                              /> */}\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects\"\r\n                                component={NewProject}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/newproject\"\r\n                                component={CreateNewProject}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models\"\r\n                                component={ExistingModels}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/newmodel\"\r\n                                component={CreateNewModel}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/select_datasets\"\r\n                                component={SelectDatasets}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/selected_datasets\"\r\n                                component={SelectedDatasets}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/dataset_processing\"\r\n                                component={DatasetProcessing}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/link_columns\"\r\n                                component={LinkColumns}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/customised_dataset/\"\r\n                                component={CustomisedDataset}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/correlation/\"\r\n                                component={CorrelationScreen}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/all_notifications/\"\r\n                                component={AllNotifications}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/model_type/\"\r\n                                component={SelectModelType}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/modify_model/feature_selection/\"\r\n                                component={CustomisedDataset}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/predict_model/upload_dataset/\"\r\n                                component={PredictModel}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/retrain_model/upload_dataset/\"\r\n                                component={RetrainModel}\r\n                              />\r\n                              <Route\r\n                                exact\r\n                                path=\"/automl/projects/:project_id/models/:model_id/retrain_model/feature_selection/\"\r\n                                component={CustomisedDataset}\r\n                              />\r\n                              <Route exact path=\"/\" component={NewProject} />\r\n                              <Route component={Error404} />\r\n                            </Switch>\r\n                            <div\r\n                              className={styles.leftArrow}\r\n                              onClick={() => goBack()}\r\n                            >\r\n                              <img\r\n                                src={leftArrow}\r\n                                style={{\r\n                                  width: \"45px\",\r\n                                  cursor: \"pointer\",\r\n                                }}\r\n                                alt=\"leftArrow\"\r\n                              />\r\n                            </div>\r\n                            <div\r\n                              className={styles.rightArrow}\r\n                              onClick={() => goNext()}\r\n                            >\r\n                              <img\r\n                                src={rightArrow}\r\n                                style={{ width: \"45px\", cursor: \"pointer\" }}\r\n                                alt=\"rightArrow\"\r\n                              />\r\n                            </div>\r\n                          </Content>\r\n                        </Layout>\r\n                      </Layout>\r\n                    </Layout>\r\n                  </CustomTableProvider>\r\n                </SelectedDatasetsProvider>\r\n              </ModelProvider>\r\n            </ProjectProvider>\r\n          </PageProvider>\r\n        </NotificationsProvider>\r\n      </AuthProvider>\r\n      <Prompt\r\n        when={prompt}\r\n        message={() => \"Are you sure you want to leave this page?\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\NewProject\\NewProject.js",["442"],"/* eslint-disable no-unused-vars */\r\nimport { Drawer, message, Skeleton } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport AutoMLNewProjectButton from \"../../../Components/Button/AutoMLNewProjectButton/AutoMLNewProjectButton\";\r\nimport AutoMLExistingProjectsTable from \"../../../Components/Tables/AutoMLExistingProjects/AutoMLExistingProjectsTable\";\r\nimport { Tabs } from \"antd\";\r\nimport AutoMLProjectsDrawer from \"../../../Components/Drawers/AutoMLProjectsDrawer/AutoMLProjectsDrawer\";\r\nimport \"./NewProject.css\";\r\nimport AutoMLProjectShareModal from \"../../../Components/Modals/AutoMLProjectShareModal/AutoMLProjectShareModal\";\r\nimport AutoMLProjectsTypeTabs from \"../../../Components/Tabs/AutoMLProjectsTypeTabs.js\";\r\nimport AutoMLDeleteProjectModal from \"../../../Components/Modals/AutoMLDeleteProjectModal/AutoMLDeleteProjectModal\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport axios from \"axios\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport Cliploader from \"../../../Components/Loader/Cliploader\";\r\n\r\nexport default function NewProject(props) {\r\n  const { TabPane } = Tabs;\r\n\r\n  const [loading, setloading] = useState(false);\r\n  const [drawervisible, setdrawervisible] = useState(false);\r\n  const [modalvisible, setmodalvisible] = useState(false);\r\n  const [tab, settab] = useState(\"my_projects\");\r\n  const [deletemodal, setdeletemodal] = useState(false);\r\n  const [selectedProject, setselectedProject] = useState(null);\r\n  const [rendertable, setrendertable] = useState(false);\r\n\r\n  const { Auth } = useContext(AuthContext);\r\n  const { setPageFalse } = useContext(PageContext);\r\n\r\n  useEffect(() => {\r\n    setPageFalse(\"models\");\r\n  }, []);\r\n\r\n  const createProject = () => {\r\n    props.history.push({\r\n      pathname: \"/automl/projects/newproject/\",\r\n      state: {\r\n        detail: \"I am from Projects page\",\r\n        page_name: \"automl_newproject\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const callback = (id) => {\r\n    settab(id);\r\n  };\r\n\r\n  const showinfo = (row, data) => {\r\n    setselectedProject(data);\r\n    setdrawervisible(true);\r\n  };\r\n\r\n  const onClose = () => {\r\n    settab(\"\");\r\n    settab(tab);\r\n    setdrawervisible(false);\r\n  };\r\n\r\n  const showModal = async (item) => {\r\n    if (tab === \"my_projects\") {\r\n      console.log(item);\r\n      setselectedProject(item);\r\n      setmodalvisible(true);\r\n    }\r\n    if (tab === \"global_projects\") {\r\n      const myData = {\r\n        company_name: Auth.company_name,\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        project_name: item.project_name,\r\n        created_by: item.user_name,\r\n      };\r\n      const formData = serialize(myData);\r\n      setloading(true);\r\n      await axios({\r\n        method: \"post\",\r\n        url: `${URL}/automl/download/project/`,\r\n        data: formData,\r\n        headers: {\r\n          \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          console.log(response);\r\n          message.success(response.data);\r\n          setloading(false);\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n          if (error.response) {\r\n            // Request made and server responded\r\n            console.log(error.response.data);\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n          } else if (error.request) {\r\n            // The request was made but no response was received\r\n            console.log(error.request);\r\n          } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n            message.error(\"Error\", error.message);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const DeleteModal = (row, data) => {\r\n    setselectedProject(data);\r\n    setdeletemodal(true);\r\n  };\r\n\r\n  const ShareProject = async () => {\r\n    const myData = {\r\n      company_name: Auth.company_name,\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      project_name: selectedProject.project_name,\r\n    };\r\n    console.log(myData);\r\n    const formData = serialize(myData);\r\n    setloading(true);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/share/project/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        message.success(response.data);\r\n        settab(\"\");\r\n        setloading(false);\r\n        settab(tab);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          message.error(\"Error\", error.message);\r\n        }\r\n      });\r\n    setmodalvisible(false);\r\n    setdeletemodal(false);\r\n  };\r\n\r\n  const DeleteProject = async (pin) => {\r\n    setmodalvisible(false);\r\n    setdeletemodal(false);\r\n    let space = null;\r\n    if (tab === \"my_projects\") {\r\n      space = \"my_projects\";\r\n    } else if (tab === \"downloaded_projects\") {\r\n      space = \"downloaded_projects\";\r\n    } else if (tab === \"global_projects\") {\r\n      space = \"shared_projects\";\r\n    }\r\n    const myData = {\r\n      company_name: Auth.company_name,\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      project_name: selectedProject.project_name,\r\n      project_space: space,\r\n    };\r\n    const formData = serialize(myData);\r\n    setloading(true);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/delete/project/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        setloading(false);\r\n        settab(\"\");\r\n        settab(tab);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleModalCancel = () => {\r\n    setmodalvisible(false);\r\n    setdeletemodal(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"NewProject\"\r\n      style={{\r\n        textAlign: \"left\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <h3\r\n        style={{\r\n          fontWeight: \"700\",\r\n          marginBottom: \"0px\",\r\n          marginTop: \"11px\",\r\n          fontSize: \"18px\",\r\n        }}\r\n      >\r\n        New Project\r\n      </h3>\r\n      <hr\r\n        style={{\r\n          backgroundColor: \"#E1EEFF\",\r\n          border: \"none\",\r\n          height: \"1px\",\r\n          marginBottom: \"20px\",\r\n          width: \"100%\",\r\n        }}\r\n      />\r\n      <AutoMLNewProjectButton createProject={() => createProject()} tab={tab} />\r\n      {/* <h3 style={{ fontWeight: \"700\", marginTop: \"20px\", fontSize: \"18px\" }}>\r\n        Projects\r\n      </h3> */}\r\n      {/* <Tabs\r\n        defaultActiveKey=\"my_projects\"\r\n        onChange={callback}\r\n        style={{ marginTop: \"15px\", color: \"grey\" }}\r\n      >\r\n        <TabPane tab=\"My Projects\" key=\"my_projects\"></TabPane>\r\n        <TabPane tab=\"Downloaded Projects\" key=\"downloaded_projects\"></TabPane>\r\n        <TabPane tab=\"Global Projects\" key=\"global_projects\"></TabPane>\r\n      </Tabs> */}\r\n      <AutoMLProjectsTypeTabs setTab={(val) => settab(val)} />\r\n      <div\r\n        style={{\r\n          flex: \"1\",\r\n          overflowY: \"scroll\",\r\n          marginTop: \"-11px\",\r\n          paddingRight: \"10px\",\r\n        }}\r\n      >\r\n        {loading === true ? (\r\n          <Skeleton active loading={loading} />\r\n        ) : (\r\n          <AutoMLExistingProjectsTable\r\n            render={rendertable}\r\n            type={tab}\r\n            showinfo={showinfo}\r\n            showModal={showModal}\r\n            showdelete={DeleteModal}\r\n          />\r\n        )}\r\n      </div>\r\n      <AutoMLProjectsDrawer\r\n        onClose={onClose}\r\n        drawervisible={drawervisible}\r\n        type={tab}\r\n        data={selectedProject}\r\n      />\r\n      <AutoMLProjectShareModal\r\n        isModalVisible={modalvisible}\r\n        handleOK={() => ShareProject()}\r\n        handleCancel={() => handleModalCancel()}\r\n      />\r\n      <AutoMLDeleteProjectModal\r\n        deletemodal={deletemodal}\r\n        Delete={(pin) => DeleteProject(pin)}\r\n        handleCancel={() => handleModalCancel()}\r\n      />\r\n      <Cliploader loading={loading} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Header\\AutoMLHeader\\AutoMLHeader.js",["443","444","445","446","447","448","449","450"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport styles from \"./AutoMLHeader.module.scss\";\r\nimport { Badge, Layout, Popover } from \"antd\";\r\nimport Avatar from \"antd/lib/avatar/avatar\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport bellIcon from \"../../Icons/AutoML/bellicon.svg\";\r\nimport avatarimg from \"../../Icons/AutoML/avatar.png\";\r\nimport \"./styles.css\";\r\nimport NotificationPopover from \"../../Popover/NotificationPopover\";\r\nimport axios from \"axios\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport { io } from \"socket.io-client\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { NotificationsContext } from \"../../../Data/Contexts/AutoMLNotifications/AutoMLNotificationsContext\";\r\n\r\nexport default function AutoMLHeader() {\r\n  const { Header } = Layout;\r\n  const [popovervisible, setpopovervisible] = useState(false);\r\n  const [unreadcount, setunreadcount] = useState(0);\r\n  const [created, setcreated] = useState(false);\r\n\r\n  const { Auth } = useContext(AuthContext);\r\n  const { Notifications, setNotifications, setNotificationsStatus } =\r\n    useContext(NotificationsContext);\r\n\r\n  //Script 1\r\n  // const socket = io(`http://10.3.213.149:8001/`, {\r\n  //   // reconnectionDelayMax: 1000,\r\n  //   path: `notifications/${Auth.user_id}`,\r\n  //   // query: {\r\n  //   //   \"my-key\": \"my-value\",\r\n  //   // },\r\n  //   transports: [\"websocket\"],\r\n  // });\r\n\r\n  // console.log(socket.connected);\r\n\r\n  // socket.onAny((event, ...args) => {\r\n  //   console.log(`got ${event}`);\r\n  // });\r\n\r\n  //SCript 2\r\n  // var webSocketEndpoint = `ws://10.3.213.149:8001/notifications/usama/`; // ws : wss   // Websocket URL, Same on as mentioned in the routing.py\r\n  // var socket = new WebSocket(webSocketEndpoint); // Creating a new Web Socket Connection\r\n  // // Socket On receive message Functionality\r\n  // socket.onmessage = function (e) {\r\n  //   console.log(\"message\", e);\r\n  // };\r\n  // socket.onopen = function (e) {\r\n  //   console.log(\"open\", e);\r\n  // };\r\n  // socket.onerror = function (e) {\r\n  //   console.log(\"error\", e);\r\n  // };\r\n  // socket.onclose = function (e) {\r\n  //   console.log(\"closed\", e);\r\n  // };\r\n\r\n  //Script 3\r\n  // let socketRef = new WebSocket(\r\n  //   `ws://10.3.213.149:8001/notifications/${Auth.user_id}`\r\n  // );\r\n  // socketRef.onopen = () => {\r\n  //   console.log(\"WebSocket open\");\r\n  // };\r\n  // socketRef.onmessage = (e) => {\r\n  //   this.socketNewMessage(e.data);\r\n  // };\r\n\r\n  // socketRef.onerror = (e) => {\r\n  //   console.log(e.message);\r\n  // };\r\n  // socketRef.onclose = () => {\r\n  //   console.log(\"WebSocket closed let's reopen\");\r\n  // };\r\n\r\n  // Socket On receive message Functionality\r\n  // socket.onmessage = function (e) {\r\n  //   console.log(\"message\", e);\r\n  //   // $(\"body\").append(\"<h3>\" + e.data + \"</h3>\");\r\n  //   // Can write any functionality based on your requirement\r\n  // };\r\n\r\n  const handlevisiblechange = (visible) => {\r\n    setpopovervisible(visible);\r\n    setunreadcount(0);\r\n    setNotificationsStatus();\r\n  };\r\n\r\n  //Script 4\r\n  var loc = window.location;\r\n  var user = 4455;\r\n  var wsStart = \"ws://\";\r\n  if (loc.protocol == \"https:\") {\r\n    wsStart = \"wss://\";\r\n  }\r\n\r\n  var webSocketEndpoint =\r\n    wsStart +\r\n    \"10.3.213.149:80\" +\r\n    `/notifications/${Auth.company_id}/${Auth.user_id}/`; // ws : wss   // Websocket URL, Same on as mentioned in the routing.py\r\n\r\n  let socket = null; // Creating a new Web Socket Connection\r\n\r\n  useEffect(() => {\r\n    socket = new WebSocket(webSocketEndpoint); // Creating a new Web Socket Connection\r\n\r\n    socket.onopen = function (e) {\r\n      console.log(\"open\");\r\n    };\r\n\r\n    // Socket Error Functionality\r\n    socket.onerror = function (e) {\r\n      console.log(\"error\", e);\r\n    };\r\n\r\n    // Socket close Functionality\r\n    socket.onclose = function (e) {\r\n      console.log(\"closed\", e);\r\n    };\r\n    return () => {\r\n      socket.close();\r\n      console.log(\"CLOSING\");\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // socket.on(\"message\", (value) => {\r\n    //   console.log(value);\r\n    //   setunreadcount(unreadcount + 1);\r\n    // });\r\n    if (socket !== null) {\r\n      socket.onmessage = function (e) {\r\n        console.log(\"message\", e);\r\n        setNotifications(JSON.parse(e.data));\r\n      };\r\n    }\r\n  });\r\n\r\n  useEffect(() => {\r\n    let temp = Notifications.Notifications;\r\n    if (temp.length > 6) {\r\n      temp = temp.slice(temp.length - 6, temp.length);\r\n    }\r\n    let count = 0;\r\n    temp.forEach((element) => {\r\n      if (element.status === \"unread\") {\r\n        count = count + 1;\r\n      }\r\n    });\r\n    setunreadcount(count);\r\n  }, [Notifications]);\r\n\r\n  const sendtask = async () => {\r\n    await axios\r\n      .get(`${URL}/background_task/?user_id=${Auth.user_id}`)\r\n      .then(function (response) {\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.Container} id=\"AutoMLHeader\">\r\n      <Header className={styles.header}>\r\n        <div className=\"logo\" />\r\n        <h2>\r\n          Beyond<span> Data</span>\r\n        </h2>\r\n        <div style={{ display: \"flex\", height: \"56px\" }}>\r\n          <div style={{ flexGrow: \"1\" }}></div>\r\n          {/* <button\r\n            style={{\r\n              marginRight: \"30px\",\r\n              fontSize: \"20px\",\r\n              color: \"black\",\r\n            }}\r\n            onClick={() => sendtask()}\r\n          >\r\n            call for Notification (testing)\r\n          </button> */}\r\n          <Popover\r\n            placement=\"bottomRight\"\r\n            title=\"Notifications\"\r\n            content={NotificationPopover}\r\n            visible={popovervisible}\r\n            trigger=\"click\"\r\n            overlayClassName=\"Popover\"\r\n            onVisibleChange={handlevisiblechange}\r\n          >\r\n            <Badge\r\n              count={unreadcount}\r\n              style={\r\n                unreadcount === 0\r\n                  ? { display: \"none\" }\r\n                  : { display: \"block\", margin: \"auto\" }\r\n              }\r\n            >\r\n              <img\r\n                src={bellIcon}\r\n                alt={\"Bell Icon\"}\r\n                onClick={() => setpopovervisible(!popovervisible)}\r\n              />\r\n            </Badge>\r\n          </Popover>\r\n          <Avatar\r\n            // icon={<UserOutlined />}\r\n            src={avatarimg}\r\n            style={{ display: \"block\", margin: \"auto\", marginLeft: \"20px\" }}\r\n          />\r\n        </div>\r\n      </Header>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\SideBar\\AutoMLSideBar\\AutoMLSideBar.js",[],"D:\\Work\\beyond-data\\src\\Components\\BreadCrumbs\\AutoMLBreadcrumbs\\AutoMLBreadcrumbs.js",[],"D:\\Work\\beyond-data\\src\\Components\\Input\\Upload\\AutoMLNewUpload\\AutoMLNewUpload.js",["451","452","453"],"D:\\Work\\beyond-data\\src\\Components\\Button\\AutoMLNewProjectButton\\AutoMLNewProjectButton.js",[],"D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLExistingProjects\\AutoMLExistingProjectsTable.js",["454"],"/* eslint-disable no-unused-vars */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Space, Empty, Tooltip, message } from \"antd\";\r\nimport styles from \"./AutoMLExistingProjectsTable.module.scss\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport deleteIcon from \"../../Icons/AutoML/delete.svg\";\r\nimport infoIcon from \"../../Icons/AutoML/info.svg\";\r\nimport downloadIcon from \"../../Icons/AutoML/download.svg\";\r\nimport shareIcon from \"../../Icons/AutoML/share.svg\";\r\nimport \"../tables.css\";\r\nimport { ProjectContext } from \"../../../Data/Contexts/AutoMLProject/AutoMLProjectContext\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport { ModelContext } from \"../../../Data/Contexts/AutoMLModelContext/AutoMLModelContext\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport axios from \"axios\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport Cliploader from \"../../Loader/Cliploader\";\r\nimport NoData from \"../../NoData/NoData\";\r\n\r\nexport default function AutoMLExistingProjectsTable(props) {\r\n  let history = useHistory();\r\n\r\n  const { setProject } = useContext(ProjectContext);\r\n  const { pages, setCurrentPage } = useContext(PageContext);\r\n  const { setModelList, setModelsType } = useContext(ModelContext);\r\n  const [called, setcalled] = useState(false);\r\n  const Auth = useContext(AuthContext);\r\n  const [data, setdata] = useState(null);\r\n  const [loading, setloading] = useState(false);\r\n\r\n  const removed = [\r\n    {\r\n      key: \"1\",\r\n      name: \"Trade Prediction\",\r\n      no_of_models: 12,\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n      description:\r\n        \"I am a new project,I am a new project,I am a new ,I am a new project,I am a new projectI am a new project,,I am a new project,\",\r\n    },\r\n    {\r\n      key: \"2\",\r\n      name: \"Stock Prediction\",\r\n      no_of_models: 12,\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n      description: \"I am a new project\",\r\n    },\r\n    {\r\n      key: \"3\",\r\n      name: \"Cash Prediction\",\r\n      no_of_models: 12,\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n      description: \"I am a new project\",\r\n    },\r\n    {\r\n      key: \"4\",\r\n      name: \"Trade Prediction\",\r\n      no_of_models: 12,\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n      description: \"I am a new project\",\r\n    },\r\n    {\r\n      key: \"5\",\r\n      name: \"Trade Prediction\",\r\n      no_of_models: 12,\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n      description: \"I am a new project\",\r\n    },\r\n  ];\r\n\r\n  let tempdata = [\r\n    {\r\n      user_name: \"101\",\r\n      project_name: \"project_1\",\r\n      project_desc: \"dummy project\",\r\n      project_last_modified: \"03/09/2021, 13:41:12\",\r\n      model_info: [\r\n        {\r\n          model_name: \"model_3\",\r\n          model_last_modified: \"03/09/2021, 12:42:25\",\r\n          model_desc: \"dummy model\",\r\n          model_type: null,\r\n          model_status: null,\r\n          model_performance: null,\r\n          databucket_name: \"databucket_2\",\r\n          dataset_name: \"dataset_1\",\r\n          dataset_path: \"my_datasets\\\\databucket_2\\\\dataset_1.csv\",\r\n        },\r\n        {\r\n          model_name: \"model_2\",\r\n          model_last_modified: \"03/09/2021, 12:42:21\",\r\n          model_desc: \"dummy model\",\r\n          model_type: null,\r\n          model_status: null,\r\n          model_performance: null,\r\n          databucket_name: \"databucket_1\",\r\n          dataset_name: \"dataset_1\",\r\n          dataset_path: \"my_datasets\\\\databucket_1\\\\dataset_1.csv\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      user_name: \"102\",\r\n      project_name: \"project_2\",\r\n      project_desc: \"dummy project2\",\r\n      project_last_modified: \"03/07/2021, 13:41:12\",\r\n      model_info: [\r\n        {\r\n          model_name: \"model_4\",\r\n          model_last_modified: \"03/09/2021, 12:42:25\",\r\n          model_desc: \"dummy model\",\r\n          model_type: null,\r\n          model_status: null,\r\n          model_performance: null,\r\n          databucket_name: \"databucket_2\",\r\n          dataset_name: \"dataset_1\",\r\n          dataset_path: \"my_datasets\\\\databucket_2\\\\dataset_1.csv\",\r\n        },\r\n        {\r\n          model_name: \"model_5\",\r\n          model_last_modified: \"03/09/2021, 12:42:21\",\r\n          model_desc: \"dummy model\",\r\n          model_type: null,\r\n          model_status: null,\r\n          model_performance: null,\r\n          databucket_name: \"databucket_1\",\r\n          dataset_name: \"dataset_1\",\r\n          dataset_path: \"my_datasets\\\\databucket_1\\\\dataset_1.csv\",\r\n        },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    setdata(null);\r\n    let type = \"\";\r\n    if (props.type === \"my_projects\") {\r\n      type = \"p\";\r\n    }\r\n    if (props.type === \"downloaded_projects\") {\r\n      type = \"d\";\r\n    }\r\n    if (props.type === \"global_projects\") {\r\n      type = \"s\";\r\n    }\r\n    let demo = {\r\n      company_name: \"beyond_data\",\r\n      company_id: \"214\",\r\n      user_id: \"usama\",\r\n    };\r\n    Auth.setAuth(demo);\r\n    async function fetch() {\r\n      const myData = {\r\n        company_id: demo.company_id,\r\n        user_id: demo.user_id,\r\n        space: type,\r\n      };\r\n      console.log(myData);\r\n      const formData = serialize(myData);\r\n      setloading(true);\r\n      await axios({\r\n        method: \"post\",\r\n        url: `${URL}/automl/load_projects/`,\r\n        data: formData,\r\n        headers: {\r\n          \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          console.log(response);\r\n          setdata(response.data);\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n          message.error(\"Failed to Fetch Projects\");\r\n          console.log(error);\r\n        });\r\n    }\r\n    fetch();\r\n  }, [props.type]);\r\n\r\n  const selectProject = (index) => {\r\n    if (props.type !== \"global_projects\") {\r\n      setProject({\r\n        name: data[index].project_name,\r\n        type: props.type,\r\n        desc: data[index].project_desc,\r\n        user: data[index].user_name,\r\n      });\r\n      setCurrentPage(\"models\");\r\n      if (data[index].model_info[0].model_name === null) {\r\n        setModelList(null);\r\n      } else {\r\n        setModelList(data[index].model_info);\r\n      }\r\n      setModelsType(props.type);\r\n      history.push({\r\n        pathname: `/automl/projects/${data[index].project_name}/models`,\r\n        state: {\r\n          detail: `I am ${data[index].project_name}`,\r\n          page_name: \"automl_models\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const getrows = () => {\r\n    if (data !== null && data.length !== undefined) {\r\n      return data.map((item, index) => {\r\n        return (\r\n          <tr id={item.key} key={index}>\r\n            <td\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={() => selectProject(index)}\r\n            >\r\n              <a\r\n                style={{\r\n                  textDecoration: \"none\",\r\n                  color: \"#38B7D3\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n                onClick={() => selectProject(index)}\r\n              >\r\n                <p className={styles.titlebold}>{item.project_name}</p>\r\n              </a>\r\n              <span className={styles.subtitle}>\r\n                Created by:{\" \"}\r\n                <Tooltip title={item.user_name}>\r\n                  <span\r\n                    className={styles.author}\r\n                    style={{\r\n                      backgroundColor: \"#B8F2FF\",\r\n                      color: \"#38B7D3\",\r\n                      fontWeight: \"normal\",\r\n                      borderRadius: \"50%\",\r\n                      border: \"1px solid #38B7D3\",\r\n                      height: \"25px\",\r\n                      fontSize: \"10px\",\r\n                      padding: \"3px\",\r\n                    }}\r\n                  >\r\n                    {item.user_name}\r\n                  </span>\r\n                </Tooltip>\r\n              </span>\r\n            </td>\r\n            <td\r\n              onClick={() => selectProject(index)}\r\n              className={styles.description}\r\n              style={{\r\n                overflow: \"hidden\",\r\n                textOverflow: \"ellipsis\",\r\n                paddingRight: \"70px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              {item.project_desc}{\" \"}\r\n            </td>\r\n            {/* <td className={styles.status}> {item.no_of_models} </td> */}\r\n            <td\r\n              className={styles.last_updated}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={() => selectProject(index)}\r\n            >\r\n              <p\r\n                style={{\r\n                  margin: \"0px\",\r\n                  paddingTop: \"3px\",\r\n                  fontSize: \"13px\",\r\n                  fontWeight: \"bold\",\r\n                  paddingBottom: \"3px\",\r\n                }}\r\n              >\r\n                {item.project_last_modified.split(\",\")[0]}\r\n              </p>\r\n              <p style={{ margin: \"0px\", padding: \"0\", fontSize: \"13px\" }}>\r\n                {item.project_last_modified.split(\",\")[1]}\r\n              </p>\r\n            </td>\r\n            <td>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  marginRight: \"20px\",\r\n                }}\r\n              >\r\n                <a\r\n                  style={{\r\n                    textDecoration: \" none\",\r\n                    fontStyle: \"normal\",\r\n                    fontWeight: \"bold\",\r\n                    fontSize: \"14px\",\r\n                    color: \"#6d6d6d\",\r\n                  }}\r\n                  onClick={() => props.showinfo(item.key, item)}\r\n                >\r\n                  <img\r\n                    src={infoIcon}\r\n                    alt=\"delete icon\"\r\n                    style={{ width: \"16px\" }}\r\n                  ></img>\r\n                  <span\r\n                    style={{\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"12px\",\r\n                      marginLeft: \"4px\",\r\n                    }}\r\n                  >\r\n                    Info\r\n                  </span>\r\n                </a>\r\n                <a\r\n                  style={\r\n                    props.type === \"downloaded_projects\"\r\n                      ? {\r\n                          textDecoration: \" none\",\r\n                          fontStyle: \"normal\",\r\n                          cursor: \"not-allowed\",\r\n                          fontWeight: \"bold\",\r\n                          fontSize: \"14px\",\r\n                          color: \"grey\",\r\n                          opacity: \"0.4\",\r\n                        }\r\n                      : {\r\n                          textDecoration: \" none\",\r\n                          fontStyle: \"normal\",\r\n                          marginLeft: \"8px\",\r\n                          fontWeight: \"bold\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#6d6d6d\",\r\n                        }\r\n                  }\r\n                  onClick={() => props.showModal(item)}\r\n                >\r\n                  <img\r\n                    src={\r\n                      props.type === \"global_projects\"\r\n                        ? downloadIcon\r\n                        : shareIcon\r\n                    }\r\n                    alt=\"delete icon\"\r\n                    style={{ width: \"16px\" }}\r\n                  ></img>\r\n                  <span\r\n                    style={{\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"12px\",\r\n                      marginLeft: \"4px\",\r\n                    }}\r\n                  >\r\n                    {props.type === \"global_projects\" ? \"Download\" : \"Share\"}\r\n                  </span>\r\n                </a>\r\n                <a\r\n                  style={\r\n                    item.user_name === Auth.Auth.user_id ||\r\n                    props.type === \"downloaded_projects\"\r\n                      ? {\r\n                          textDecoration: \" none\",\r\n                          fontStyle: \"normal\",\r\n                          fontWeight: \"bold\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#6d6d6d\",\r\n                        }\r\n                      : {\r\n                          textDecoration: \" none\",\r\n                          fontStyle: \"normal\",\r\n                          fontWeight: \"bold\",\r\n                          fontSize: \"14px\",\r\n                          color: \"#6d6d6d\",\r\n                          opacity: \"0.3\",\r\n                          cursor: \"not-allowed\",\r\n                        }\r\n                  }\r\n                  onClick={() => {\r\n                    if (props.type === \"global_projects\") {\r\n                      if (item.user_name === Auth.Auth.user_id) {\r\n                        props.showdelete(index, item);\r\n                      }\r\n                    } else {\r\n                      props.showdelete(index, item);\r\n                    }\r\n                  }}\r\n                >\r\n                  <img\r\n                    src={deleteIcon}\r\n                    alt=\"delete icon\"\r\n                    style={{ width: \"16px\" }}\r\n                  ></img>\r\n                  <span\r\n                    style={{\r\n                      fontWeight: \"700\",\r\n                      fontSize: \"12px\",\r\n                      marginLeft: \"4px\",\r\n                    }}\r\n                  >\r\n                    Delete\r\n                  </span>\r\n                </a>\r\n              </div>\r\n            </td>\r\n          </tr>\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      {data && data.length > 0 ? (\r\n        <table className={styles.datatable} id=\"DataTable\">\r\n          <thead>\r\n            <tr>\r\n              <th> </th>\r\n              <th>Description</th>\r\n              <th>Last Updated</th>\r\n              <th> </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{getrows()}</tbody>\r\n        </table>\r\n      ) : (\r\n        <>\r\n          <NoData text=\"No Data\" />\r\n          {/* <Empty style={{ marginTop: \"40px\" }} /> */}\r\n          <Cliploader loading={loading} />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\CreateNewProject\\CreateNewProject.js",[],"D:\\Work\\beyond-data\\src\\Pages\\AutoML\\ExistingModels\\ExistingModels.js",["455"],"import { Button, message, Skeleton } from \"antd\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport AutoMLNewModelButton from \"../../../Components/Button/AutoMLNewModelButton/AutoMLNewModelButton\";\r\nimport AutoMLModelsDrawer from \"../../../Components/Drawers/AutoMLModelsDrawer/AutoMLModelsDrawer\";\r\nimport AutoMLDeleteModelModal from \"../../../Components/Modals/AutoMLDeleteModelModal/AutoMLDeleteModelModal\";\r\nimport AutoMLExistingModelsTable from \"../../../Components/Tables/AutoMLExistingModels/AutoMLExistingModelsTable\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { ModelContext } from \"../../../Data/Contexts/AutoMLModelContext/AutoMLModelContext\";\r\nimport { ProjectContext } from \"../../../Data/Contexts/AutoMLProject/AutoMLProjectContext\";\r\nimport \"./styles.css\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport Cliploader from \"../../../Components/Loader/Cliploader\";\r\nimport AutoMLModelShareModal from \"../../../Components/Modals/AutoMLShareModelModal/AutoMLShareModelModal\";\r\nimport searchIcon from \"../../../Components/Icons/AutoML/search.svg\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\n\r\nexport default function ExistingModels(props) {\r\n  const { project_id } = useParams();\r\n  const [selected_model, setselected_model] = useState(null);\r\n  const [loading, setloading] = useState(false);\r\n  const [drawervisible, setdrawervisible] = useState(false);\r\n  const [selectedModel, setselectedModel] = useState(null);\r\n  const [modalvisible, setmodalvisible] = useState(false);\r\n  const [searchval, setsearchval] = useState(\"\");\r\n\r\n  const [deletemodal, setdeletemodal] = useState(false);\r\n  const [rendertable, setrendertable] = useState(true);\r\n\r\n  const { Model, removeModel, setModel } = useContext(ModelContext);\r\n  const { Project } = useContext(ProjectContext);\r\n  const { Auth } = useContext(AuthContext);\r\n  const { setPageFalse } = useContext(PageContext);\r\n\r\n  useEffect(() => {\r\n    setPageFalse(\"selectdatasets\");\r\n  }, []);\r\n\r\n  const createModel = () => {\r\n    props.history.push({\r\n      pathname: `/automl/projects/${project_id}/models/newmodel`,\r\n      state: { detail: \"I am from Models page\" },\r\n    });\r\n  };\r\n\r\n  const showinfo = (row, item) => {\r\n    setselectedModel(item);\r\n    setdrawervisible(true);\r\n  };\r\n\r\n  const DeleteModal = (row, data) => {\r\n    setselectedModel(data);\r\n    setdeletemodal(true);\r\n  };\r\n\r\n  const DeleteModel = async (pin) => {\r\n    setdeletemodal(false);\r\n    console.log(\"delete\", selectedModel);\r\n    let name = selectedModel.model_name;\r\n    console.log(Project.type);\r\n    let space = null;\r\n    if (Project.type === \"my_projects\") {\r\n      space = \"my_projects\";\r\n    } else if (Project.type === \"downloaded_projects\") {\r\n      space = \"downloaded_projects\";\r\n    } else if (Project.type === \"global_projects\") {\r\n      space = \"shared_projects\";\r\n    }\r\n    const myData = {\r\n      company_name: Auth.company_name,\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      project_name: Project.name,\r\n      model_space: space,\r\n      model_name: selectedModel.model_name,\r\n    };\r\n    const formData = serialize(myData);\r\n    setloading(true);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/delete/model/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        if (response.data === \"Deleted\") {\r\n          removeModel(name);\r\n          message.success(\"Deleted Successfully\");\r\n          setrendertable(!rendertable);\r\n        }\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const ShareModel = async () => {\r\n    const myData = {\r\n      company_name: Auth.company_name,\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      project_name: Project.name,\r\n      model_name: selectedModel.model_name,\r\n    };\r\n    console.log(myData);\r\n    const formData = serialize(myData);\r\n    setmodalvisible(false);\r\n    setdeletemodal(false);\r\n    setloading(true);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/share/model/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        message.success(response.data);\r\n        setloading(false);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n          message.error(\"Error\", error.message);\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleModalCancel = () => {\r\n    setdeletemodal(false);\r\n    setmodalvisible(false);\r\n  };\r\n\r\n  const ShowModal = (key, item) => {\r\n    console.log(item);\r\n    console.log(selectedModel);\r\n    setmodalvisible(true);\r\n  };\r\n\r\n  const modifyModel = () => {\r\n    setModel({\r\n      name: Model.allmodels[selected_model].model_name,\r\n      desc: Model.allmodels[selected_model].model_desc,\r\n    });\r\n    props.history.push({\r\n      pathname: `/automl/projects/${project_id}/models/${Model.allmodels[selected_model].model_name}/modify_model/feature_selection/`,\r\n      state: { detail: \"I am from Models page\" },\r\n    });\r\n  };\r\n\r\n  const retrainModel = () => {\r\n    setModel({\r\n      name: Model.allmodels[selected_model].model_name,\r\n      desc: Model.allmodels[selected_model].model_desc,\r\n    });\r\n    props.history.push({\r\n      pathname: `/automl/projects/${project_id}/models/${Model.allmodels[selected_model].model_name}/retrain_model/upload_dataset/`,\r\n      state: { detail: \"I am from Models page\" },\r\n    });\r\n  };\r\n\r\n  const predictModel = () => {\r\n    setModel({\r\n      name: Model.allmodels[selected_model].model_name,\r\n      desc: Model.allmodels[selected_model].model_desc,\r\n    });\r\n    props.history.push({\r\n      pathname: `/automl/projects/${project_id}/models/${Model.allmodels[selected_model].model_name}/predict_model/upload_dataset/`,\r\n      state: { detail: \"I am from Models page\" },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"ExistingModels\"\r\n      style={{\r\n        textAlign: \"left\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          fontStyle: \"normal\",\r\n          fontWeight: \"normal\",\r\n          fontSize: \"12px\",\r\n          lineHeight: \"13px\",\r\n          color: \"#085FAB\",\r\n        }}\r\n      >\r\n        {project_id}\r\n      </div>\r\n      <h3 style={{ fontWeight: \"700\", marginTop: \"2px\", fontSize: \"18px\" }}>\r\n        New Model\r\n      </h3>\r\n      <hr\r\n        style={{\r\n          backgroundColor: \"#E1EEFF\",\r\n          marginTop: \"0px\",\r\n          marginBottom: \"20px\",\r\n          border: \"none\",\r\n          height: \"1px\",\r\n          width: \"100%\",\r\n        }}\r\n      />\r\n      <AutoMLNewModelButton createModel={() => createModel()} />\r\n      <div style={{ display: \"flex\" }}>\r\n        <h3\r\n          style={{\r\n            display: \"inline-block\",\r\n            fontWeight: \"600\",\r\n            fontSize: \"18px\",\r\n            marginTop: \"20px\",\r\n            // width: \"20%\",\r\n            flexGrow: \"1\",\r\n          }}\r\n        >\r\n          Models\r\n        </h3>\r\n        <div className=\"searchbar\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"search\"\r\n            autoComplete=\"off\"\r\n            style={{ backgroundImage: `url(${searchIcon})` }}\r\n            // placeholder=\"Search..\"\r\n            value={searchval}\r\n            onChange={(e) => setsearchval(e.target.value)}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <hr\r\n        style={{\r\n          backgroundColor: \"#E1EEFF\",\r\n          marginTop: \"2px\",\r\n          border: \"none\",\r\n          height: \"1px\",\r\n          marginBottom: \"0px\",\r\n          width: \"100%\",\r\n        }}\r\n      />\r\n      <div\r\n        style={{\r\n          flexGrow: \"1\",\r\n          overflowY: \"scroll\",\r\n          paddingRight: \"10px\",\r\n          marginTop: \"0px\",\r\n        }}\r\n      >\r\n        {loading === true ? (\r\n          <Skeleton active loading={loading} />\r\n        ) : (\r\n          <AutoMLExistingModelsTable\r\n            selected={(id) => setselected_model(id)}\r\n            showinfo={showinfo}\r\n            showmodal={ShowModal}\r\n            showdelete={DeleteModal}\r\n            render={rendertable}\r\n            value={searchval}\r\n          />\r\n        )}\r\n      </div>\r\n      <AutoMLDeleteModelModal\r\n        deletemodal={deletemodal}\r\n        Delete={(pin) => DeleteModel(pin)}\r\n        handleCancel={() => handleModalCancel()}\r\n      />\r\n      <AutoMLModelShareModal\r\n        isModalVisible={modalvisible}\r\n        handleOK={() => ShareModel()}\r\n        handleCancel={() => handleModalCancel()}\r\n      />\r\n      <AutoMLModelsDrawer\r\n        onClose={() => setdrawervisible(false)}\r\n        drawervisible={drawervisible}\r\n        type={Model.type}\r\n        data={selectedModel}\r\n      />\r\n\r\n      <hr\r\n        style={{\r\n          backgroundColor: \"#E1EEFF\",\r\n          border: \"none\",\r\n          height: \"1px\",\r\n          marginTop: \"0px\",\r\n        }}\r\n      />\r\n      {loading === true ? null : (\r\n        <div\r\n          className=\"ExistingModelsButtons\"\r\n          style={selected_model === null ? { display: \"none\" } : null}\r\n        >\r\n          <Button\r\n            style={{\r\n              borderRadius: \"64px\",\r\n              marginRight: \"10px\",\r\n              width: \"161px\",\r\n              height: \"40px\",\r\n              // color: selected_model === null ? \"grey\" : \"#085FAB\",\r\n              borderColor: selected_model === null ? \"grey\" : \"#085FAB\",\r\n              fontWeight: \"bold\",\r\n              fontSize: \"16px\",\r\n            }}\r\n            disabled={selected_model === null ? true : false}\r\n            onClick={() => {\r\n              predictModel();\r\n            }}\r\n          >\r\n            Predict\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              borderRadius: \"64px\",\r\n              marginRight: \"10px\",\r\n              width: \"161px\",\r\n              height: \"40px\",\r\n              // color: selected_model === null ? \"grey\" : \"#085FAB\",\r\n              borderColor: selected_model === null ? \"grey\" : \"#085FAB\",\r\n              fontWeight: \"bold\",\r\n              fontSize: \"16px\",\r\n            }}\r\n            disabled={selected_model === null ? true : false}\r\n            onClick={() => retrainModel()}\r\n          >\r\n            Retrain Model\r\n          </Button>\r\n          <Button\r\n            style={{\r\n              borderRadius: \"64px\",\r\n              marginRight: \"10px\",\r\n              width: \"161px\",\r\n              height: \"40px\",\r\n              // color: selected_model === null ? \"grey\" : \"#085FAB\",\r\n              borderColor: selected_model === null ? \"grey\" : \"#085FAB\",\r\n              fontWeight: \"bold\",\r\n              fontSize: \"16px\",\r\n            }}\r\n            disabled={selected_model === null ? true : false}\r\n            onClick={() => modifyModel()}\r\n          >\r\n            Modify Model\r\n          </Button>\r\n        </div>\r\n      )}\r\n      <Cliploader loading={loading} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Button\\AutoMLNewModelButton\\AutoMLNewModelButton.js",[],"D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLExistingModels\\AutoMLExistingModelsTable.js",["456"],"/* eslint-disable no-unused-vars */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Table, Space, Empty, Button, Tag, Tooltip } from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport styles from \"./AutoMLExistingModelsTable.module.scss\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport infoIcon from \"../../Icons/AutoML/info.svg\";\r\nimport deleteIcon from \"../../Icons/AutoML/delete.svg\";\r\nimport shareIcon from \"../../Icons/AutoML/share.svg\";\r\nimport { List } from \"antd/lib/form/Form\";\r\nimport { ModelContext } from \"../../../Data/Contexts/AutoMLModelContext/AutoMLModelContext\";\r\nimport { ProjectContext } from \"../../../Data/Contexts/AutoMLProject/AutoMLProjectContext\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport NoData from \"../../NoData/NoData\";\r\n\r\nexport default function AutoMLExistingModelTable(props) {\r\n  let history = useHistory();\r\n  let { project_id } = useParams();\r\n\r\n  const { Model } = useContext(ModelContext);\r\n  const { Project } = useContext(ProjectContext);\r\n  const { Auth } = useContext(AuthContext);\r\n\r\n  // var tds = document.getElementsByTagName(\"td\");\r\n  // for (var i = 0; i < tds.length; i++) {\r\n  //   tds[i].onmouseover = function () {\r\n  //     this.parentNode.style.background = \"#ff0000\";\r\n  //   };\r\n  //   tds[i].onmouseout = function () {\r\n  //     this.parentNode.style.backgroundColor = \"#fff\";\r\n  //   };\r\n  // }\r\n\r\n  const removed = [\r\n    {\r\n      key: \"1\",\r\n      name: \"Stock Prediction\",\r\n      accuracy: 12,\r\n      state: \"In Progress\",\r\n      description: \"I am a Model\",\r\n      status: \"New\",\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n    },\r\n    {\r\n      key: \"2\",\r\n      name: \"Stock Prediction\",\r\n      accuracy: 72,\r\n      state: \"Training\",\r\n      description: \"I am a Model\",\r\n      status: \"Updated\",\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n    },\r\n    {\r\n      key: \"3\",\r\n      name: \"Stock Prediction\",\r\n      accuracy: 52,\r\n      state: \"Training\",\r\n      description: \"I am a Model\",\r\n      status: \"Update Available\",\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n    },\r\n    {\r\n      key: \"4\",\r\n      name: \"Stock Prediction\",\r\n      rma: 12,\r\n      accuracy: 72,\r\n      state: \"Deployed\",\r\n      description: \"I am a Model\",\r\n      status: \"New\",\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n    },\r\n    {\r\n      key: \"5\",\r\n      name: \"Stock Prediction\",\r\n      accuracy: 72,\r\n      state: \"In Progress\",\r\n      description: \"I am a Model\",\r\n      status: \"New\",\r\n      last_updated: \"Monday 21 Dec, 2020\",\r\n    },\r\n  ];\r\n\r\n  const [data, setdata] = useState(Model.allmodels);\r\n\r\n  useEffect(() => {\r\n    if (props.value === \"\") {\r\n      setdata(Model.allmodels);\r\n    } else {\r\n      let temp = [];\r\n      Model.allmodels.forEach((element) => {\r\n        if (element.model_name.includes(props.value)) {\r\n          temp.push(element);\r\n        }\r\n      });\r\n      setdata(temp);\r\n    }\r\n  }, [props.value]);\r\n\r\n  const rowclick = (id) => {\r\n    let trs = document.getElementsByTagName(\"tr\");\r\n    for (var x of trs) {\r\n      x.style.backgroundColor = \"#f5faff\";\r\n      // var css = \"tbody tr:hover { background: red;}\";\r\n      // var s = document.createElement(\"style\");\r\n\r\n      // if (s.styleSheet) {\r\n      //   s.styleSheet.cssText = css;\r\n      // } else {\r\n      //   s.appendChild(document.createTextNode(css));\r\n      // }\r\n      // x.appendChild(s);\r\n      x.className = \"\";\r\n    }\r\n    let tds = document.getElementsByTagName(\"td\");\r\n    for (var y of tds) {\r\n      y.style.fontWeight = \"normal\";\r\n      y.style.color = \"#6D6d6d\";\r\n    }\r\n    document.getElementById(id).className = \"selected\";\r\n    document.getElementById(id).style.backgroundColor = \"#e1eeff\";\r\n    let list = document.getElementById(id).children;\r\n    for (var i = 0; i < list.length; i++) {\r\n      list[i].style.fontWeight = \"700\";\r\n    }\r\n\r\n    props.selected(id);\r\n  };\r\n\r\n  const Hoverover = (index) => {\r\n    // console.log(document.getElementById(index));\r\n    if (document.getElementsByClassName(\"selected\")[0]) {\r\n      if (document.getElementsByClassName(\"selected\")[0].id !== index) {\r\n        document.getElementById(index).style.backgroundColor = \"#e1eeff\";\r\n      }\r\n    }\r\n  };\r\n  const Hovercancel = (index) => {\r\n    // console.log(document.getElementById(index));\r\n    if (document.getElementsByClassName(\"selected\")[0]) {\r\n      if (\r\n        parseInt(document.getElementsByClassName(\"selected\")[0].id) !== index\r\n      ) {\r\n        document.getElementById(index).style.backgroundColor = \"#f5faff\";\r\n      } else {\r\n        document.getElementById(index).style.backgroundColor = \"#e1eeff\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const getrows = () => {\r\n    return data.map((item, index) => {\r\n      return (\r\n        <tr\r\n          id={index}\r\n          key={index}\r\n          onClick={() => {\r\n            rowclick(index);\r\n            // props.selected(item.key);\r\n          }}\r\n          onMouseOver={() => Hoverover(index)}\r\n          onMouseLeave={() => Hovercancel(index)}\r\n        >\r\n          <td>\r\n            <p className={styles.titlebold}>{item.model_name}</p>\r\n            <span className={styles.subtitle}>\r\n              Created by:{\" \"}\r\n              <Tooltip title={Project.user}>\r\n                <span\r\n                  className={styles.author}\r\n                  style={{\r\n                    backgroundColor: \"#B8F2FF\",\r\n                    color: \"#38B7D3\",\r\n                    fontWeight: \"normal\",\r\n                    borderRadius: \"50%\",\r\n                    border: \"1px solid #38B7D3\",\r\n                    height: \"25px\",\r\n                    fontSize: \"10px\",\r\n                    padding: \"3px\",\r\n                  }}\r\n                >\r\n                  {Project.user}\r\n                </span>\r\n              </Tooltip>\r\n            </span>\r\n          </td>\r\n          <td\r\n            className={styles.description}\r\n            style={{\r\n              overflow: \"hidden\",\r\n              textOverflow: \"ellipsis\",\r\n              paddingRight: \"70px\",\r\n            }}\r\n          >\r\n            {\" \"}\r\n            {item.model_desc}{\" \"}\r\n          </td>\r\n          <td>\r\n            <div\r\n              style={{\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                color: \"#6d6d6d\",\r\n                fontFamily: \"Lato\",\r\n              }}\r\n            >\r\n              Accuracy:{\" \"}\r\n              {\r\n                <span style={{ fontWeight: \"700\" }}>\r\n                  {item.model_performance}\r\n                </span>\r\n              }\r\n            </div>\r\n            <div\r\n              style={\r\n                item.state === \"In Progress\"\r\n                  ? { fontSize: \"14px\", color: \"#A3A3A3\" }\r\n                  : item.state === \"Training\"\r\n                  ? { fontSize: \"14px\", color: \"#E15100 \" }\r\n                  : { color: \"#1DDFA9\", fontSize: \"14px\" }\r\n              }\r\n            >\r\n              {item.model_status}\r\n            </div>\r\n          </td>\r\n          <td className={styles.model_last_modified}>\r\n            <p\r\n              style={{\r\n                margin: \"0px\",\r\n                paddingTop: \"3px\",\r\n                fontSize: \"13px\",\r\n                fontWeight: \"bold\",\r\n                paddingBottom: \"3px\",\r\n              }}\r\n            >\r\n              {item.model_last_modified.split(\",\")[0]}\r\n            </p>\r\n            <p style={{ margin: \"0px\", padding: \"0\", fontSize: \"13px\" }}>\r\n              {item.model_last_modified.split(\",\")[1]}\r\n            </p>\r\n          </td>\r\n          <td>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-between\",\r\n                marginRight: \"40px\",\r\n              }}\r\n            >\r\n              <a\r\n                style={{\r\n                  textDecoration: \" none\",\r\n                  fontStyle: \"normal\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"14px\",\r\n                  color: \"#6d6d6d\",\r\n                }}\r\n                onClick={() => props.showinfo(item.key, item)}\r\n              >\r\n                <img\r\n                  src={infoIcon}\r\n                  alt=\"delete icon\"\r\n                  style={{ width: \"16px\" }}\r\n                ></img>\r\n                <span\r\n                  style={{\r\n                    fontWeight: \"700\",\r\n                    fontSize: \"12px\",\r\n                    marginLeft: \"4px\",\r\n                  }}\r\n                >\r\n                  Info\r\n                </span>\r\n              </a>\r\n              <a\r\n                style={\r\n                  Project.type === \"my_projects\"\r\n                    ? {\r\n                        textDecoration: \" none\",\r\n                        fontStyle: \"normal\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        paddingLeft: \"5px\",\r\n                        color: \"#6d6d6d\",\r\n                      }\r\n                    : {\r\n                        textDecoration: \" none\",\r\n                        fontStyle: \"normal\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        paddingLeft: \"5px\",\r\n                        color: \"#6d6d6d\",\r\n                        opacity: \"0.3\",\r\n                        cursor: \"not-allowed\",\r\n                      }\r\n                }\r\n                onClick={() => {\r\n                  if (Project.type === \"my_projects\") {\r\n                    props.showmodal(item.key, item);\r\n                  }\r\n                }}\r\n              >\r\n                <img\r\n                  src={shareIcon}\r\n                  alt=\"delete icon\"\r\n                  style={{ width: \"16px\" }}\r\n                ></img>\r\n                <span\r\n                  style={{\r\n                    fontWeight: \"700\",\r\n                    fontSize: \"12px\",\r\n                    marginLeft: \"4px\",\r\n                  }}\r\n                >\r\n                  Share\r\n                </span>\r\n              </a>\r\n              <a\r\n                style={\r\n                  Project.user === Auth.user_id\r\n                    ? {\r\n                        textDecoration: \" none\",\r\n                        fontStyle: \"normal\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        color: \"#6d6d6d\",\r\n                      }\r\n                    : {\r\n                        textDecoration: \" none\",\r\n                        fontStyle: \"normal\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        color: \"#6d6d6d\",\r\n                        opacity: \"0.3\",\r\n                        cursor: \"not-allowed\",\r\n                      }\r\n                }\r\n                onClick={() => {\r\n                  if (Project.user === Auth.user_id) {\r\n                    props.showdelete(index, item);\r\n                  }\r\n                }}\r\n              >\r\n                <img\r\n                  src={deleteIcon}\r\n                  alt=\"delete icon\"\r\n                  style={{ width: \"16px\" }}\r\n                ></img>\r\n                <span\r\n                  style={{\r\n                    fontWeight: \"700\",\r\n                    fontSize: \"12px\",\r\n                    marginLeft: \"4px\",\r\n                  }}\r\n                >\r\n                  Delete\r\n                </span>\r\n              </a>\r\n            </div>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      {data ? (\r\n        <table className={styles.datatable}>\r\n          <thead>\r\n            <tr>\r\n              <th> </th>\r\n              <th>Description</th>\r\n              <th>Status</th>\r\n              <th>Last Updated</th>\r\n              <th> </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{getrows()}</tbody>\r\n        </table>\r\n      ) : (\r\n        <NoData text=\"No Data\" />\r\n        // <Empty style={{ marginTop: \"20px\" }} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\CreateNewModel\\CreateNewModel.js",["457","458","459"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Button, Input, message } from \"antd\";\r\nimport styles from \"./CreateNewModel.module.scss\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport { ModelContext } from \"../../../Data/Contexts/AutoMLModelContext/AutoMLModelContext\";\r\nimport axios from \"axios\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport Cliploader from \"../../../Components/Loader/Cliploader\";\r\n\r\nexport default function CreateNewModel(props) {\r\n  let { project_id } = useParams();\r\n  const [m_name, setm_name] = useState(\"\");\r\n  const [m_desc, setm_desc] = useState(\"\");\r\n  const [m_name_error, setm_name_error] = useState(null);\r\n  const [enable, setenable] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n\r\n  const { setCurrentPage } = useContext(PageContext);\r\n  const { setModel, addModel } = useContext(ModelContext);\r\n  const { Auth } = useContext(AuthContext);\r\n  // const context = useContext(contextValue)\r\n\r\n  const checkvals = async () => {\r\n    setCurrentPage(\"selectdatasets\");\r\n    setModel({ name: m_name, desc: m_desc });\r\n\r\n    const myData = {\r\n      company_name: Auth.company_name,\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      project_name: project_id,\r\n      model_name: m_name,\r\n      model_desc: m_desc,\r\n    };\r\n    const formData = serialize(myData);\r\n    setloading(true);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/my_models/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        if (\r\n          response.data === \"Created\" ||\r\n          response.data === \"Created.\" ||\r\n          response.data === \"created\"\r\n        ) {\r\n          message.success(\"Model Created Successfully\");\r\n\r\n          props.history.push({\r\n            pathname: `/automl/projects/${project_id}/models/${m_name}/select_datasets/`,\r\n            state: {\r\n              detail: \"I am from New Models page\",\r\n              page_name: \"automl_select_datasets\",\r\n            },\r\n          });\r\n          addModel({\r\n            databucket_name: null,\r\n            dataset_name: null,\r\n            dataset_path: null,\r\n            model_desc: m_desc,\r\n            model_last_modified: \" , \",\r\n            model_name: m_name,\r\n            model_performance: null,\r\n            model_status: null,\r\n            model_type: null,\r\n          });\r\n        } else {\r\n          setm_name_error(response.data);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          setm_name_error(error.response.data);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n  const validate = async (e) => {\r\n    setenable(true);\r\n    setm_name_error(null);\r\n    document.getElementById(\"project_name\").style.borderColor = \"#40a9ff\";\r\n    await setm_name(e.target.value);\r\n    var format = /[!@#$%^&*()+\\=\\[\\]{};':\"\\\\|,<>\\/?]+/;\r\n    if (format.test(e.target.value) || format.test(e.target.value)) {\r\n      // let textfield = document.getElementById(\"project_name\");\r\n      // textfield.style.backgroundColor = \"red\";\r\n      setenable(false);\r\n      setm_name_error(\"Model Name contains special characters\");\r\n      document.getElementById(\"project_name\").style.borderColor = \"#EC547A\";\r\n      document.getElementById(\"project_name\").style.boxShadow = \"none\";\r\n    } else {\r\n      setenable(true);\r\n      document.getElementById(\"project_name\").style.borderColor = \"#40a9ff\";\r\n    }\r\n    let name = \"\";\r\n    if (e.target.value.length === 0) {\r\n      name = e.target.value;\r\n    } else {\r\n      name = e.target.value;\r\n    }\r\n    if (e.target.value.length < 3) {\r\n      setenable(false);\r\n      setm_name_error(\"Model Name should be 3 Characters Minimum\");\r\n      document.getElementById(\"project_name\").style.borderColor = \"#EC547A\";\r\n      document.getElementById(\"project_name\").style.boxShadow = \"none\";\r\n    }\r\n    if (name[0] === \" \" || name[0] === \"_\" || name[0] === \"-\") {\r\n      setenable(false);\r\n      setm_name_error(\r\n        \"Model Name first character cannot be a special character\"\r\n      );\r\n      document.getElementById(\"project_name\").style.borderColor = \"#EC547A\";\r\n      document.getElementById(\"project_name\").style.boxShadow = \"none\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: \"left\" }}>\r\n      <h3\r\n        style={{ fontWeight: \"700\", fontSize: \"18px\" }}\r\n        className={styles.title}\r\n      >\r\n        New Model\r\n      </h3>\r\n      <hr\r\n        style={{ backgroundColor: \"#E1EEFF\", border: \"none\", height: \"1px\" }}\r\n      />\r\n      <label htmlFor=\"project_name\" className={styles.label}>\r\n        Model Name ({m_name.length}/ 30 Characters)\r\n      </label>\r\n      <Input\r\n        placeholder=\"Enter Model Name\"\r\n        id=\"project_name\"\r\n        className={styles.input_name}\r\n        value={m_name}\r\n        maxLength={30}\r\n        minLength={5}\r\n        onChange={(e) => validate(e)}\r\n      />\r\n      <p\r\n        style={\r\n          m_name_error === null\r\n            ? { display: \"none\" }\r\n            : { color: \"#EC547A\", fontSize: \"14px\", fontFamily: \"Lato\" }\r\n        }\r\n      >\r\n        *{m_name_error}\r\n      </p>\r\n      <label htmlFor=\"project_description\" className={styles.label}>\r\n        Model Description <span className={styles.span}>(optional)</span>\r\n      </label>\r\n      <TextArea\r\n        id=\"project_description\"\r\n        className={styles.input_desc}\r\n        placeholder=\"write something about model...\"\r\n        autoSize={{ minRows: 7, maxRows: 10 }}\r\n        showCount\r\n        maxLength=\"300\"\r\n        value={m_desc}\r\n        onChange={(e) => setm_desc(e.target.value)}\r\n      ></TextArea>\r\n      <div style={{}}>\r\n        <a\r\n          className={styles.btn_cancel}\r\n          onClick={() => {\r\n            props.history.push({\r\n              pathname: `/automl/projects/${project_id}/models`,\r\n              state: { detail: \"I am from Create New Project page\" },\r\n            });\r\n          }}\r\n        >\r\n          Cancel\r\n        </a>\r\n        <Button\r\n          type=\"primary\"\r\n          className={styles.btn_create}\r\n          onClick={() => checkvals()}\r\n          disabled={enable === false ? true : false}\r\n        >\r\n          Create\r\n        </Button>\r\n      </div>\r\n      <Cliploader loading={loading} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\SelectDatasets\\SelectDatasets.js",["460","461","462"],"import { Button, Col, DatePicker, Row, Skeleton } from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styles from \"./SelectDatasets.module.scss\";\r\nimport { Tabs } from \"antd\";\r\nimport \"./tabstyles.css\";\r\nimport AutoMLExistingDatasetsTable from \"../../../Components/Tables/AutoMLExistingDatasets/AutoMLExistingDatasetsTable\";\r\nimport CompaniesGroup from \"../../../Components/Containers/CompaniesGroup/CompaniesGroup\";\r\nimport AutoMLSelectDatasetsDropdown from \"../../../Components/Dropdowns/AutoMLSelectDatasetsDropdown/AutoMLSelectDatasetsDropdown\";\r\nimport AutoMLSelectDatasetsTabs from \"../../../Components/Tabs/AutoMLSelectDatasetsTabs/AutoMLSelectDatasetsTabs\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport axios from \"axios\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { SelectedDatasetsContext } from \"../../../Data/Contexts/AutoMLSelectedDatasetsCart/AutoMLSelectedDatasetsCart\";\r\nimport Cliploader from \"../../../Components/Loader/Cliploader\";\r\n\r\nexport default function SelectDatasets(props) {\r\n  const { TabPane } = Tabs;\r\n\r\n  let { project_id, model_id } = useParams();\r\n\r\n  const [selectedrow, setselectedrow] = useState(null);\r\n  const [Sector, setSector] = useState(null);\r\n  const [Sectors, setSectors] = useState(null);\r\n  const [loading, setloading] = useState(false);\r\n  const [Tab, setTab] = useState(\"financial_datasets\");\r\n  const [data, setdata] = useState(null);\r\n  const [companies, setcompanies] = useState(null);\r\n  const [selectedcompanies, setselectedcompanies] = useState(null);\r\n  const [rendercompanies, setrendercompanies] = useState(false);\r\n  const [rendertables, setrendertables] = useState(true);\r\n  const [myDatasets, setmyDatasets] = useState(null);\r\n  const [Created, setCreated] = useState(false);\r\n\r\n  const { setCurrentPage } = useContext(PageContext);\r\n  const { Auth } = useContext(AuthContext);\r\n  const {\r\n    SelectedDatasets,\r\n    setSelectedDatasets,\r\n    clearcart,\r\n    updatecompanies,\r\n  } = useContext(SelectedDatasetsContext);\r\n\r\n  function callback(key) {}\r\n\r\n  const nextPage = () => {\r\n    setCurrentPage(\"selecteddatasets\");\r\n\r\n    console.log(\"Save Data in Cart and Next page\");\r\n    props.history.push({\r\n      pathname: `/automl/projects/${project_id}/models/${model_id}/selected_datasets/`,\r\n      state: { detail: \"I am from Select Datasets page\" },\r\n    });\r\n  };\r\n\r\n  const getsectors = async () => {\r\n    setCreated(true);\r\n    let temp = {};\r\n    setloading(true);\r\n    await axios\r\n      .get(`${URL}/data_extraction?input_type=Sector`)\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n        temp = response.data.options;\r\n      })\r\n      .then(function (error) {\r\n        setloading(false);\r\n        // console.log(error);\r\n      });\r\n    setSectors(temp);\r\n  };\r\n\r\n  if (Created === false) {\r\n    getsectors();\r\n  }\r\n\r\n  const changeTab = async (tab) => {\r\n    setdata(null);\r\n    setcompanies(null);\r\n    setselectedcompanies(null);\r\n    setrendercompanies(!rendercompanies);\r\n    if (tab === \"my_datasets\") {\r\n      setTab(tab);\r\n      setSectors(null);\r\n      const myData = {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        data_type: tab,\r\n      };\r\n      console.log(myData);\r\n      const formData = serialize(myData);\r\n      setloading(true);\r\n      await axios({\r\n        method: \"post\",\r\n        url: `${URL}/automl/load_datasets/`,\r\n        data: formData,\r\n        headers: {\r\n          \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          let keys = Object.keys(response.data);\r\n          setmyDatasets(response.data);\r\n          setSectors(keys);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setloading(false);\r\n        });\r\n    } else {\r\n      setTab(tab);\r\n      setSector(null);\r\n      setSectors(null);\r\n      if (tab === \"financial_datasets\") {\r\n        let temp = {};\r\n        await axios\r\n          .get(`${URL}/data_extraction?input_type=Sector`)\r\n          .then(function (response) {\r\n            console.log(response);\r\n            temp = response.data.options;\r\n          })\r\n          .then(function (error) {\r\n            // console.log(error);\r\n          });\r\n        setSectors(temp);\r\n      }\r\n    }\r\n  };\r\n\r\n  const fetchdata = async (sector) => {\r\n    if (Tab === \"my_datasets\") {\r\n      let temp = [];\r\n      let keys = Object.keys(myDatasets[`${sector}`]);\r\n      keys.forEach((element, index) => {\r\n        let obj = {\r\n          key: index,\r\n          final_name: element.split(\".\")[0],\r\n          name: element.split(\".\")[0] + \"__\" + sector,\r\n          rows: myDatasets[sector][`${element}`][`${\"total_rows\"}`],\r\n          cols: myDatasets[sector][`${element}`][`${\"total_columns\"}`],\r\n          columns: myDatasets[sector][`${element}`].columns,\r\n          selectedcolumns: myDatasets[sector][`${element}`].columns,\r\n          showncolumns: myDatasets[sector][`${element}`].columns,\r\n          dtypes: myDatasets[sector][`${element}`].dtypes,\r\n          preview: myDatasets[sector][`${element}`].preview,\r\n          type: Tab,\r\n          companies: myDatasets[sector][`${element}`].companies,\r\n          selectedcompanies: myDatasets[sector][`${element}`].companies,\r\n          description:\r\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore\",\r\n          selected: \"\",\r\n          sector: sector,\r\n        };\r\n        temp.push(obj);\r\n      });\r\n      let cart = SelectedDatasets.datasets;\r\n      if (cart.length !== 0) {\r\n        cart.forEach((element, index) => {\r\n          temp.forEach((item) => {\r\n            if (item.name === element.name && item.type === Tab) {\r\n              item.selected = \"yes\";\r\n              item.selectedcompanies = element.selectedcompanies;\r\n            }\r\n          });\r\n        });\r\n      }\r\n      console.log(temp);\r\n      setdata(temp);\r\n      //My Datasets ^^\r\n    } else {\r\n      let temp = [];\r\n      const myData = {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        data_type: Tab,\r\n        sector: sector,\r\n      };\r\n      const formData = serialize(myData);\r\n      setloading(true);\r\n      await axios({\r\n        method: \"post\",\r\n        url: `${URL}/automl/load_datasets/`,\r\n        data: formData,\r\n        headers: {\r\n          \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          let keys = Object.keys(response.data);\r\n          console.log(response);\r\n          keys.forEach((element, index) => {\r\n            let obj = {\r\n              key: index,\r\n              final_name: element,\r\n              name: element + \"__\" + sector,\r\n              rows: response.data[`${element}`][`${\"total rows\"}`],\r\n              cols: response.data[`${element}`][`${\"total columns\"}`],\r\n              columns: response.data[`${element}`].columns,\r\n              selectedcolumns: response.data[`${element}`].columns,\r\n              showncolumns: response.data[`${element}`].columns,\r\n              dtypes: response.data[`${element}`].dtypes,\r\n              preview: response.data[`${element}`].preview,\r\n              type: Tab,\r\n              companies: response.data[`${element}`].companies,\r\n              selectedcompanies: response.data[`${element}`].companies,\r\n              description:\r\n                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore\",\r\n              selected: \"\",\r\n              sector: sector,\r\n            };\r\n            temp.push(obj);\r\n          });\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n          console.log(error);\r\n        });\r\n      let cart = SelectedDatasets.datasets;\r\n      if (cart.length !== 0) {\r\n        cart.forEach((element, index) => {\r\n          temp.forEach((item) => {\r\n            if (item.name === element.name && item.type === Tab) {\r\n              item.selected = \"yes\";\r\n              item.selectedcompanies = element.selectedcompanies;\r\n            }\r\n          });\r\n        });\r\n      }\r\n      setdata(temp);\r\n    }\r\n  };\r\n\r\n  const showcompanies = (id) => {\r\n    setselectedrow(id);\r\n    setcompanies(data[id].companies);\r\n    setselectedcompanies(data[id].selectedcompanies);\r\n    // setcompanies([\"A\", \"B\", \"C\", \"D\"]);\r\n    setrendercompanies(!rendercompanies);\r\n  };\r\n\r\n  const removeselected = (val) => {\r\n    let temp = [];\r\n    if (selectedcompanies.length !== 0) {\r\n      selectedcompanies.forEach((element) => {\r\n        temp.push(element);\r\n      });\r\n    }\r\n    let index = temp.indexOf(val);\r\n    temp.splice(index, 1);\r\n    console.log(temp);\r\n    console.log(companies);\r\n    setselectedcompanies(temp);\r\n    setrendercompanies(!rendercompanies);\r\n  };\r\n\r\n  const addselected = (val) => {\r\n    let temp = selectedcompanies;\r\n    temp.push(val);\r\n    setrendercompanies(!rendercompanies);\r\n  };\r\n\r\n  const addtoCart = () => {\r\n    if (data[selectedrow].selected === \"yes\") {\r\n      console.log(\"item already in cart\");\r\n      data[selectedrow].selectedcompanies = selectedcompanies;\r\n      updatecompanies(data[selectedrow], Tab);\r\n    } else {\r\n      data[selectedrow].selectedcompanies = selectedcompanies;\r\n      data[selectedrow].selected = \"yes\";\r\n      setSelectedDatasets(data[selectedrow], Tab);\r\n      setrendertables(!rendertables);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row justify=\"space-between\" className={styles.container}>\r\n      <Col span={17} className={styles.column1} id=\"Column1\">\r\n        <h3 className={styles.titleBold}>\r\n          {project_id} | <span className={styles.subtitle}>{model_id}</span>\r\n        </h3>\r\n        <h3\r\n          style={{\r\n            textAlign: \"left\",\r\n            fontSize: \"20px\",\r\n            fontWeight: \"bold\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        >\r\n          Data Selection\r\n        </h3>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        />\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }} className=\"tabs\">\r\n          {/* <Tabs\r\n            defaultActiveKey=\"1\"\r\n            onChange={callback}\r\n            size=\"small\"\r\n            style={{ flexGrow: \"1\" }}\r\n          >\r\n            <TabPane tab=\"Financial Data\" key=\"1\"></TabPane>\r\n            <TabPane tab=\"Trading Data\" key=\"2\"></TabPane>\r\n            <TabPane tab=\"Economical Data\" key=\"3\"></TabPane>\r\n            <TabPane tab=\"Industrial Data\" key=\"4\"></TabPane>\r\n            <TabPane tab=\"My Datasets\" key=\"5\"></TabPane>\r\n          </Tabs> */}\r\n          <div style={{ width: \"100%\", marginRight: \"0px\" }}>\r\n            <AutoMLSelectDatasetsTabs\r\n              setTab={(val) => {\r\n                changeTab(val);\r\n              }}\r\n            />\r\n          </div>\r\n          {/* <Button\r\n            className={styles.importbutton}\r\n            style={loading === true ? { display: \"none\" } : null}\r\n          >\r\n            Import{\" \"}\r\n          </Button> */}\r\n        </div>\r\n        <div\r\n          style={{\r\n            flexGrow: \"1\",\r\n            overflowY: \"scroll\",\r\n            marginTop: \"10px\",\r\n            paddingRight: \"10px\",\r\n          }}\r\n        >\r\n          <div style={{ textAlign: \"left\" }}>\r\n            <AutoMLSelectDatasetsDropdown\r\n              data={Sectors}\r\n              selected={(sector) => {\r\n                setSector(sector);\r\n                fetchdata(sector);\r\n              }}\r\n              value={Sector}\r\n              type={Tab === \"my_datasets\" ? \"Data Bucket\" : \"Sector\"}\r\n            />\r\n          </div>\r\n          {loading === true ? (\r\n            <Skeleton active loading={loading} />\r\n          ) : (\r\n            <AutoMLExistingDatasetsTable\r\n              selected={(id) => {\r\n                showcompanies(id);\r\n              }}\r\n              data={data}\r\n              render={rendertables}\r\n            />\r\n          )}\r\n        </div>\r\n        <div\r\n          style={\r\n            loading === true\r\n              ? { display: \"none\" }\r\n              : { textAlign: \"left\", marginTop: \"10px\" }\r\n          }\r\n        >\r\n          <Button\r\n            className={styles.continuebutton}\r\n            onClick={() => {\r\n              nextPage();\r\n            }}\r\n            disabled={SelectedDatasets.datasets.length === 0 ? true : false}\r\n          >\r\n            Continue\r\n          </Button>\r\n        </div>\r\n      </Col>\r\n      <Col span={7} className={styles.column2} id=\"Column2\">\r\n        <h3 className={styles.titleBold}>Companies</h3>\r\n        <div style={{ minHeight: \"15vh\", overflowY: \"scroll\", flexGrow: \"1\" }}>\r\n          <CompaniesGroup\r\n            data={companies}\r\n            selected={selectedcompanies}\r\n            removeselected={(val) => removeselected(val)}\r\n            addselected={(val) => addselected(val)}\r\n            render={rendercompanies}\r\n            removesingle={(val) => {\r\n              setselectedcompanies(null);\r\n              setrendercompanies(!rendercompanies);\r\n            }}\r\n            addsingle={(val) => {\r\n              setselectedcompanies([val]);\r\n              setrendercompanies(!rendercompanies);\r\n            }}\r\n          />\r\n        </div>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            marginTop: \"20px\",\r\n            border: \"none\",\r\n            marginBottom: \"10px\",\r\n            height: \"1px\",\r\n          }}\r\n        />\r\n        <h3 className={styles.titleBold}>Date Range</h3>\r\n        <div style={{ marginBottom: \"40px\" }}>\r\n          {/* <p className={styles.datetitle}>Starting Date</p> */}\r\n          <DatePicker\r\n            disabled={\r\n              Tab === \"financial_data\" || Tab === \"financial_datasets\"\r\n                ? true\r\n                : false\r\n            }\r\n            picker=\"day\"\r\n            placeholder=\"Starting Date\"\r\n            className={styles.dateinput}\r\n          />\r\n          {/* <p className={styles.datetitle}>Ending Date</p> */}\r\n          <DatePicker\r\n            disabled={\r\n              Tab === \"financial_data\" || Tab === \"financial_datasets\"\r\n                ? true\r\n                : false\r\n            }\r\n            picker=\"day\"\r\n            placeholder=\"Ending Date\"\r\n            className={styles.dateinput}\r\n          />\r\n        </div>\r\n        <Button onClick={() => addtoCart()} className={styles.addcartbutton}>\r\n          Add to Data Cart\r\n        </Button>\r\n        {/* <Button onClick={() => clearcart()}>Clear Cart (TESTING)</Button> */}\r\n      </Col>\r\n      <Cliploader loading={loading} />\r\n    </Row>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLExistingDatasets\\AutoMLExistingDatasetsTable.js",[],"D:\\Work\\beyond-data\\src\\Components\\Containers\\CompaniesGroup\\CompaniesGroup.js",[],"D:\\Work\\beyond-data\\src\\Components\\Dropdowns\\AutoMLSelectDatasetsDropdown\\AutoMLSelectDatasetsDropdown.js",[],"D:\\Work\\beyond-data\\src\\Pages\\AutoML\\SelectedDatasets\\SelectedDatasets.js",[],"D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLSelectedDatasets\\AutoMLSelectedDatasetsTable.js",[],"D:\\Work\\beyond-data\\src\\Components\\List\\SelectedDataList.js",["463"],"import { CloseCircleOutlined } from \"@ant-design/icons\";\r\nimport React from \"react\";\r\nimport \"./SelectedDataList.scss\";\r\nimport DeleteIcon from \"../Icons/AutoML/deleteDatasetIcon.svg\";\r\n\r\nexport default function SelectedDataList(props) {\r\n  return (\r\n    <>\r\n      {props.data\r\n        ? props.data.map((item, index) => {\r\n            return (\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  backgroundColor: \"blue\",\r\n                  width: \"100%\",\r\n                  padding: \"17px\",\r\n                  paddingTop: \"12px\",\r\n                  paddingLeft: \"27px\",\r\n                  // height: \"40px\",\r\n                  marginBottom: \"15px\",\r\n                  background: \"#FFFFFF\",\r\n                  paddingBottom: \"12px\",\r\n                  borderRadius: \"10px\",\r\n                }}\r\n                key={index}\r\n                className=\"SelectedDataList\"\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontStyle: \" normal\",\r\n                    fontWeight: \"normal\",\r\n                    fontSize: \"14px\",\r\n                    lineHeight: \"14px\",\r\n                    color: \"#6D6D6D\",\r\n                    maxWidth: \"100%\",\r\n                    paddingRight: \"5px\",\r\n                    overflow: \"hidden\",\r\n                    textOverflow: \"ellipsis\",\r\n                    whiteSpace: \"nowrap\",\r\n                  }}\r\n                >\r\n                  {item.data.name}\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    flexGrow: \"1\",\r\n                    textAlign: \"right\",\r\n                    fontSize: \"20px\",\r\n                    lineHeight: \"14px\",\r\n                    color: \"#EC547A\",\r\n                  }}\r\n                  onClick={() => props.delete(item)}\r\n                >\r\n                  <img\r\n                    src={DeleteIcon}\r\n                    alt={\"Delete\"}\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                      marginTop: \"-4px\",\r\n                      width: \"18px\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        : null}\r\n    </>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Drawers\\AutoMLProjectsDrawer\\AutoMLProjectsDrawer.js",[],"D:\\Work\\beyond-data\\src\\Components\\List\\AutoMLProjectsModelsList\\AutoMLProjectsModelsList.js",[],"D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLProjectShareModal\\AutoMLProjectShareModal.js",[],"D:\\Work\\beyond-data\\src\\Components\\Tabs\\AutoMLProjectsTypeTabs.js",["464"],"import React from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst AntTabs = withStyles({\r\n  root: {\r\n    borderBottom: \"1px solid #e8e8e8\",\r\n  },\r\n  indicator: {\r\n    backgroundColor: \"#085FAB\",\r\n  },\r\n})(Tabs);\r\n\r\nconst AntTab = withStyles((theme) => ({\r\n  root: {\r\n    textTransform: \"none\",\r\n    minWidth: 72,\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    marginRight: theme.spacing(4),\r\n    letterSpacing: \"0px\",\r\n    fontSize: \"14px\",\r\n    paddingBottom: \"0px\",\r\n    paddingTop: \"20px\",\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(\",\"),\r\n    \"&:hover\": {\r\n      color: \"grey\",\r\n      opacity: 1,\r\n    },\r\n    \"&$selected\": {\r\n      color: \"black\",\r\n      fontWeight: \"700\",\r\n      fontFamily: \"Lato\",\r\n    },\r\n    \"&:focus\": {\r\n      color: \"black\",\r\n    },\r\n  },\r\n  selected: {},\r\n}))((props) => <Tab disableRipple {...props} />);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"60px\",\r\n  },\r\n  padding: {\r\n    padding: \"5px\",\r\n  },\r\n  demo1: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  demo2: {\r\n    backgroundColor: \"#2e1534\",\r\n  },\r\n}));\r\n\r\nexport default function AutoMLProjectsTypeTabs(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n\r\n    switch (newValue) {\r\n      case 0:\r\n        props.setTab(\"my_projects\");\r\n        break;\r\n      case 1:\r\n        props.setTab(\"downloaded_projects\");\r\n        break;\r\n      case 2:\r\n        props.setTab(\"global_projects\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.demo1}>\r\n        <AntTabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"ant example\"\r\n          scrollButtons=\"on\"\r\n        >\r\n          <AntTab label=\"My Projects\" />\r\n          <AntTab label=\"Downloaded Projects\" />\r\n          <AntTab label=\"Global Projects\" />\r\n        </AntTabs>\r\n      </div>\r\n      {/* <div className={classes.demo2}>\r\n        <StyledTabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"styled tabs example\"\r\n        >\r\n          <StyledTab label=\"Workflows\" />\r\n          <StyledTab label=\"Datasets\" />\r\n          <StyledTab label=\"Connections\" />\r\n        </StyledTabs>\r\n        <Typography className={classes.padding} />\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Drawers\\AutoMLModelsDrawer\\AutoMLModelsDrawer.js",["465"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\n/* eslint-disable no-unused-vars */\r\nimport { Button, Drawer, message } from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport \"./AutoMLModelsDrawer.css\";\r\nimport { Input } from \"antd\";\r\nimport AutoMLProjectsModelsList from \"../../List/AutoMLProjectsModelsList/AutoMLProjectsModelsList\";\r\nimport editIcon from \"../../Icons/AutoML/edit.svg\";\r\nimport saveIcon from \"../../Icons/AutoML/save.svg\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ClassificationImage from \"../../Images/AutoML/Models/classification_model.svg\";\r\nimport forecastingImage from \"../../Images/AutoML/Models/forecasting_model.svg\";\r\nimport timeseriesImage from \"../../Images/AutoML/Models/timeseries_model.svg\";\r\nimport regressionImage from \"../../Images/AutoML/Models/regression_model.svg\";\r\nimport fileIcon from \"../../Icons/AutoML/fileicon.svg\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport axios from \"axios\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\n\r\nexport default function AutoMLModelsDrawer(props) {\r\n  let { project_id } = useParams();\r\n\r\n  const { TextArea } = Input;\r\n  const [description, setdescription] = useState(null);\r\n  const [title, settitle] = useState(null);\r\n  const [editabledescription, seteditabledescription] = useState(null);\r\n  const [editabletitle, seteditabletitle] = useState(null);\r\n  const [editable, seteditable] = useState(false);\r\n\r\n  const { Auth } = useContext(AuthContext);\r\n\r\n  if (props.drawervisible === true && title === null) {\r\n    settitle(props.data.model_name);\r\n    setdescription(props.data.model_desc);\r\n    seteditabletitle(props.data.model_name);\r\n    seteditabledescription(props.data.model_desc);\r\n  }\r\n\r\n  const renamemodel = async () => {\r\n    if (editable) {\r\n      if (title !== editabletitle) {\r\n        await axios\r\n          .post(`${URL}/automl/edit_model/`, {\r\n            company_name: Auth.company_name,\r\n            company_id: Auth.company_id,\r\n            user_id: Auth.user_id,\r\n            project_name: project_id,\r\n            model_name: title,\r\n            update: {\r\n              model_name: editabletitle,\r\n              model_desc: editabledescription,\r\n            },\r\n          })\r\n          .then(function (response) {\r\n            message.success(\"Renamed Successfully\");\r\n            console.log(response);\r\n            settitle(editabletitle);\r\n            setdescription(editabledescription);\r\n          })\r\n          .catch(function (error) {\r\n            message.error(\"Sorry there seems to be an issue\");\r\n            console.log(error);\r\n          });\r\n      } else if (description !== editabledescription) {\r\n        await axios\r\n          .post(`${URL}/automl/edit_model/`, {\r\n            company_name: Auth.company_name,\r\n            company_id: Auth.company_id,\r\n            user_id: Auth.user_id,\r\n            project_name: project_id,\r\n            model_name: title,\r\n            update: { model_desc: editabledescription },\r\n          })\r\n          .then(function (response) {\r\n            message.success(\"Renamed Successfully\");\r\n            console.log(response);\r\n            setdescription(editabledescription);\r\n          })\r\n          .catch(function (error) {\r\n            message.error(\"Sorry there seems to be an issue\");\r\n            console.log(error);\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return props.data ? (\r\n    <div\r\n      id=\"AutoMLModelsDrawer\"\r\n      // style={{ display: \"flex\", flexDirection: \"column\", height: \"100vh\" }}\r\n    >\r\n      <Drawer\r\n        className=\"drawer\"\r\n        placement=\"right\"\r\n        closable={false}\r\n        width={\"39%\"}\r\n        onClose={() => {\r\n          settitle(null);\r\n          setdescription(null);\r\n          seteditable(false);\r\n          props.onClose();\r\n        }}\r\n        visible={props.drawervisible}\r\n      >\r\n        <div\r\n          style={{ display: \"flex\", flexDirection: \"column\", height: \"100%\" }}\r\n        >\r\n          <p\r\n            style={{\r\n              marginTop: \"10px\",\r\n              marginBottom: \"0px\",\r\n              fontSize: \"12px\",\r\n              color: \"#085FAB\",\r\n            }}\r\n          >\r\n            {project_id}\r\n          </p>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              fontFamily: \"Lato\",\r\n              height: \"30px\",\r\n            }}\r\n          >\r\n            {editable === false ? (\r\n              <h2\r\n                style={{\r\n                  flexGrow: \"1\",\r\n                  fontSize: \"20px\",\r\n                  fontWeight: \"bold\",\r\n                  lineHeight: \"24px\",\r\n                  fontFamily: \"Lato\",\r\n                }}\r\n              >\r\n                {title}\r\n              </h2>\r\n            ) : (\r\n              <div style={{ flexGrow: \"1\" }}>\r\n                <Input\r\n                  value={editabletitle}\r\n                  style={{\r\n                    height: \"30px\",\r\n                    fontSize: \"20px\",\r\n                    fontWeight: \"bold\",\r\n                    lineHeight: \"24px\",\r\n                    fontFamily: \"Lato\",\r\n                    width: \"70%\",\r\n                    // borderRadius: \"10px\",\r\n                    // padding: \"10px\",\r\n                  }}\r\n                  onChange={(e) => seteditabletitle(e.target.value)}\r\n                />\r\n              </div>\r\n            )}\r\n            <a\r\n              style={\r\n                editable === true\r\n                  ? {\r\n                      textDecoration: \"none\",\r\n                      color: \"#6d6d6d\",\r\n                      marginRight: \"23px\",\r\n                      fontSize: \"14px\",\r\n                    }\r\n                  : { display: \"none\" }\r\n              }\r\n              onClick={() => {\r\n                seteditabletitle(title);\r\n                seteditabledescription(description);\r\n                seteditable(!editable);\r\n              }}\r\n            >\r\n              Discard\r\n            </a>\r\n            <div\r\n              style={\r\n                props.type === \"my_projects\"\r\n                  ? { cursor: \"pointer\" }\r\n                  : { display: \"none\" }\r\n              }\r\n              onClick={() => {\r\n                renamemodel();\r\n                seteditable(!editable);\r\n              }}\r\n            >\r\n              <img\r\n                src={editable === true ? saveIcon : editIcon}\r\n                alt=\"edit icon\"\r\n                style={{ width: \"16px\", marginBottom: \"2px\" }}\r\n              ></img>\r\n              <span\r\n                style={{\r\n                  fontWeight: \"700\",\r\n                  fontSize: \"14px\",\r\n                  marginLeft: \"4px\",\r\n                  color: \"#6D6D6D\",\r\n                  fontFamily: \"Lato\",\r\n                }}\r\n              >\r\n                {editable === true ? \"Save\" : \" Edit\"}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{ fontFamily: \"Lato\", fontSize: \"12px\", color: \"#6D6D6D\" }}\r\n          >\r\n            Created by:{\" \"}\r\n            <span style={{ color: \"#085FAB\", fontWeight: \"700\" }}>Author</span>\r\n          </div>\r\n          <div\r\n            style={{\r\n              fontWeight: \"700\",\r\n              fontFamily: \"Lato\",\r\n              fontSize: \"14px\",\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            Model Description\r\n          </div>\r\n          <div\r\n            style={{ marginTop: \"15px\", height: \"100px\", overflowY: \"hidden\" }}\r\n          >\r\n            <p\r\n              style={\r\n                editable === false\r\n                  ? { fontFamily: \"Lato\", fontSize: \"14px\", color: \"#6D6D6D\" }\r\n                  : { display: \"none\" }\r\n              }\r\n            >\r\n              {description}\r\n            </p>\r\n            <TextArea\r\n              style={\r\n                editable === true\r\n                  ? { fontFamily: \"Lato\", fontSize: \"14px\", color: \"#6D6D6D\" }\r\n                  : { display: \"none\" }\r\n              }\r\n              value={editabledescription}\r\n              onChange={(e) => seteditabledescription(e.target.value)}\r\n              placeholder=\"Controlled autosize\"\r\n              autoSize={{ minRows: 3, maxRows: 5 }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <div\r\n              style={{\r\n                fontWeight: \"700\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                marginTop: \"20px\",\r\n              }}\r\n            >\r\n              Model Performance\r\n            </div>\r\n            <p\r\n              style={{\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"12px\",\r\n                fontStyle: \"italic\",\r\n                color: \"#6d6d6d\",\r\n              }}\r\n            >\r\n              Accuracy (in percentage):{\" \"}\r\n              <span\r\n                style={{\r\n                  fontFamily: \"Lato\",\r\n                  fontSize: \"12px\",\r\n                  fontStyle: \"normal\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"#085FAB\",\r\n                }}\r\n              >\r\n                {props.data.model_performance}\r\n              </span>{\" \"}\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <div\r\n              style={{\r\n                fontWeight: \"700\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                marginTop: \"30px\",\r\n              }}\r\n            >\r\n              Model Type\r\n            </div>\r\n            {/* <img\r\n              src={ClassificationImage}\r\n              width={140}\r\n              style={{ marginLeft: \"-20px\" }}\r\n            /> */}\r\n            <br />\r\n          </div>\r\n          <div style={{ flexGrow: \"1\" }}>\r\n            <div\r\n              style={{\r\n                fontWeight: \"700\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                marginTop: \"0px\",\r\n              }}\r\n            >\r\n              Dataset Used\r\n            </div>\r\n            <div>\r\n              <div\r\n                style={{\r\n                  height: \"40px\",\r\n                  display: \"flex\",\r\n                  flexDirection: \"row\",\r\n                  backgroundColor: \"#F5FAFF\",\r\n                  borderRadius: \"10px\",\r\n                  padding: \"9px\",\r\n                }}\r\n              >\r\n                <img src={fileIcon} width={12} style={{ marginLeft: \"10px\" }} />\r\n                <p\r\n                  style={{\r\n                    flexGrow: \"1\",\r\n                    margin: \"auto\",\r\n                    display: \"block\",\r\n                    paddingLeft: \"7px\",\r\n                    fontFamily: \"Lato\",\r\n                    color: \"#6d6d6d\",\r\n                    fontStyle: \"normal\",\r\n                  }}\r\n                >\r\n                  {props.data.dataset_name}\r\n                </p>\r\n                <p\r\n                  style={{\r\n                    margin: \"auto\",\r\n                    display: \"block\",\r\n                    fontFamily: \"Lato\",\r\n                    color: \"#6d6d6d\",\r\n                    fontStyle: \"normal\",\r\n                    marginRight: \"20px\",\r\n                  }}\r\n                >\r\n                  {props.data.dataset_path}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div style={{ flexGrow: \"1\" }}></div>\r\n          <Button\r\n            style={{\r\n              width: \"140px\",\r\n              height: \"40px\",\r\n              background: \"#085FAB\",\r\n              borderRadius: \"64px\",\r\n              fontFamily: \"Lato\",\r\n              fontSize: \"16px\",\r\n              fontWeight: \"700\",\r\n              color: \"white\",\r\n              letterSpacing: \"0.5px\",\r\n              marginTop: \"30px\",\r\n              border: \"none\",\r\n              paddingBottom: \"5px\",\r\n            }}\r\n          >\r\n            Predict\r\n          </Button>\r\n        </div>\r\n      </Drawer>\r\n    </div>\r\n  ) : null;\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Tabs\\AutoMLSelectDatasetsTabs\\AutoMLSelectDatasetsTabs.js",["466"],"import React from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst AntTabs = withStyles({\r\n  root: {\r\n    borderBottom: \"1px solid #e8e8e8\",\r\n  },\r\n  indicator: {\r\n    backgroundColor: \"#085FAB\",\r\n  },\r\n})(Tabs);\r\n\r\nconst AntTab = withStyles((theme) => ({\r\n  root: {\r\n    textTransform: \"none\",\r\n    minWidth: 72,\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    marginRight: theme.spacing(2),\r\n    letterSpacing: \"0px\",\r\n    fontSize: \"12px\",\r\n    color: \"#6d6d6d\",\r\n    opacity: \"1\",\r\n    paddingBottom: \"0px\",\r\n    paddingTop: \"20px\",\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(\",\"),\r\n    \"&:hover\": {\r\n      color: \"#6d6d6d\",\r\n      opacity: 1,\r\n    },\r\n    \"&$selected\": {\r\n      color: \"black\",\r\n      fontWeight: \"700\",\r\n      fontFamily: \"Lato\",\r\n    },\r\n    \"&:focus\": {\r\n      color: \"black\",\r\n    },\r\n  },\r\n  selected: {},\r\n}))((props) => <Tab disableRipple {...props} />);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"60px\",\r\n  },\r\n  padding: {\r\n    padding: \"5px\",\r\n  },\r\n  demo1: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  demo2: {\r\n    backgroundColor: \"#2e1534\",\r\n  },\r\n}));\r\n\r\nexport default function AutoMLSelectDatasetsTabs(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n\r\n    switch (newValue) {\r\n      case 0:\r\n        props.setTab(\"financial_datasets\");\r\n        break;\r\n      case 1:\r\n        props.setTab(\"trading_datasets\");\r\n        break;\r\n      case 2:\r\n        props.setTab(\"economical_datasets\");\r\n        break;\r\n      case 3:\r\n        props.setTab(\"industrial_datasets\");\r\n        break;\r\n      case 4:\r\n        props.setTab(\"my_datasets\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.demo1}>\r\n        <AntTabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"ant example\"\r\n          scrollButtons=\"auto\"\r\n          variant=\"scrollable\"\r\n        >\r\n          <AntTab label=\"Financial Data\" />\r\n          <AntTab label=\"Trading Data\" />\r\n          <AntTab label=\"Economical Data\" />\r\n          <AntTab label=\"Industrial Data\" />\r\n          <AntTab label=\"My Datasets\" />\r\n        </AntTabs>\r\n      </div>\r\n      {/* <div className={classes.demo2}>\r\n        <StyledTabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"styled tabs example\"\r\n        >\r\n          <StyledTab label=\"Workflows\" />\r\n          <StyledTab label=\"Datasets\" />\r\n          <StyledTab label=\"Connections\" />\r\n        </StyledTabs>\r\n        <Typography className={classes.padding} />\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLSelectedDataPopupTables\\AutoMLSelectedDatasetsPreviewRowsTable.js",[],"D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLSelectedDatasetsMetaTable\\AutoMLSelectedDatasetsMetaTable.js",[],"D:\\Work\\beyond-data\\src\\Pages\\AutoML\\DatasetProcessing\\DatasetProcessing.js",["467","468","469"],"import { Button, Col, Row, Skeleton } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ColumnsGroup from \"../../../Components/Containers/ColumnsGroup/ColumnsGroup\";\r\nimport AutoMLDatasetProcessingList from \"../../../Components/List/AutoMLDatasetProcessingList/AutoMLDatasetProcessingList\";\r\nimport AutoMLSelectedDatasetsPreviewRowsTable from \"../../../Components/Tables/AutoMLSelectedDataPopupTables/AutoMLSelectedDatasetsPreviewRowsTable\";\r\nimport AutoMLSelectedDatasetsMetaTable from \"../../../Components/Tables/AutoMLSelectedDatasetsMetaTable/AutoMLSelectedDatasetsMetaTable\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport { SelectedDatasetsContext } from \"../../../Data/Contexts/AutoMLSelectedDatasetsCart/AutoMLSelectedDatasetsCart\";\r\nimport styles from \"./DatasetProcessing.module.scss\";\r\nimport \"./styles.css\";\r\n\r\nexport default function DatasetProcessing(props) {\r\n  let { project_id, model_id } = useParams();\r\n  const [loading, setloading] = useState(false);\r\n  const [showpopup, setshowpopup] = useState(false);\r\n  const [dummy, setdummy] = useState(false);\r\n  const [columns, setcolumns] = useState(null);\r\n  const [Selected, setSelected] = useState(null);\r\n  const [selectedcolumns, setselectedcolumns] = useState(null);\r\n  const [rendercolumns, setrendercolumns] = useState(false);\r\n  const [name, setname] = useState(null);\r\n  const [rows1, setrows1] = useState(null);\r\n  const [meta1, setmeta1] = useState(null);\r\n\r\n  const { setCurrentPage } = useContext(PageContext);\r\n  const { SelectedDatasets, updatecolumns } = useContext(\r\n    SelectedDatasetsContext\r\n  );\r\n\r\n  const [meta, setmeta] = useState(null);\r\n\r\n  let rows = [\r\n    [\r\n      \"Customer ID\",\r\n      \"Product ID\",\r\n      \"Dept Name\",\r\n      \"Quantity\",\r\n      \"Lorem Ipsum\",\r\n      \"Price\",\r\n    ],\r\n    [\"1234\", \"AB567\", \"QIB231\", \"Lorem Ipsum\", \"Oil Barrel\", \"131\"],\r\n    [\"1234\", \"AB567\", \"QIB231\", \"Lorem Ipsum\", \"Oil Barrel\", \"131\"],\r\n    [\"1234\", \"AB567\", \"QIB231\", \"Lorem Ipsum\", \"Oil Barrel\", \"131\"],\r\n  ];\r\n  let metaData = [\r\n    [\"Product ID\", \"Dept Name\", \"Quantity\", \"Lorem Ipsum\", \"Price\"],\r\n    [\"Integer\", \"String\", \"Integer\", \"String\", \"Integer\"],\r\n    [\"-\", \"-\", \"In Hundreds\", \"Percentage\", \"In Millions\"],\r\n    [\"-\", \"-\", \"-\", \"(a+b)/2\", \"-\"],\r\n  ];\r\n\r\n  if (meta === null) {\r\n    let datasets = SelectedDatasets;\r\n    let temp = [];\r\n    datasets.datasets.forEach((item) => {\r\n      temp.push(item);\r\n    });\r\n    setmeta(temp);\r\n    console.log(temp);\r\n  }\r\n\r\n  const nextPage = () => {\r\n    setCurrentPage(\"linking\");\r\n    props.history.push({\r\n      pathname: `/automl/projects/${project_id}/models/${model_id}/link_columns/`,\r\n      state: {\r\n        detail: \"I am from Selected page\",\r\n        page_name: \"automl_link_Column\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const previewDataset = (id) => {\r\n    console.log(id);\r\n    setSelected(id);\r\n    if (meta[Selected]) {\r\n      //Rows\r\n      let rows11 = [];\r\n      rows11.push(meta[Selected].showncolumns);\r\n      meta[Selected].preview.forEach((element) => {\r\n        let temp = [];\r\n        for (const [key, value] of Object.entries(element)) {\r\n          if (meta[Selected].showncolumns.includes(key)) {\r\n            temp.push(value);\r\n          }\r\n        }\r\n        rows11.push(temp);\r\n        setrows1(rows11);\r\n      });\r\n      //Meta\r\n      let meta11 = [];\r\n      let indexes = [];\r\n      meta11.push(meta[Selected].showncolumns);\r\n      meta[Selected].showncolumns.forEach((item) => {\r\n        indexes.push(meta[Selected].columns.indexOf(item));\r\n      });\r\n      let datatypes = [];\r\n      indexes.forEach((item) => {\r\n        datatypes.push(meta[Selected].dtypes[item]);\r\n      });\r\n      meta11.push(datatypes);\r\n      let empty = [];\r\n      for (let index = 0; index < meta[Selected].showncolumns.length; index++) {\r\n        empty.push(\"-\");\r\n      }\r\n      meta11.push(empty);\r\n      meta11.push(empty);\r\n      setmeta1(meta11);\r\n    }\r\n    setshowpopup(true);\r\n  };\r\n\r\n  function array_move(arr, old_index, new_index) {\r\n    if (new_index >= arr.length) {\r\n      var k = new_index - arr.length + 1;\r\n      while (k--) {\r\n        arr.push(undefined);\r\n      }\r\n    }\r\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n    return arr; // for testing\r\n  }\r\n\r\n  const moveup = (id) => {\r\n    let temp = meta;\r\n    if (id !== 0) {\r\n      array_move(temp, id, id - 1);\r\n      setmeta(temp);\r\n      setdummy(!dummy);\r\n    }\r\n  };\r\n  const movedown = (id) => {\r\n    let temp = meta;\r\n    if (id !== meta.length - 1) {\r\n      array_move(temp, id, id + 1);\r\n      setmeta(temp);\r\n      setdummy(!dummy);\r\n    }\r\n  };\r\n\r\n  const setselected = (id) => {\r\n    setSelected(id);\r\n    setcolumns(meta[id].columns);\r\n    setselectedcolumns(meta[id].selectedcolumns);\r\n    setrendercolumns(!rendercolumns);\r\n    setname(meta[id].name);\r\n  };\r\n\r\n  const removeselected = (val) => {\r\n    let temp = selectedcolumns;\r\n    let arr = [];\r\n    temp.forEach((element) => {\r\n      if (element !== val) {\r\n        arr.push(element);\r\n      }\r\n    });\r\n    // let index = temp.indexOf(val);\r\n    // temp.splice(index, 1);\r\n    meta[Selected].selectedcolumns = arr;\r\n    setselectedcolumns(arr);\r\n    setrendercolumns(!rendercolumns);\r\n  };\r\n\r\n  const addselected = (val) => {\r\n    let temp = selectedcolumns;\r\n    let arr = [];\r\n    temp.push(val);\r\n    meta[Selected].columns.forEach((element, index) => {\r\n      if (temp.includes(element)) {\r\n        arr.push(element);\r\n      }\r\n    });\r\n    meta[Selected].selectedcolumns = arr;\r\n    setselectedcolumns(arr);\r\n    // temp.push(val);\r\n    setrendercolumns(!rendercolumns);\r\n    console.log(meta[Selected].showncolumns);\r\n  };\r\n\r\n  const updateColumnsFront = () => {\r\n    console.log(meta[Selected]);\r\n    meta[Selected].showncolumns = selectedcolumns;\r\n    updatecolumns(meta[Selected], meta[Selected].type);\r\n    setrendercolumns(!rendercolumns);\r\n  };\r\n\r\n  return (\r\n    <Row\r\n      justify=\"space-between\"\r\n      className={styles.DatasetProcessing}\r\n      id=\"Datasetprocessing\"\r\n    >\r\n      <Col span={17} className={styles.column1}>\r\n        <h3 className={styles.titleBold}>\r\n          {project_id} | <span className={styles.subtitle}>{model_id}</span>\r\n        </h3>\r\n        <h3\r\n          style={{\r\n            textAlign: \"left\",\r\n            fontSize: \"20px\",\r\n            fontWeight: \"bold\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        >\r\n          Data Filtering\r\n        </h3>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        />\r\n        <div\r\n          style={{\r\n            flexGrow: \"1\",\r\n            overflow: \"scroll\",\r\n            paddingRight: \"10px\",\r\n          }}\r\n        >\r\n          {loading === true ? (\r\n            <Skeleton active loading={loading} />\r\n          ) : (\r\n            <AutoMLDatasetProcessingList\r\n              data={meta}\r\n              moveup={(id) => moveup(id)}\r\n              movedown={(id) => movedown(id)}\r\n              dummy={dummy}\r\n              selected={(id) => setselected(id)}\r\n              preview={(id) => previewDataset(id)}\r\n            />\r\n          )}\r\n        </div>\r\n        <div style={{ textAlign: \"left\", marginTop: \"10px\" }}>\r\n          <Button className={styles.linkcolbutton} onClick={() => nextPage()}>\r\n            Continue\r\n          </Button>\r\n        </div>\r\n      </Col>\r\n      <Col span={7} className={styles.column2}>\r\n        <h3 className={styles.titleBold}>{name}</h3>\r\n        <div\r\n          style={{ flexGrow: \"1\", overflowY: \"scroll\", paddingRight: \"10px\" }}\r\n        >\r\n          {loading === true ? (\r\n            <Skeleton active loading={loading} />\r\n          ) : (\r\n            <ColumnsGroup\r\n              data={columns}\r\n              selected={selectedcolumns}\r\n              removeselected={(val) => removeselected(val)}\r\n              addselected={(val) => addselected(val)}\r\n              render={rendercolumns}\r\n            />\r\n          )}\r\n        </div>\r\n        <Button\r\n          onClick={() => updateColumnsFront()}\r\n          className={styles.addcartbutton}\r\n        >\r\n          Update Columns\r\n        </Button>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"20px\",\r\n          }}\r\n        />\r\n        <h3 className={styles.titleBold}>Required Training Parameters</h3>\r\n        <div className={styles.info}>\r\n          Required No. of Rows:\r\n          <span style={{ float: \"right\" }}>96</span>\r\n        </div>\r\n        <div className={styles.info}>\r\n          Suggested No. of Rows:\r\n          <span style={{ float: \"right\" }}>255</span>\r\n        </div>\r\n        <div className={styles.info}>\r\n          Required Col to Row Ratio:\r\n          <span style={{ float: \"right\" }}>300</span>\r\n        </div>\r\n        <div className={styles.info}>\r\n          Suggested Col to Row Ratio:\r\n          <span style={{ float: \"right\" }}>25:1</span>\r\n        </div>\r\n      </Col>\r\n      {Selected !== null && rows1 && meta1 ? (\r\n        <Modal\r\n          title={meta[Selected].name}\r\n          visible={showpopup}\r\n          footer={false}\r\n          centered\r\n          onCancel={() => setshowpopup(false)}\r\n          wrapClassName=\"PreviewPopup\"\r\n          width={\"80%\"}\r\n        >\r\n          <p className=\"sublink\">default dataset</p>\r\n          <p className=\"subtitle\" style={{ marginBottom: \"7px\" }}>\r\n            Dataset Description\r\n          </p>\r\n          <p className=\"desc\">{meta[Selected].description}</p>\r\n          <div\r\n            style={{\r\n              width: \"inherit\",\r\n              overflowX: \"scroll\",\r\n              paddingBottom: \"10px\",\r\n            }}\r\n          >\r\n            <AutoMLSelectedDatasetsPreviewRowsTable rows={rows1} />\r\n          </div>\r\n          <p className=\"subtitle\" style={{ marginTop: \"10px\" }}>\r\n            Meta Data\r\n          </p>\r\n          <div\r\n            style={{\r\n              width: \"inherit\",\r\n              overflowX: \"scroll\",\r\n              paddingBottom: \"10px\",\r\n            }}\r\n          >\r\n            <AutoMLSelectedDatasetsMetaTable rows={meta1} />\r\n          </div>\r\n        </Modal>\r\n      ) : null}\r\n    </Row>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\List\\AutoMLDatasetProcessingList\\AutoMLDatasetProcessingList.js",["470","471","472"],"import React, { useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\nimport upArrow from \"../../Icons/AutoML/DatasetProcessing/uparrow.svg\";\r\nimport Circle from \"../../Icons/AutoML/DatasetProcessing/circle.svg\";\r\nimport downArrow from \"../../Icons/AutoML/DatasetProcessing/downarrow.svg\";\r\nimport eye from \"../../Icons/AutoML/DatasetProcessing/eye.svg\";\r\n\r\nexport default function AutoMLDatasetProcessingList(props) {\r\n  const [elements, setelements] = useState(props.data);\r\n\r\n  const itemclicked = (id) => {\r\n    let all = document.getElementsByClassName(\"array\");\r\n    for (var y of all) {\r\n      y.id = \"\";\r\n    }\r\n    all[id].id = \"selected\";\r\n    props.selected(id);\r\n  };\r\n  const clear = () => {\r\n    let all = document.getElementsByClassName(\"array\");\r\n    for (var y of all) {\r\n      y.id = \"\";\r\n    }\r\n  };\r\n\r\n  const getlist = (elements) => {\r\n    return elements.map((item, index) => {\r\n      return (\r\n        <li key={index} className=\"listitem\">\r\n          <div className=\"col1\">\r\n            <img\r\n              onClick={() => {\r\n                clear();\r\n                props.moveup(index);\r\n              }}\r\n              src={upArrow}\r\n              alt=\"uparrow\"\r\n              style={{ marginBottom: \"5px\", cursor: \"pointer\" }}\r\n            />\r\n            <img\r\n              src={downArrow}\r\n              onClick={() => {\r\n                clear();\r\n                props.movedown(index);\r\n              }}\r\n              alt=\"downarrow\"\r\n              style={{ marginBottom: \"5px\", cursor: \"pointer\" }}\r\n            />\r\n          </div>\r\n          <div className=\"col2\">\r\n            <div className=\"title\">{item.name}</div>\r\n            <div className=\"array\" onClick={() => itemclicked(index)}>\r\n              <img\r\n                onClick={() => props.preview(item.key)}\r\n                className=\"eye\"\r\n                src={eye}\r\n                alt=\"eye\"\r\n                style={{ cursor: \"pointer\" }}\r\n              />\r\n              {item.showncolumns.map((element, i) => {\r\n                return (\r\n                  <span key={i} className=\"column\">\r\n                    {element}\r\n                  </span>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  return elements ? (\r\n    <div className=\"AutoMLDatasetProcessingList\">\r\n      <ul>{getlist(elements)}</ul>\r\n    </div>\r\n  ) : (\r\n    <div></div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Containers\\ColumnsGroup\\ColumnsGroup.js",[],"D:\\Work\\beyond-data\\src\\Pages\\AutoML\\LinkColumns\\LinkColumns.js",["473","474","475","476","477","478","479","480","481"],"import { Button } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport AutoMLSaveDatasetModal from \"../../../Components/Modals/AutoMLSaveDatasetModal/AutoMLSaveDatasetModal\";\r\nimport LinkColumnsReactFlow from \"../../../Components/ReactFlow/LinkColumnsReactFlow/LinkColumnsReactFlow\";\r\nimport \"./styles.css\";\r\nimport editicon from \"../../../Components/Icons/AutoML/edit.svg\";\r\nimport discardIcon from \"../../../Components/Icons/AutoML/discardresultant.svg\";\r\nimport DeleteIcon from \"../../../Components/Icons/AutoML/deleteDatasetIcon.svg\";\r\nimport { SelectedDatasetsContext } from \"../../../Data/Contexts/AutoMLSelectedDatasetsCart/AutoMLSelectedDatasetsCart\";\r\n\r\nexport default function LinkColumns(props) {\r\n  let { project_id, model_id } = useParams();\r\n  const [showresultantmodal, setshowresultantmodal] = useState(false);\r\n  const [saveDataset, setsaveDataset] = useState(false);\r\n  const [editable, seteditable] = useState(false);\r\n  const { SelectedDatasets } = useContext(SelectedDatasetsContext);\r\n  const [rendertable, setrendertable] = useState(true);\r\n  const [renderresultant, setrenderresultant] = useState(false);\r\n\r\n  const [links, setlinks] = useState([]);\r\n\r\n  const [data, setdata] = useState(null);\r\n  const [customtable, setcustomtable] = useState();\r\n  const [renamedcols, setrenamedcols] = useState([]);\r\n  const [deletedcols, setdeletedcols] = useState([]);\r\n  const [tempdeletedcols, settempdeletedcols] = useState([]);\r\n\r\n  //For Unmerging\r\n  const [unmergeddata, setunmergeddata] = useState(null);\r\n\r\n  if (data === null || unmergeddata === null) {\r\n    let temp = [];\r\n    SelectedDatasets.datasets.forEach((element) => {\r\n      let cols = [];\r\n      let indexes = [];\r\n      element.selectedcolumns.forEach((item) => {\r\n        indexes.push(element.columns.indexOf(item));\r\n      });\r\n      indexes.forEach((i) => {\r\n        cols.push({ name: element.columns[i], type: element.dtypes[i] });\r\n      });\r\n      temp.push({ name: element.name, cols: cols });\r\n    });\r\n    setdata(temp);\r\n    setunmergeddata(temp);\r\n    let cols = [];\r\n    let indexes = [];\r\n    SelectedDatasets.datasets[0].selectedcolumns.forEach((item) => {\r\n      indexes.push(SelectedDatasets.datasets[0].columns.indexOf(item));\r\n    });\r\n    indexes.forEach((i, index) => {\r\n      cols.push({\r\n        id: index,\r\n        name: SelectedDatasets.datasets[0].columns[i],\r\n        data_type: SelectedDatasets.datasets[0].dtypes[i],\r\n      });\r\n    });\r\n    setcustomtable({ name: SelectedDatasets.datasets[0].name, cols: cols });\r\n  }\r\n\r\n  const generateTable = () => {\r\n    props.history.push({\r\n      pathname: `/automl/projects/${project_id}/models/${model_id}/customised_dataset/`,\r\n      state: {\r\n        detail: \"I am from New link page\",\r\n        page_name: \"automl_customised_datasets\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setshowresultantmodal(false);\r\n    seteditable(false);\r\n    setdeletedcols([]);\r\n    resetcustomtable();\r\n    setrendertable(!rendertable);\r\n  };\r\n\r\n  const makelink = (cols, link) => {\r\n    setunmergeddata({ links: links, data: data, customtable: customtable });\r\n    let temp = links;\r\n    let arr = [];\r\n    arr.push(link.sourcetable);\r\n    arr.push(link.sourcetable);\r\n    arr.push(link.targettable);\r\n    let sourcecols = [];\r\n    let targetcols = [];\r\n    let selectedtable = null;\r\n    let targettable = null;\r\n    data.forEach((item, index) => {\r\n      if (item.name === link.sourcetable) {\r\n        selectedtable = data[index];\r\n      }\r\n    });\r\n    data.forEach((item, index) => {\r\n      if (item.name === link.targettable) {\r\n        targettable = data[index];\r\n      }\r\n    });\r\n    link.source.forEach((item) => {\r\n      sourcecols.push(selectedtable.cols[item].name);\r\n    });\r\n    link.target.forEach((item) => {\r\n      targetcols.push(targettable.cols[item].name);\r\n    });\r\n    arr.push(sourcecols);\r\n    arr.push(targetcols);\r\n    arr.push({});\r\n    arr.push([]);\r\n    temp.push(arr);\r\n    setlinks(temp);\r\n    let newdata = [];\r\n    let selectedtablecols = selectedtable.cols;\r\n\r\n    targettable.cols.forEach((item, index) => {\r\n      if (!link.target.includes(index)) {\r\n        selectedtablecols.push(item);\r\n      }\r\n    });\r\n    let duplicatecols = [];\r\n    selectedtablecols.forEach((item, index) => {\r\n      for (let i = index + 1; i < selectedtablecols.length; i++) {\r\n        if (item.name === selectedtablecols[i].name) {\r\n          selectedtablecols[index].name = `${selectedtablecols[index].name}_1`;\r\n          selectedtablecols[i].name = `${selectedtablecols[i].name}_2`;\r\n        }\r\n      }\r\n    });\r\n    console.log(selectedtablecols);\r\n    newdata.push({ name: link.sourcetable, cols: selectedtablecols });\r\n    data.forEach((item, index) => {\r\n      if (index > 1) {\r\n        newdata.push({ name: item.name, cols: item.cols });\r\n      }\r\n    });\r\n    console.log(newdata);\r\n    console.log(links);\r\n    setdata(newdata);\r\n    setcustomtable({ name: newdata[0].name, cols: newdata[0].cols });\r\n    setrendertable(!rendertable);\r\n    setrenamedcols([]);\r\n    resetcustomtable();\r\n  };\r\n\r\n  const changecolname = (val, index) => {\r\n    let temp = renamedcols;\r\n    let selected = links[links.length - 1];\r\n    let cols = data[0].cols;\r\n    let found = false;\r\n    if (temp.length > 0) {\r\n      temp.forEach((item, i) => {\r\n        if (Object.keys(item)[0] === data[0].cols[index].name) {\r\n          found = true;\r\n          temp[i][data[0].cols[index].name] = val;\r\n          // setrenamedcols(temp);\r\n          //Change name in custom table\r\n          let custom = customtable;\r\n          custom.cols[`${index}`].name = val;\r\n          setcustomtable(custom);\r\n          setrenderresultant(!renderresultant);\r\n        }\r\n      });\r\n    } else {\r\n      found = true;\r\n      let obj = {};\r\n      obj[`${data[0].cols[index].name}`] = val;\r\n      temp.push(obj);\r\n      setrenamedcols(temp);\r\n      //Change name in custom table\r\n      let custom = customtable;\r\n      custom.cols[`${index}`].name = val;\r\n      setcustomtable(custom);\r\n      setrenderresultant(!renderresultant);\r\n    }\r\n    if (found === false) {\r\n      let obj = {};\r\n      obj[`${data[0].cols[index].name}`] = val;\r\n      temp.push(obj);\r\n      setrenamedcols(temp);\r\n      //Change name in custom table\r\n      let custom = customtable;\r\n      custom.cols[`${index}`].name = val;\r\n      setcustomtable(custom);\r\n      setrenderresultant(!renderresultant);\r\n    }\r\n  };\r\n\r\n  const saveRenamedCols = () => {\r\n    seteditable(false);\r\n    //Delete Cols in main data\r\n    if (deletedcols.length !== 0) {\r\n      let temp3 = data[0].cols;\r\n      let positions = [];\r\n      temp3.forEach((element, index) => {\r\n        if (deletedcols.includes(element.name)) {\r\n          positions.push(index);\r\n        }\r\n      });\r\n      let count = 0;\r\n      positions.forEach((item) => {\r\n        temp3.splice(item + count, 1);\r\n        count = count - 1;\r\n      });\r\n    }\r\n\r\n    ////Change name in main data\r\n    if (renamedcols.length !== 0) {\r\n      let temp = data;\r\n      temp[0].cols.forEach((element) => {\r\n        renamedcols.forEach((item) => {\r\n          if (Object.keys(item)[0] === element.name) {\r\n            element.name = Object.values(item)[0];\r\n          }\r\n        });\r\n      });\r\n      setdata(temp);\r\n      setrendertable(!rendertable);\r\n      //add changed cols in links\r\n      let renamed = {};\r\n      if (renamedcols.length === 1) {\r\n        renamed = renamedcols;\r\n      } else {\r\n        renamedcols.forEach((element) => {\r\n          for (const [key, value] of Object.entries(element)) {\r\n            renamed[`${key}`] = value;\r\n          }\r\n        });\r\n      }\r\n      if (links.length > 0) {\r\n        let temp = links;\r\n        temp[links.length - 1][5] = renamed;\r\n        setlinks(temp);\r\n      }\r\n    } else {\r\n      if (links.length > 0) {\r\n        let temp = links;\r\n        temp[links.length - 1][5] = {};\r\n        setlinks(temp);\r\n      }\r\n    }\r\n    //Add Deleted in links\r\n    if (links[links.length - 1][6]) {\r\n      links[links.length - 1][6] = [\r\n        ...links[links.length - 1][6],\r\n        ...deletedcols,\r\n      ];\r\n    } else {\r\n      links[links.length - 1].push(deletedcols);\r\n    }\r\n    setdeletedcols([]);\r\n    console.log(links);\r\n  };\r\n\r\n  const resetcustomtable = () => {\r\n    setrenamedcols([]);\r\n    let cols = [];\r\n    let indexes = [];\r\n    data[0].cols.forEach((element, index) => {\r\n      cols.push({\r\n        id: index,\r\n        name: element.name,\r\n        data_type: element.type,\r\n      });\r\n    });\r\n    setcustomtable({ name: data[0].name, cols: cols });\r\n    setrendertable(!rendertable);\r\n  };\r\n\r\n  const resetdata = () => {\r\n    setlinks([]);\r\n    let temp = [];\r\n    SelectedDatasets.datasets.forEach((element) => {\r\n      let cols = [];\r\n      let indexes = [];\r\n      element.selectedcolumns.forEach((item) => {\r\n        indexes.push(element.columns.indexOf(item));\r\n      });\r\n      indexes.forEach((i) => {\r\n        cols.push({ name: element.columns[i], type: element.dtypes[i] });\r\n      });\r\n      temp.push({ name: element.name, cols: cols });\r\n    });\r\n    setdata(temp);\r\n    setunmergeddata(temp);\r\n    let cols = [];\r\n    let indexes = [];\r\n    SelectedDatasets.datasets[0].selectedcolumns.forEach((item) => {\r\n      indexes.push(SelectedDatasets.datasets[0].columns.indexOf(item));\r\n    });\r\n    indexes.forEach((i, index) => {\r\n      cols.push({\r\n        id: index,\r\n        name: SelectedDatasets.datasets[0].columns[i],\r\n        data_type: SelectedDatasets.datasets[0].dtypes[i],\r\n      });\r\n    });\r\n    setcustomtable({ name: SelectedDatasets.datasets[0].name, cols: cols });\r\n    setrenamedcols([]);\r\n    setrendertable(!rendertable);\r\n  };\r\n\r\n  const unmergedata = () => {\r\n    if (unmergeddata !== null) {\r\n      console.log(\"Gone\");\r\n      console.log(unmergeddata);\r\n      let temp = unmergeddata;\r\n      let l = [];\r\n      if (temp.links.length === 1) {\r\n        l = [];\r\n      } else {\r\n        l = temp.links.pop();\r\n      }\r\n      setlinks(l);\r\n      setcustomtable(temp.customtable);\r\n      setdata(temp.data);\r\n      setrenderresultant(!renderresultant);\r\n      setrendertable(!rendertable);\r\n      setrenamedcols([]);\r\n      setdeletedcols([]);\r\n      setunmergeddata(null);\r\n    }\r\n  };\r\n\r\n  const deletecol = (index) => {\r\n    let temp = data[0].cols;\r\n    let temp1 = customtable.cols;\r\n    let deleted = deletedcols;\r\n    deleted.push(temp1[index].name);\r\n    // temp.splice(index, 1);\r\n    temp1.splice(index, 1);\r\n    setrendertable(!rendertable);\r\n    setrenderresultant(!renderresultant);\r\n    setdeletedcols(deleted);\r\n    //Add Deleted in links\r\n    // if (links[links.length - 1][6]) {\r\n    //   links[links.length - 1][6] = deleted;\r\n    // } else {\r\n    //   links[links.length - 1].push(deleted);\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className=\"LinkColumns\">\r\n      <h3 className={\"titleBold\"}>\r\n        {project_id} | <span className={\"subtitle\"}>{model_id}</span>\r\n      </h3>\r\n\r\n      <div style={{ flexGrow: \"1\", height: \"100%\" }}>\r\n        <LinkColumnsReactFlow\r\n          data={data}\r\n          makelink={(cols, links) => makelink(cols, links)}\r\n          showresulttable={() => {\r\n            resetcustomtable();\r\n            setshowresultantmodal(true);\r\n          }}\r\n          generateTable={() => setsaveDataset(true)}\r\n          render={rendertable}\r\n          unmerge={unmergedata}\r\n          createdlinks={links}\r\n          resetdata={resetdata}\r\n        />\r\n      </div>\r\n      <Modal\r\n        title=\"Custom Table\"\r\n        visible={showresultantmodal}\r\n        onCancel={handleCancel}\r\n        footer={false}\r\n        wrapClassName=\"resultantpopup\"\r\n        width={\"80%\"}\r\n      >\r\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n          <h3\r\n            style={{\r\n              textAlign: \"left\",\r\n              fontSize: \"20px\",\r\n              fontWeight: \"bold\",\r\n              marginBottom: \"0px\",\r\n            }}\r\n          >\r\n            {customtable ? customtable.name : \"\"}\r\n          </h3>\r\n          {editable === false ? (\r\n            <h3\r\n              className={\"titleBold\"}\r\n              style={{ cursor: \"pointer\", marginTop: \"15px\" }}\r\n              onClick={() => seteditable(true)}\r\n            >\r\n              <img src={editicon} alt=\"edit icon\" /> Edit Column Names\r\n            </h3>\r\n          ) : (\r\n            <h3\r\n              className={\"titleBold\"}\r\n              style={{ cursor: \"pointer\", marginTop: \"15px\", color: \"#6d6d6d\" }}\r\n              onClick={() => {\r\n                resetcustomtable();\r\n                seteditable(false);\r\n              }}\r\n            >\r\n              <img\r\n                src={discardIcon}\r\n                style={{ marginRight: \"3px\", paddingBottom: \"3px\" }}\r\n                alt=\"edit icon\"\r\n              />\r\n              Discard Changes\r\n            </h3>\r\n          )}\r\n          <div>\r\n            <ul\r\n              className=\"custom_row\"\r\n              style={{ marginTop: \"2px\", paddingBottom: \"10px\" }}\r\n            >\r\n              {customtable\r\n                ? customtable.cols.map((d, index) => (\r\n                    <li\r\n                      key={index}\r\n                      style={\r\n                        editable\r\n                          ? { display: \"inline-block\", paddingRight: \"6px\" }\r\n                          : { display: \"inline-block\" }\r\n                      }\r\n                    >\r\n                      {editable ? (\r\n                        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                          <input\r\n                            className=\"renamecol_input\"\r\n                            value={d.name}\r\n                            onChange={(e) =>\r\n                              changecolname(e.target.value, index)\r\n                            }\r\n                          />\r\n                          <img\r\n                            src={DeleteIcon}\r\n                            alt=\"delete icon\"\r\n                            style={{\r\n                              cursor: \"pointer\",\r\n                              marginTop: \"0px\",\r\n                              width: \"25px\",\r\n                              marginLeft: \"10px\",\r\n                            }}\r\n                            onClick={() => deletecol(index)}\r\n                          />\r\n                        </div>\r\n                      ) : (\r\n                        d.name\r\n                      )}\r\n                    </li>\r\n                  ))\r\n                : null}\r\n            </ul>\r\n          </div>\r\n          {editable === true ? (\r\n            <div style={{ marginTop: \"5px\" }}>\r\n              {/* <h3\r\n                style={{\r\n                  float: \"left\",\r\n                  textAlign: \"center\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"18px\",\r\n                  lineHeight: \"22px\",\r\n                  marginTop: \"18px\",\r\n                  marginRight: \"20px\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n                onClick={() => setshowresultantmodal(false)}\r\n              >\r\n                Cancel\r\n              </h3> */}\r\n              <Button\r\n                style={{ float: \"left\", marginTop: \"10px\", width: \"100px\" }}\r\n                onClick={() => saveRenamedCols()}\r\n              >\r\n                Save\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <br />\r\n          )}\r\n        </div>\r\n      </Modal>\r\n      <AutoMLSaveDatasetModal\r\n        isModalVisible={saveDataset}\r\n        handleCancel={() => setsaveDataset(false)}\r\n        handleOk={() => setsaveDataset(false)}\r\n        links={links}\r\n      />\r\n      {/* <div> */}\r\n      {/* <div className=\"row\" style={{ display: \"flex\", flexDirection: \"row\" }}> */}\r\n      {/* <div className=\"box2\" style={{ flexGrow: \"1\" }}>\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n              <h3\r\n                style={{\r\n                  textAlign: \"left\",\r\n                  fontSize: \"20px\",\r\n                  fontWeight: \"bold\",\r\n                  marginBottom: \"0px\",\r\n                }}\r\n              >\r\n                Custom Table\r\n              </h3>\r\n              <h3 className={\"titleBold\"}>(icon) Edit Column Names</h3>\r\n              <div style={{ flexGrow: \"1\" }}>Custom table Row</div>\r\n              <Button style={{ float: \"left\" }} onClick={() => generateTable()}>\r\n                Generate Table\r\n              </Button>\r\n            </div>\r\n          </div> */}\r\n      {/* <div className=\"box3\">\r\n            <h3\r\n              style={{\r\n                textAlign: \"left\",\r\n                fontSize: \"20px\",\r\n                fontWeight: \"bold\",\r\n                marginBottom: \"0px\",\r\n                margin: \"0px\",\r\n              }}\r\n            >\r\n              Required Training Parameters\r\n            </h3>\r\n            <div className={\"info\"}>\r\n              Required No. of Rows:\r\n              <span style={{ float: \"right\" }}>96</span>\r\n            </div>\r\n            <div className={\"info\"}>\r\n              Suggested No. of Rows:\r\n              <span style={{ float: \"right\" }}>255</span>\r\n            </div>\r\n            <div className={\"info\"}>\r\n              Required Col to Row Ratio:\r\n              <span style={{ float: \"right\" }}>300</span>\r\n            </div>\r\n            <div className={\"info\"}>\r\n              Suggested Col to Row Ratio:\r\n              <span style={{ float: \"right\" }}>25:1</span>\r\n            </div>\r\n          </div> */}\r\n      {/* </div> */}\r\n      {/* </div> */}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\ReactFlow\\LinkColumnsReactFlow\\LinkColumnsReactFlow.js",["482","483","484","485","486","487","488","489","490","491","492","493","494","495"],"import { Button } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport ReactFlow, {\r\n  Controls,\r\n  updateEdge,\r\n  addEdge,\r\n  isNode,\r\n  getConnectedEdges,\r\n  isEdge,\r\n  removeElements,\r\n  Background,\r\n} from \"react-flow-renderer\";\r\nimport \"./styles.css\";\r\nimport upArrow from \"../../Icons/AutoML/DatasetProcessing/uparrow.svg\";\r\nimport downArrow from \"../../Icons/AutoML/DatasetProcessing/downarrow.svg\";\r\n\r\nexport default function LinkColumnsReactFlow(props) {\r\n  let initialElements = [];\r\n  const [CustomTable, setCustomTable] = useState(null);\r\n  const [showresultanttable, setshowresultanttable] = useState(false);\r\n  const [merged, setmerged] = useState(false);\r\n\r\n  let data = props.data;\r\n  let data1 = [\r\n    {\r\n      name: \"Customer\",\r\n      cols: [\r\n        { name: \"Customer Name\", type: \"int\" },\r\n        { name: \"Customer Id\", type: \"str\" },\r\n        { name: \"Address\", type: \"str\" },\r\n        { name: \"Phone\", type: \"int\" },\r\n        { name: \"Date\", type: \"str\" },\r\n      ],\r\n    },\r\n    {\r\n      name: \"Product\",\r\n      cols: [\r\n        { name: \"Product Name\", type: \"str\" },\r\n        { name: \"Product Id\", type: \"int\" },\r\n        { name: \"Date\", type: \"str\" },\r\n      ],\r\n    },\r\n    {\r\n      name: \"Branch\",\r\n      cols: [\r\n        { name: \"Branch Name\", type: \"str\" },\r\n        { name: \"Branch Id\", type: \"int\" },\r\n        { name: \"Date\", type: \"int\" },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    rendernew();\r\n  }, [props.data]);\r\n\r\n  useEffect(() => {\r\n    rendernew();\r\n  }, [props.render]);\r\n\r\n  const rendernew = () => {\r\n    console.log(\"rendered\");\r\n    let temp = [];\r\n    let initialheight = 0;\r\n    data.map((item, i) => {\r\n      let initialwidth = 0;\r\n      temp.push({\r\n        id: item.name,\r\n        data: {\r\n          label: (\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  marginRight: \"8px\",\r\n                }}\r\n              >\r\n                <img\r\n                  src={upArrow}\r\n                  alt=\"uparrow\"\r\n                  onClick={() => onMoveUp(i)}\r\n                  width={12}\r\n                  style={{\r\n                    marginBottom: \"5px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                />\r\n                <img\r\n                  src={downArrow}\r\n                  alt=\"uparrow\"\r\n                  width={12}\r\n                  onClick={() => onMoveDown(i)}\r\n                  style={{ cursor: \"pointer\" }}\r\n                />\r\n              </div>\r\n              <span\r\n                style={{\r\n                  display: \"inline-block\",\r\n                  whiteSpace: \"nowrap\",\r\n                  overflow: \"hidden\",\r\n                  textOverflow: \"ellipsis\",\r\n                  maxWidth: \"13ch\",\r\n                }}\r\n              >\r\n                {item.name}\r\n              </span>\r\n            </div>\r\n          ),\r\n        },\r\n        type: \"default\",\r\n        connectable: false,\r\n        selectable: false,\r\n        position: { x: initialwidth, y: initialheight },\r\n        style: {\r\n          background: \"white\",\r\n          border: \"none\",\r\n          fontSize: \"12px\",\r\n          cursor: \"default\",\r\n          fontWeight: \"bold\",\r\n          color: \"black\",\r\n          paddingTop: \"2px\",\r\n          paddingBottom: \"2px\",\r\n        },\r\n      });\r\n      initialwidth = initialwidth + 100;\r\n      item.cols.map((element, index) => {\r\n        let obj = {\r\n          id: item.name + \"$\" + index + \"%\" + i,\r\n          data: { label: element.name },\r\n          type: i === 0 ? \"input\" : i === 1 ? \"output\" : \"default\",\r\n          connectable: i > 1 ? false : true,\r\n          position: { x: initialwidth, y: initialheight },\r\n          style: {\r\n            background: \"#F5FAFF\",\r\n            border: \"none\",\r\n            borderRadius:\r\n              index === 0\r\n                ? \"10px 0 0 10px\"\r\n                : index === item.cols.length - 1\r\n                ? \"0px 10px 10px 0px\"\r\n                : null,\r\n            fontSize: \"12px\",\r\n            color: \"#6D6D6D\",\r\n            paddingTop: \"2px\",\r\n            paddingBottom: \"2px\",\r\n            whiteSpace: \"nowrap\",\r\n            textOverflow: \"ellipsis\",\r\n            maxWidth: \"23ch\",\r\n          },\r\n        };\r\n        temp.push(obj);\r\n        initialwidth = initialwidth + 150;\r\n      });\r\n      initialheight = initialheight + 100;\r\n    });\r\n    setElements({ data: temp, changed: !elements.changed });\r\n  };\r\n\r\n  const [processed, setprocessed] = useState(null);\r\n\r\n  if (processed === null) {\r\n    let temp = [];\r\n    let initialheight = 0;\r\n    data.map((item, i) => {\r\n      let initialwidth = 0;\r\n      temp.push({\r\n        id: item.name,\r\n        data: {\r\n          label: (\r\n            <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  marginRight: \"8px\",\r\n                }}\r\n              >\r\n                <img\r\n                  src={upArrow}\r\n                  className=\"arrowIcon\"\r\n                  alt=\"uparrow\"\r\n                  onClick={() => onMoveUp(i)}\r\n                  width={12}\r\n                  style={{\r\n                    marginBottom: \"2px\",\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                />\r\n                <img\r\n                  src={downArrow}\r\n                  className=\"arrowIcon\"\r\n                  onClick={() => onMoveDown(i)}\r\n                  alt=\"downarrow\"\r\n                  width={12}\r\n                  style={{ cursor: \"pointer\", marginTop: \"2px\" }}\r\n                />\r\n              </div>\r\n              <span>{item.name}</span>\r\n            </div>\r\n          ),\r\n        },\r\n        type: \"default\",\r\n        connectable: false,\r\n        selectable: false,\r\n        position: { x: initialwidth, y: initialheight },\r\n        style: {\r\n          background: \"white\",\r\n          border: \"none\",\r\n          fontSize: \"12px\",\r\n          cursor: \"default\",\r\n          fontWeight: \"bold\",\r\n          color: \"black\",\r\n          paddingTop: \"2px\",\r\n          paddingBottom: \"2px\",\r\n        },\r\n      });\r\n      initialwidth = initialwidth + 100;\r\n      item.cols.map((element, index) => {\r\n        let obj = {\r\n          id: item.name + \"$\" + index + \"%\" + i,\r\n          data: { label: element.name },\r\n          type: i === 0 ? \"input\" : i === 1 ? \"output\" : \"default\",\r\n          connectable: i > 1 ? false : true,\r\n          position: { x: initialwidth, y: initialheight },\r\n          style: {\r\n            background: \"#F5FAFF\",\r\n            border: \"none\",\r\n            borderRadius:\r\n              index === 0\r\n                ? \"10px 0 0 10px\"\r\n                : index === item.cols.length - 1\r\n                ? \"0px 10px 10px 0px\"\r\n                : null,\r\n            fontSize: \"12px\",\r\n            color: \"#6D6D6D\",\r\n            paddingTop: \"2px\",\r\n            paddingBottom: \"2px\",\r\n          },\r\n        };\r\n        temp.push(obj);\r\n        initialwidth = initialwidth + 150;\r\n      });\r\n      initialheight = initialheight + 100;\r\n    });\r\n    initialElements = temp;\r\n  }\r\n\r\n  const onLoad = (reactFlowInstance) => {\r\n    reactFlowInstance.project({ x: 40, y: 10 });\r\n    reactFlowInstance.fitView({ padding: 0.05, includeHiddenNodes: false });\r\n  };\r\n\r\n  // gets called after end of edge gets dragged to another source or target\r\n  const onEdgeUpdate = (oldEdge, newConnection) =>\r\n    setElements((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n  const onConnect = (params) => {\r\n    console.log(params);\r\n    let temp = elements.data;\r\n    let found = false;\r\n    temp.forEach((element) => {\r\n      if (isEdge(element) && params.target === element.target) {\r\n        found = true;\r\n      }\r\n    });\r\n    if (found === false) {\r\n      let source_row = params.source.split(\"%\")[1];\r\n      let source_col = params.source.split(\"$\")[1][0];\r\n      let target_row = params.target.split(\"%\")[1];\r\n      let target_col = params.target.split(\"$\")[1][0];\r\n      if (\r\n        data[source_row].cols[source_col].type ===\r\n        data[target_row].cols[target_col].type\r\n      ) {\r\n        let edge = params;\r\n        edge[\"animated\"] = false;\r\n        edge[\"label\"] = \"\";\r\n        edge[\"style\"] = { stroke: \"#085fab\", strokeWidth: \"3px\" };\r\n        edge[\"arrowHeadType\"] = \"arrow\";\r\n        // edge[\"type\"] = \"step\";\r\n        let temp = addEdge(edge, elements.data);\r\n        setshowresultanttable(false);\r\n        setmerged(true);\r\n        setElements({ data: temp, changed: !elements.changed });\r\n      }\r\n    }\r\n  };\r\n\r\n  const onConnectStart = (event, { nodeId, handleType }) => {\r\n    let source_row = nodeId.split(\"%\")[1];\r\n    let source_col = nodeId.split(\"$\")[1][0];\r\n    let temp = elements.data;\r\n    temp.forEach((item) => {\r\n      if (item.id.split(\"%\")[1] === \"1\") {\r\n        if (\r\n          data[source_row].cols[source_col].type ===\r\n          data[1].cols[item.id.split(\"$\")[1][0]].type\r\n        ) {\r\n          item.style.background = \"#e1eeff\";\r\n        }\r\n      }\r\n    });\r\n\r\n    setElements({ data: temp, changed: !elements.changed });\r\n  };\r\n  const onConnectEnd = (event) => {\r\n    let temp = elements.data;\r\n    temp.forEach((item) => {\r\n      if (item.id.split(\"%\")[1] === \"1\") {\r\n        item.style.background = \"#F5FAFF\";\r\n      }\r\n    });\r\n    setElements({ data: temp, changed: !elements.changed });\r\n  };\r\n\r\n  const onElementClick = (event, element) => {\r\n    if (isEdge(element)) {\r\n      console.log(element);\r\n      let temp = elements.data;\r\n      temp = temp.filter((item, index) => {\r\n        return item.source !== element.source && item.target !== element.target;\r\n      });\r\n      setElements({ data: temp, changed: !elements.changed });\r\n      temp.forEach((i) => {\r\n        if (isEdge(i)) {\r\n          console.log(\"true\");\r\n          setshowresultanttable(false);\r\n        } else {\r\n          setshowresultanttable(true);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  function array_move(arr, old_index, new_index) {\r\n    if (new_index >= arr.length) {\r\n      var k = new_index - arr.length + 1;\r\n      while (k--) {\r\n        arr.push(undefined);\r\n      }\r\n    }\r\n    arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\r\n    return arr; // for testing\r\n  }\r\n\r\n  const onMoveUp = (row_id) => {\r\n    let temp = data;\r\n    if (row_id !== 0) {\r\n      array_move(temp, row_id, row_id - 1);\r\n      data = temp;\r\n      setshowresultanttable(true);\r\n      rendernew();\r\n    }\r\n  };\r\n\r\n  const onMoveDown = (row_id) => {\r\n    let temp = data;\r\n    if (row_id !== data.length - 1) {\r\n      array_move(temp, row_id, row_id + 1);\r\n      data = temp;\r\n      setshowresultanttable(true);\r\n      rendernew();\r\n    }\r\n  };\r\n\r\n  const getElements = () => {\r\n    let temp = elements.data;\r\n    let arr = [];\r\n    temp.forEach((item) => {\r\n      if (item.id.split(\"%\")[1] === \"0\" || item.id.split(\"%\")[1] === \"1\") {\r\n        arr.push(item);\r\n      }\r\n      if (isEdge(item)) {\r\n        arr.push(item);\r\n      }\r\n    });\r\n    console.log(arr);\r\n  };\r\n\r\n  const mergeElements = () => {\r\n    let temp = elements.data;\r\n    let arr = [];\r\n    temp.forEach((item) => {\r\n      if (item.id.split(\"%\")[1] === \"0\" || item.id.split(\"%\")[1] === \"1\") {\r\n        arr.push(item);\r\n      }\r\n      if (isEdge(item)) {\r\n        arr.push(item);\r\n      }\r\n      if (!item.id.includes(\"%\")) {\r\n        arr.push(item);\r\n      }\r\n    });\r\n\r\n    let links = { source: [], target: [], sourcetable: \"\", targettable: \"\" };\r\n    arr.forEach((element) => {\r\n      if (isEdge(element)) {\r\n        links.source.push(parseInt(element.source.split(\"$\")[1].split(\"%\")[0]));\r\n        links.sourcetable = element.source.split(\"$\")[0];\r\n        links.target.push(parseInt(element.target.split(\"$\")[1].split(\"%\")[0]));\r\n        links.targettable = element.target.split(\"$\")[0];\r\n      }\r\n    });\r\n    // console.log(arr);\r\n    // console.log(links);\r\n    let sourcearr = [];\r\n    let targetarr = [];\r\n    arr.forEach((element) => {\r\n      if (isNode(element)) {\r\n        if (element.id.includes(\"%\")) {\r\n          if (\r\n            element.id.includes(links.sourcetable) &&\r\n            links.sourcetable !== \"\"\r\n          ) {\r\n            sourcearr.push(element.data.label);\r\n          }\r\n          if (\r\n            element.id.includes(links.targettable) &&\r\n            links.sourcetable !== \"\"\r\n          ) {\r\n            targetarr.push(element.data.label);\r\n          }\r\n        }\r\n      }\r\n    });\r\n    //Same Name Detection and not linked\r\n    sourcearr.forEach((element, index) => {\r\n      if (targetarr.includes(element)) {\r\n        if (!links.source.includes(index)) {\r\n          sourcearr[sourcearr.indexOf(element)] =\r\n            sourcearr[sourcearr.indexOf(element)] + \"_1\";\r\n          targetarr[targetarr.indexOf(element)] =\r\n            targetarr[targetarr.indexOf(element)] + \"_2\";\r\n        }\r\n      }\r\n    });\r\n    // console.log(sourcearr);\r\n    // console.log(targetarr);\r\n\r\n    //Make Custom table\r\n    let custom = sourcearr;\r\n    targetarr.forEach((element, index) => {\r\n      if (!sourcearr.includes(element)) {\r\n        custom.push(element);\r\n      }\r\n    });\r\n    // console.log(custom);\r\n    props.makelink(custom, links);\r\n    setshowresultanttable(true);\r\n  };\r\n\r\n  const [elements, setElements] = useState({\r\n    data: initialElements,\r\n    changed: false,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"ReactFlowContainer\"\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"inherit\",\r\n          padding: \"0px\",\r\n          borderRadius: \"10px\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <h3\r\n            style={{\r\n              textAlign: \"left\",\r\n              fontSize: \"20px\",\r\n              fontWeight: \"bold\",\r\n              marginBottom: \"0px\",\r\n              flexGrow: \"1\",\r\n            }}\r\n          >\r\n            Dataset Processing\r\n          </h3>\r\n          <div\r\n            style={\r\n              showresultanttable\r\n                ? { textAlign: \"left\", marginTop: \"10px\" }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            <h3 className=\"anchor\" onClick={() => props.unmerge()}>\r\n              Unmerge\r\n            </h3>\r\n            {/* <Button onClick={() => getElements()}>Download</Button> */}\r\n          </div>\r\n          <div\r\n            style={\r\n              showresultanttable\r\n                ? { display: \"none\" }\r\n                : { textAlign: \"left\", marginRight: \"5px\" }\r\n            }\r\n          >\r\n            <Button\r\n              disabled={merged ? false : true}\r\n              style={merged ? null : { opacity: \"0.3\" }}\r\n              onClick={() => mergeElements()}\r\n            >\r\n              Merge\r\n            </Button>\r\n          </div>\r\n          {/* <Button onClick={() => unmergedata()}>Unmerge(Testing)</Button> */}\r\n          <Button\r\n            disabled={merged ? false : true}\r\n            style={merged ? null : { opacity: \"0.3\" }}\r\n            onClick={() => props.resetdata()}\r\n          >\r\n            Reset\r\n          </Button>\r\n        </div>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        />\r\n        <ReactFlow\r\n          nodesDraggable={false}\r\n          elements={elements.data}\r\n          onLoad={onLoad}\r\n          snapToGrid\r\n          onConnect={onConnect}\r\n          onConnectStart={onConnectStart}\r\n          onConnectStop={onConnectEnd}\r\n          onElementClick={onElementClick}\r\n        >\r\n          <Controls showInteractive={false} style={{ left: \"95%\" }} />\r\n          <Background color=\"#aaa\" gap={16} />\r\n        </ReactFlow>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        />\r\n        <div\r\n          className=\"buttongroup\"\r\n          style={{ textAlign: \"left\", marginTop: \"10px\" }}\r\n        >\r\n          <Button\r\n            disabled={props.createdlinks.length === 0 ? true : false}\r\n            style={props.createdlinks.length === 0 ? { opacity: \"0.4\" } : null}\r\n            onClick={() => props.showresulttable()}\r\n          >\r\n            View Resultant Table\r\n          </Button>\r\n          <Button\r\n            type=\"primary\"\r\n            style={props.data.length === 1 ? {} : { opacity: \"0.3\" }}\r\n            disabled={props.data.length === 1 ? false : true}\r\n            onClick={() => props.generateTable()}\r\n          >\r\n            Generate Table\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\CustomisedDataset\\CustomisedDataset.js",["496","497","498"],"import React, { useContext, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport AutoMLCustomisedDatasetTabs from \"../../../Components/Tabs/AutoMLCustomisedDatasetTabs/AutoMLCustomisedDatasetTabs\";\r\nimport \"./styles.css\";\r\nimport InfoIcon from \"../../../Components/Icons/AutoML/infopreview.svg\";\r\nimport targetIcon from \"../../../Components/Icons/AutoML/targeticon.svg\";\r\nimport AutoMLCustomisedDatasetDropdown from \"../../../Components/Dropdowns/AutoMLCustomisedDatasetDropdown/AutoMLCustomisedDatasetDropdown\";\r\nimport { Button, message } from \"antd\";\r\nimport AutoMLCustomisedDatasetsMetaTable from \"../../../Components/Tables/AutoMLCustomisedDatasetsMetaTable/AutoMLCustomisedDatasetsMetaTable\";\r\nimport AutoMLCustomisedDatasetsPreviewTable from \"../../../Components/Tables/AutoMLCustomisedDatasetsPreviewTable/AutoMLCustomisedDatasetsPreviewTable\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport { CustomTableContext } from \"../../../Data/Contexts/AutoMLCustomTable/AutoMLCustomTableContext\";\r\nimport axios from \"axios\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport Cliploader from \"../../../Components/Loader/Cliploader\";\r\n\r\nexport default function CustomisedDataset() {\r\n  let { project_id, model_id } = useParams();\r\n  let history = useHistory();\r\n\r\n  const { setCurrentPage } = useContext(PageContext);\r\n  const { CustomTable, setCustomTable } = useContext(CustomTableContext);\r\n  const { Auth } = useContext(AuthContext);\r\n\r\n  const [rendertable, setrendertable] = useState(true);\r\n  const [created, setcreated] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n  const [tab, settab] = useState(\"meta_data\");\r\n  const [target, settarget] = useState({ id: \"\", name: \"\" });\r\n  const [dataset, setdataset] = useState([\r\n    {\r\n      name: \"Customer ID\",\r\n      id: 1,\r\n      data_type: \"Integer\",\r\n      nullable: \"false\",\r\n      missing_values: \"1.5%\",\r\n      invalid_values: \"1.2%\",\r\n      distinct_values: \"1022\",\r\n      correlation: \"126\",\r\n    },\r\n    {\r\n      name: \"Customer Name\",\r\n      id: 2,\r\n      data_type: \"String\",\r\n      nullable: \"true\",\r\n      missing_values: \"2.5%\",\r\n      invalid_values: \"1.4%\",\r\n      distinct_values: \"1452\",\r\n      correlation: \"056\",\r\n    },\r\n    {\r\n      name: \"Customer Address\",\r\n      id: 3,\r\n      data_type: \"String\",\r\n      nullable: \"false\",\r\n      missing_values: \"1.2%\",\r\n      invalid_values: \"2.5%\",\r\n      distinct_values: \"1342\",\r\n      correlation: \"157\",\r\n    },\r\n    {\r\n      name: \"Date of Purchase\",\r\n      id: 4,\r\n      data_type: \"String\",\r\n      nullable: \"true\",\r\n      missing_values: \"2.4%\",\r\n      invalid_values: \"3.1%\",\r\n      distinct_values: \"1410\",\r\n      correlation: \"202\",\r\n    },\r\n    {\r\n      name: \"Quantity\",\r\n      id: 5,\r\n      data_type: \"Integer\",\r\n      nullable: \"true\",\r\n      missing_values: \"2.2%\",\r\n      invalid_values: \"0%\",\r\n      distinct_values: \"1502\",\r\n      correlation: \"111\",\r\n    },\r\n  ]);\r\n\r\n  const [previewrows, setpreviewrows] = useState([\r\n    [\r\n      \"Customer ID\",\r\n      \"Product ID\",\r\n      \"Dept Name\",\r\n      \"Quantity\",\r\n      \"Lorem ipsum\",\r\n      \"Price\",\r\n    ],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n  ]);\r\n\r\n  if (created === false) {\r\n    setcreated(true);\r\n    let temp = [];\r\n    let i = [];\r\n    for (const [key, value] of Object.entries(\r\n      CustomTable.customtable.data[0]\r\n    )) {\r\n      i.push(key);\r\n    }\r\n    temp.push(i);\r\n    CustomTable.customtable.data.map((item, index) => {\r\n      let arr = [];\r\n      for (const [key, value] of Object.entries(item)) {\r\n        arr.push(value);\r\n      }\r\n      temp.push(arr);\r\n    });\r\n    setpreviewrows(temp);\r\n    let temp_array = [];\r\n    //  {\r\n    //   name: \"Customer ID\",\r\n    //   id: 1,\r\n    // data_type: \"Integer\",\r\n    // nullable: \"false\",\r\n    // missing_values: \"1.5%\",\r\n    // invalid_values: \"1.2%\",\r\n    // distinct_values: \"1022\",\r\n    // correlation: \"126\",\r\n    // },\r\n    CustomTable.customtable.meta.forEach((element, index) => {\r\n      temp_array.push({\r\n        name: element.columns,\r\n        id: index,\r\n        data_type: element.dtypes,\r\n        nullable:\r\n          element.nullable === \"True\"\r\n            ? \"true\"\r\n            : element.nullable === \"False\"\r\n            ? \"false\"\r\n            : null,\r\n        missing_values: element.missing_percentage,\r\n        invalid_values: element.invalid_values_percentage,\r\n        distinct_values: element.distinct_values_percentage,\r\n        correlation: \"-\",\r\n        disabled: false,\r\n      });\r\n    });\r\n    setdataset(temp_array);\r\n  }\r\n\r\n  const setvalues = async (target) => {\r\n    setloading(true);\r\n    let FinalObject = {\r\n      company_name: Auth.company_name,\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      target_column: target,\r\n      databucket_name: CustomTable.customtable.bucket.databucket_name,\r\n      dataset_name: CustomTable.customtable.bucket.dataset_name,\r\n    };\r\n    console.log(FinalObject);\r\n    await axios\r\n      .post(`${URL}/automl/find_correlations/`, FinalObject)\r\n      .then(function (response) {\r\n        dataset.forEach((element, index) => {\r\n          if (element.name === target) {\r\n            element.disabled = true;\r\n          } else {\r\n            element.disabled = false;\r\n          }\r\n        });\r\n        dataset.forEach((element) => {\r\n          response.data.forEach((item) => {\r\n            if (item.column === element.name) {\r\n              element.correlation = item.correlation;\r\n            }\r\n          });\r\n        });\r\n        setrendertable(!rendertable);\r\n\r\n        setloading(false);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        console.log(error);\r\n        message.error(\"Server Error\");\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          message.error(error.response.data);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const confirm = () => {\r\n    setCustomTable({\r\n      data: CustomTable.customtable.data,\r\n      meta: CustomTable.customtable.meta,\r\n      bucket: {\r\n        databucket_name: CustomTable.customtable.bucket.databucket_name,\r\n        dataset_name: CustomTable.customtable.bucket.dataset_name,\r\n      },\r\n      target: target.name,\r\n      filtered: dataset,\r\n      l: CustomTable.customtable.l,\r\n    });\r\n    setCurrentPage(\"correlation\");\r\n    history.push({\r\n      pathname: `/automl/projects/${project_id}/models/${model_id}/correlation/`,\r\n      state: {\r\n        detail: \"I am from New link page\",\r\n        page_name: \"automl_customised_datasets\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const setnullable = async (item) => {\r\n    await dataset.forEach((element) => {\r\n      if (element.name === item.name) {\r\n        if (element.nullable === \"true\") {\r\n          element.nullable = \"false\";\r\n        } else {\r\n          element.nullable = \"true\";\r\n        }\r\n      }\r\n    });\r\n    setrendertable(!rendertable);\r\n  };\r\n\r\n  return (\r\n    <div className=\"CustomisedDataset\">\r\n      <h3 className=\"titleBold\">\r\n        {project_id} | <span className=\"subtitle\">{model_id}</span>\r\n      </h3>\r\n      <h3\r\n        style={{\r\n          textAlign: \"left\",\r\n          fontSize: \"20px\",\r\n          fontWeight: \"bold\",\r\n          marginBottom: \"2px\",\r\n        }}\r\n      >\r\n        Target Selection\r\n      </h3>\r\n      <hr\r\n        style={{\r\n          width: \"100%\",\r\n          backgroundColor: \"#E1EEFF\",\r\n          border: \"none\",\r\n          height: \"1px\",\r\n          marginBottom: \"0px\",\r\n        }}\r\n      />\r\n      <div>\r\n        <AutoMLCustomisedDatasetTabs setTab={(val) => settab(val)} />\r\n      </div>\r\n      <div\r\n        className=\"box1\"\r\n        style={\r\n          tab === \"meta_data\"\r\n            ? { display: \"flex\", flexDirection: \"column\", height: \"inherit\" }\r\n            : { display: \"none\" }\r\n        }\r\n      >\r\n        <div style={{ textAlign: \"left\" }}>\r\n          <h3 className=\"rowtitle\">Custom Dataset</h3>\r\n          <ul className=\"custom_row\">\r\n            {dataset.map((d) => (\r\n              <li\r\n                key={d.name}\r\n                className={target.name === d.name ? \"highlighted\" : \"listitem\"}\r\n                style={{ display: \"inline-block\" }}\r\n              >\r\n                <img\r\n                  src={targetIcon}\r\n                  alt=\"targetIcon\"\r\n                  width={13}\r\n                  style={\r\n                    target.name === d.name\r\n                      ? { marginRight: \"5px\", paddingBottom: \"1px\" }\r\n                      : { display: \"none\" }\r\n                  }\r\n                />\r\n                {d.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <h3 className=\"featuretitle\">Feature Target</h3>\r\n          <div style={{ marginBottom: \"20px\" }}>\r\n            <AutoMLCustomisedDatasetDropdown\r\n              data={dataset}\r\n              selected={(target) => {\r\n                settarget({ id: \"id\", name: target });\r\n                setvalues(target);\r\n              }}\r\n              type=\"target\"\r\n            />\r\n          </div>\r\n          {/* <hr\r\n            style={{\r\n              width: \"100%\",\r\n              backgroundColor: \"#E1EEFF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"0px\",\r\n            }}\r\n          /> */}\r\n        </div>\r\n        <div\r\n          style={{\r\n            flexGrow: \"1\",\r\n            height: \"10vh\",\r\n            marginBottom: \"5px\",\r\n            overflowY: \"scroll\",\r\n          }}\r\n        >\r\n          <AutoMLCustomisedDatasetsMetaTable\r\n            data={dataset}\r\n            setnullable={(item) => setnullable(item)}\r\n            render={rendertable}\r\n          />\r\n        </div>\r\n        <Button className=\"generatebutton\" onClick={() => confirm()}>\r\n          Generate Correlation\r\n        </Button>\r\n      </div>\r\n      <div\r\n        className=\"box2\"\r\n        style={\r\n          tab === \"meta_data\"\r\n            ? { display: \"none\" }\r\n            : { display: \"flex\", flexDirection: \"column\", height: \"inherit\" }\r\n        }\r\n      >\r\n        <div style={{ flexGrow: \"1\", overflowY: \"scroll\", height: \"10vh\" }}>\r\n          <p style={{ textAlign: \"left\", color: \"#6d6d6d\", fontSize: \"13px\" }}>\r\n            <img src={InfoIcon} alt=\"info\" width={12} /> Showing data for first\r\n            50 rows only\r\n          </p>\r\n          <AutoMLCustomisedDatasetsPreviewTable\r\n            rows={previewrows}\r\n            target={target.name}\r\n          />\r\n        </div>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        />\r\n        <Button className=\"generatebutton\">Generate Correlation</Button>\r\n      </div>\r\n      <Cliploader loading={loading} />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Tabs\\AutoMLCustomisedDatasetTabs\\AutoMLCustomisedDatasetTabs.js",["499"],"import React from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst AntTabs = withStyles({\r\n  root: {\r\n    borderBottom: \"1px solid #E1EEFF\",\r\n  },\r\n  indicator: {\r\n    backgroundColor: \"#085FAB\",\r\n  },\r\n})(Tabs);\r\n\r\nconst AntTab = withStyles((theme) => ({\r\n  root: {\r\n    textTransform: \"none\",\r\n    minWidth: 72,\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n    marginRight: theme.spacing(4),\r\n    letterSpacing: \"0px\",\r\n    fontSize: \"14px\",\r\n    paddingBottom: \"0px\",\r\n    paddingTop: \"20px\",\r\n    fontFamily: [\r\n      \"-apple-system\",\r\n      \"BlinkMacSystemFont\",\r\n      '\"Segoe UI\"',\r\n      \"Roboto\",\r\n      '\"Helvetica Neue\"',\r\n      \"Arial\",\r\n      \"sans-serif\",\r\n      '\"Apple Color Emoji\"',\r\n      '\"Segoe UI Emoji\"',\r\n      '\"Segoe UI Symbol\"',\r\n    ].join(\",\"),\r\n    \"&:hover\": {\r\n      color: \"grey\",\r\n      opacity: 1,\r\n    },\r\n    \"&$selected\": {\r\n      color: \"black\",\r\n      fontWeight: \"700\",\r\n      fontFamily: \"Lato\",\r\n    },\r\n    \"&:focus\": {\r\n      color: \"black\",\r\n    },\r\n  },\r\n  selected: {},\r\n}))((props) => <Tab disableRipple {...props} />);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"60px\",\r\n    marginTop: \"-14px\",\r\n  },\r\n  padding: {\r\n    padding: \"5px\",\r\n  },\r\n  demo1: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  demo2: {\r\n    backgroundColor: \"#2e1534\",\r\n  },\r\n}));\r\n\r\nexport default function AutoMLCustomisedDatasetTabs(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n\r\n    switch (newValue) {\r\n      case 0:\r\n        props.setTab(\"meta_data\");\r\n        break;\r\n      case 1:\r\n        props.setTab(\"table_preview\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.demo1}>\r\n        <AntTabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"ant example\"\r\n          scrollButtons=\"on\"\r\n        >\r\n          <AntTab label=\"Meta Data\" />\r\n          <AntTab label=\"Table Preview\" />\r\n        </AntTabs>\r\n      </div>\r\n      {/* <div className={classes.demo2}>\r\n        <StyledTabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"styled tabs example\"\r\n        >\r\n          <StyledTab label=\"Workflows\" />\r\n          <StyledTab label=\"Datasets\" />\r\n          <StyledTab label=\"Connections\" />\r\n        </StyledTabs>\r\n        <Typography className={classes.padding} />\r\n      </div> */}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Dropdowns\\AutoMLCustomisedDatasetDropdown\\AutoMLCustomisedDatasetDropdown.js",[],"D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLCustomisedDatasetsMetaTable\\AutoMLCustomisedDatasetsMetaTable.js",["500"],"import React from \"react\";\r\nimport { Switch, Tooltip } from \"antd\";\r\nimport \"./styles.css\";\r\n\r\nexport default function AutoMLCustomisedDatasetsMetaTable(props) {\r\n  const getrows = () => {\r\n    return props.data.map((item, index) => {\r\n      return (\r\n        <tr key={index}>\r\n          <td>{item.name} </td>\r\n          <td>{item.data_type}</td>\r\n          <td>\r\n            <Switch\r\n              checked={\r\n                item.disabled === true\r\n                  ? false\r\n                  : item.nullable === \"true\"\r\n                  ? true\r\n                  : false\r\n              }\r\n              disabled={item.disabled}\r\n              onClick={() => props.setnullable(item)}\r\n            />\r\n          </td>\r\n          <td\r\n            style={\r\n              item.missing_values === \"0\" || item.missing_values === 0\r\n                ? { color: \"#5BCEAE\" }\r\n                : { color: \"#EC547A\" }\r\n            }\r\n          >\r\n            {item.missing_values}\r\n          </td>\r\n          <td\r\n            style={\r\n              item.invalid_values === \"0\" || item.invalid_values === 0\r\n                ? { color: \"#5BCEAE\" }\r\n                : { color: \"#EC547A\" }\r\n            }\r\n          >\r\n            {item.invalid_values}\r\n          </td>\r\n          <td>{item.distinct_values}</td>\r\n          <td>{item.correlation}</td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"AutoMLCustomisedDatasetsMetaTable\">\r\n      <table>\r\n        <thead></thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              Column{\" \"}\r\n              {/* <Tooltip title=\"prompt text\">\r\n                {\" \"}\r\n                <span>i</span>{\" \"}\r\n              </Tooltip> */}\r\n            </td>\r\n            <td>Data Type</td>\r\n            <td>Nullable</td>\r\n            <td>Missing Values (%)</td>\r\n            <td>Invalid Values (%)</td>\r\n            <td>Distinct Values (%)</td>\r\n            <td>Correlation with Target</td>\r\n          </tr>\r\n          {getrows()}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Tables\\AutoMLCustomisedDatasetsPreviewTable\\AutoMLCustomisedDatasetsPreviewTable.js",[],"D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLSaveDatasetModal\\AutoMLSaveDatasetModal.js",["501","502","503","504","505","506","507","508","509"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Modal, Button, Row, Col, message } from \"antd\";\r\nimport ShareAvatar from \"../../Images/AutoML/shareAvatar.svg\";\r\nimport \"./styles.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\nimport AutoMLExistingDatabucketCard from \"../../Cards/AutoMLExistingDatabucketCard/AutoMLExistingDatabucketCard\";\r\nimport fileIcon from \"../../Icons/AutoML/SaveDatabucket/fileicon.svg\";\r\nimport { PlusOutlined } from \"@ant-design/icons\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport dataBucket from \"../../Icons/AutoML/SaveDatabucket/databucket.svg\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { SelectedDatasetsContext } from \"../../../Data/Contexts/AutoMLSelectedDatasetsCart/AutoMLSelectedDatasetsCart\";\r\nimport axios from \"axios\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport { ModelContext } from \"../../../Data/Contexts/AutoMLModelContext/AutoMLModelContext\";\r\nimport { ProjectContext } from \"../../../Data/Contexts/AutoMLProject/AutoMLProjectContext\";\r\nimport Cliploader from \"../../Loader/Cliploader\";\r\nimport { CustomTableContext } from \"../../../Data/Contexts/AutoMLCustomTable/AutoMLCustomTableContext\";\r\nimport AutoMLGeneratingDatasetLoader from \"../../Loader/AutoMLGeneratingDatasetLoader/AutoMLGeneratingDatasetLoader\";\r\n\r\nexport default function AutoMLSaveDatasetModal(props) {\r\n  const [selected, setselected] = useState(null);\r\n  let { project_id, model_id } = useParams();\r\n\r\n  const [newdatabucket, setnewdatabucket] = useState(false);\r\n  const [newdatabucketname, setnewdatabucketname] = useState(\"\");\r\n  const [datasetname, setdatasetname] = useState(\"\");\r\n  const [datasetdesc, setdatasetdesc] = useState(\"\");\r\n  const [dataset_name_error, setdataset_name_error] = useState(null);\r\n  const [enable, setenable] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n  const [showloading, setshowloading] = useState(false);\r\n\r\n  //Final Object\r\n  const [Sectors, setSectors] = useState({});\r\n  const [DeletedColumns, setDeletedColumns] = useState({});\r\n\r\n  const [created, setcreated] = useState(false);\r\n  const [renderlist, setrenderlist] = useState(true);\r\n\r\n  let history = useHistory();\r\n  const { setCurrentPage } = useContext(PageContext);\r\n  const { Auth } = useContext(AuthContext);\r\n  const { SelectedDatasets } = useContext(SelectedDatasetsContext);\r\n  const { Model } = useContext(ModelContext);\r\n  const { Project } = useContext(ProjectContext);\r\n  const { setCustomTable } = useContext(CustomTableContext);\r\n\r\n  useEffect(() => {\r\n    if (props.isModalVisible === true) {\r\n      //Call Loaddatabuckets api\r\n      async function fetchData() {\r\n        let temp = [];\r\n        const myData = {\r\n          company_name: Auth.company_name,\r\n          company_id: Auth.company_id,\r\n          user_id: Auth.user_id,\r\n        };\r\n        const formData = serialize(myData);\r\n        setloading(true);\r\n        await axios({\r\n          method: \"post\",\r\n          url: `${URL}/automl/load_databuckets/`,\r\n          data: formData,\r\n          headers: {\r\n            \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n            setloading(false);\r\n            console.log(response);\r\n            for (const [key, value] of Object.entries(response.data)) {\r\n              let obj = { name: key, datasets: value };\r\n              temp.push(obj);\r\n            }\r\n          })\r\n          .catch(function (error) {\r\n            setloading(false);\r\n            console.log(error);\r\n          });\r\n        setdatabuckets(temp);\r\n      }\r\n      fetchData();\r\n\r\n      //Set Sectors Object\r\n      let tempsectors = {};\r\n      SelectedDatasets.datasets.forEach((element) => {\r\n        if (tempsectors[`${element.type}`] === undefined) {\r\n          tempsectors[`${element.type}`] = {};\r\n          tempsectors[`${element.type}`][`${element.sector}`] = [\r\n            element.final_name,\r\n          ];\r\n        } else {\r\n          if (\r\n            tempsectors[`${element.type}`][`${element.sector}`] === undefined\r\n          ) {\r\n            tempsectors[`${element.type}`][`${element.sector}`] = [\r\n              element.final_name,\r\n            ];\r\n          } else {\r\n            tempsectors[`${element.type}`][`${element.sector}`].push(\r\n              element.final_name\r\n            );\r\n          }\r\n        }\r\n      });\r\n      setSectors(tempsectors);\r\n\r\n      //Set DeletedColumns Array\r\n      let deletedcols = {};\r\n      SelectedDatasets.datasets.forEach((item) => {\r\n        let deleted = [];\r\n        item.columns.forEach((element) => {\r\n          if (!item.selectedcolumns.includes(element)) {\r\n            deleted.push(element);\r\n          }\r\n        });\r\n        deletedcols[`${item.name}`] = deleted;\r\n      });\r\n      setDeletedColumns(deletedcols);\r\n    } else {\r\n      setcreated(false);\r\n      setselected(null);\r\n      setnewdatabucketname(\"\");\r\n      setnewdatabucket(false);\r\n    }\r\n  }, [props.isModalVisible]);\r\n\r\n  const savedataset = async () => {\r\n    let type = \"\";\r\n    if (\r\n      databuckets[selected].name === databuckets[databuckets.length - 1].name\r\n    ) {\r\n      type = \"new\";\r\n    } else {\r\n      type = \"old\";\r\n    }\r\n    let FinalObject = {\r\n      company_name: Auth.company_name,\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      project: Project.name,\r\n      model: Model.model.name,\r\n      datasets: Sectors,\r\n      del_cols: DeletedColumns,\r\n      link_tables: props.links,\r\n      databucket_name: databuckets[selected].name,\r\n      databucket_type: type,\r\n      dataset_name: datasetname,\r\n      dataset_description: datasetdesc,\r\n      databucket_space: \"p\",\r\n    };\r\n    console.log(FinalObject);\r\n    const formData = serialize(FinalObject);\r\n    setshowloading(true);\r\n    await axios\r\n      .post(`${URL}/automl/generate_dataset/`, FinalObject)\r\n      .then(function (response) {\r\n        console.log(response);\r\n        setshowloading(false);\r\n        setCurrentPage(\"metascreen\");\r\n        let temp = [];\r\n        let l = response.data.data.length;\r\n        temp = response.data.data.slice(0, 50);\r\n        console.log(temp);\r\n        console.log(response.data.metadata);\r\n        setCustomTable({\r\n          data: temp,\r\n          meta: response.data.metadata,\r\n          bucket: {\r\n            databucket_name: databuckets[selected].name,\r\n            dataset_name: datasetname,\r\n          },\r\n          target: \"\",\r\n          filtered: null,\r\n          length: l,\r\n        });\r\n        history.push({\r\n          pathname: `/automl/projects/${project_id}/models/${model_id}/customised_dataset/`,\r\n          state: {\r\n            detail: \"I am from New link page\",\r\n            page_name: \"automl_customised_datasets\",\r\n          },\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        setshowloading(false);\r\n        console.log(error);\r\n        message.error(\"Server Error\");\r\n      });\r\n  };\r\n\r\n  const savedatasetapi = () => {\r\n    if (newdatabucketname === \"\") {\r\n      setnewdatabucket(false);\r\n    } else {\r\n      setcreated(true);\r\n      //sendnewdatabucket to api\r\n\r\n      //\r\n      setnewdatabucket(false);\r\n      console.log(databuckets);\r\n      let temp = databuckets;\r\n      temp.push({ name: newdatabucketname, datasets: [] });\r\n      setdatabuckets(temp);\r\n      setnewdatabucketname(\"\");\r\n      setnewdatabucket(false);\r\n    }\r\n  };\r\n\r\n  const validatekey = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      savedatasetapi();\r\n    }\r\n  };\r\n\r\n  //Handling Response\r\n  let response = {\r\n    oilandgas: [\r\n      \"Oil and Gas Refinery\",\r\n      \"Oil and Gas Exploration\",\r\n      \"Oil and Gas Exploration\",\r\n    ],\r\n    cement: [\"Cement Refinery\", \"Cement Exploration\", \"Cement Exploration\"],\r\n    banks: [\"HBL\", \"AL-Falah\", \"Habib Bank\", \"Summit Bank\", \"UBL\"],\r\n  };\r\n  let temp = [];\r\n  for (const [key, value] of Object.entries(response)) {\r\n    let obj = { name: key, datasets: value };\r\n    temp.push(obj);\r\n  }\r\n\r\n  const [databuckets, setdatabuckets] = useState([]);\r\n\r\n  const validatename = async (e) => {\r\n    setenable(true);\r\n    setdataset_name_error(null);\r\n    document.getElementById(\"dname\").style.borderColor = \"#40a9ff\";\r\n    await setdatasetname(e.target.value);\r\n    var format = /[!@#$%^&*()+\\=\\[\\]{};':\"\\\\|,<>\\/?]+/;\r\n    if (format.test(e.target.value) || format.test(e.target.value)) {\r\n      // let textfield = document.getElementById(\"dname\");\r\n      // textfield.style.backgroundColor = \"red\";\r\n      setenable(false);\r\n      setdataset_name_error(\"Model Name contains special characters\");\r\n      document.getElementById(\"dname\").style.borderColor = \"#EC547A\";\r\n      document.getElementById(\"dname\").style.boxShadow = \"none\";\r\n    } else {\r\n      setenable(true);\r\n      document.getElementById(\"dname\").style.borderColor = \"#40a9ff\";\r\n    }\r\n    let name = \"\";\r\n    if (e.target.value.length === 0) {\r\n      name = e.target.value;\r\n    } else {\r\n      name = e.target.value;\r\n    }\r\n    if (e.target.value.length < 3) {\r\n      setenable(false);\r\n      setdataset_name_error(\"Dataset Name should be 3 Characters Minimum\");\r\n      document.getElementById(\"dname\").style.borderColor = \"#EC547A\";\r\n      document.getElementById(\"dname\").style.boxShadow = \"none\";\r\n    }\r\n    if (name[0] === \" \" || name[0] === \"_\" || name[0] === \"-\") {\r\n      setenable(false);\r\n      setdataset_name_error(\r\n        \"Dataset Name first character cannot be a special character\"\r\n      );\r\n      document.getElementById(\"dname\").style.borderColor = \"#EC547A\";\r\n      document.getElementById(\"dname\").style.boxShadow = \"none\";\r\n    }\r\n  };\r\n\r\n  const removecreated = () => {\r\n    setselected(null);\r\n    setcreated(false);\r\n    setnewdatabucket(false);\r\n    setnewdatabucketname(\"\");\r\n    let temp = databuckets;\r\n    temp.pop();\r\n    setdatabuckets(temp);\r\n  };\r\n\r\n  return (\r\n    <div className=\"AutoMLSaveDatasetModal\">\r\n      <Modal\r\n        width={\"80%\"}\r\n        style={{ top: 20 }}\r\n        wrapClassName=\"DatasetsModal\"\r\n        visible={props.isModalVisible}\r\n        onOk={props.handleOk}\r\n        onCancel={props.handleCancel}\r\n        footer={false}\r\n        closable={false}\r\n        destroyOnClose\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <AutoMLGeneratingDatasetLoader\r\n          isModalVisible={showloading}\r\n          handleCancel={() => setshowloading(false)}\r\n        />\r\n        <Cliploader loading={loading} />\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"white\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"0px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"bold\",\r\n                color: \"black\",\r\n                fontSize: \"18px\",\r\n              }}\r\n            >\r\n              Save Dataset\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            height: \"100%\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"left\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <Row\r\n            justify=\"space-between\"\r\n            style={{\r\n              flexGrow: \"1\",\r\n              marginBottom: \"20px\",\r\n              height: \"40vh\",\r\n              overflow: \"scroll\",\r\n            }}\r\n          >\r\n            <Col\r\n              style={{\r\n                backgroundColor: \"#F5FAFF\",\r\n                padding: \"20px\",\r\n                borderRadius: \"18px\",\r\n                width: \"49%\",\r\n              }}\r\n            >\r\n              <h3 className=\"ModalHeading\">Data Buckets</h3>\r\n\r\n              {databuckets\r\n                ? databuckets.map((item, index) => (\r\n                    <AutoMLExistingDatabucketCard\r\n                      key={index}\r\n                      name={item.name}\r\n                      id={index}\r\n                      highlight={selected}\r\n                      selected={(id) => {\r\n                        console.log(id);\r\n                        setselected(id);\r\n                      }}\r\n                      length={databuckets.length}\r\n                      created={created}\r\n                      remove={() => removecreated()}\r\n                    />\r\n                  ))\r\n                : null}\r\n              <div\r\n                className=\"newdatasetbutton\"\r\n                style={\r\n                  created\r\n                    ? { display: \"none\" }\r\n                    : {\r\n                        display: \"inline-block\",\r\n                        marginRight: \"10px\",\r\n                        marginBottom: \"10px\",\r\n                        marginTop: \"-10px\",\r\n                      }\r\n                }\r\n              >\r\n                {newdatabucket === false ? (\r\n                  <Button\r\n                    style={{\r\n                      width: \"100px\",\r\n                      height: \"60px\",\r\n                      top: \"10px\",\r\n                      borderColor: \"#085FAB\",\r\n                      borderRadius: \"10px\",\r\n                      backgroundColor: \"inherit\",\r\n                    }}\r\n                    onClick={() => setnewdatabucket(true)}\r\n                    type=\"dashed\"\r\n                    icon={\r\n                      <PlusOutlined\r\n                        style={{\r\n                          fontSize: \"30px\",\r\n                          fontWeight: \"700\",\r\n                          color: \"#085FAB\",\r\n                          paddingTop: \"5px\",\r\n                        }}\r\n                      />\r\n                    }\r\n                  ></Button>\r\n                ) : (\r\n                  <div className=\"newdatabucket\">\r\n                    <div\r\n                      className=\"box\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        textAlign: \"center\",\r\n                        borderRadius: \"10px\",\r\n                        height: \"60px\",\r\n                        width: \"100px\",\r\n                        border: \"1px solid #085fab\",\r\n                        boxSizing: \"border-box\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={dataBucket}\r\n                        alt={\"Data-bucket\"}\r\n                        style={{\r\n                          width: \"20px\",\r\n                          display: \"block\",\r\n                          margin: \"auto\",\r\n                        }}\r\n                      />\r\n                      <input\r\n                        style={{\r\n                          height: \"15px\",\r\n                          padding: \"0px\",\r\n                          margin: \"4px\",\r\n                          paddingLeft: \"10px\",\r\n                          fontSize: \"11px\",\r\n                        }}\r\n                        maxLength={30}\r\n                        // onBlur={() => savedatasetapi()}\r\n                        onKeyDown={(e) => validatekey(e)}\r\n                        value={newdatabucketname}\r\n                        onChange={(e) => setnewdatabucketname(e.target.value)}\r\n                        autoFocus\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </Col>\r\n            <Col\r\n              style={{\r\n                backgroundColor: \"#F5FAFF\",\r\n                padding: \"20px\",\r\n                borderRadius: \"18px\",\r\n                width: \"49%\",\r\n              }}\r\n            >\r\n              <h3 className=\"ModalHeading\" style={{ marginBottom: \"10px\" }}>\r\n                {selected !== null ? databuckets[selected].name : \"Datasets\"}\r\n              </h3>\r\n              {selected !== null\r\n                ? databuckets[selected].datasets.map((item, index) => (\r\n                    <div style={{ marginBottom: \"12px\" }} key={index}>\r\n                      <img\r\n                        src={fileIcon}\r\n                        alt=\"FileIcon\"\r\n                        style={{ marginRight: \"10px\", width: \"18px\" }}\r\n                      />\r\n                      <div\r\n                        style={{\r\n                          fontWeight: \"normal\",\r\n                          display: \"inline-block\",\r\n                        }}\r\n                      >\r\n                        {item}\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                : null}\r\n              <div></div>\r\n            </Col>\r\n          </Row>\r\n          <label htmlFor=\"dname\">Dataset Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"dname\"\r\n            autoComplete=\"off\"\r\n            name=\"dname\"\r\n            maxLength={30}\r\n            value={datasetname}\r\n            onChange={(e) => validatename(e)}\r\n            placeholder=\"Enter dataset name...\"\r\n          ></input>\r\n          <p\r\n            style={\r\n              dataset_name_error === null\r\n                ? { display: \"none\" }\r\n                : { color: \"#EC547A\", fontSize: \"14px\", fontFamily: \"Lato\" }\r\n            }\r\n          >\r\n            *{dataset_name_error}\r\n          </p>\r\n          <label htmlFor=\"ddesc\">\r\n            Dataset Description\r\n            <span\r\n              style={{\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                color: \"#90A8BE\",\r\n                fontStyle: \"italic\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              (optional)\r\n            </span>{\" \"}\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"ddesc\"\r\n            name=\"ddesc\"\r\n            autoComplete=\"off\"\r\n            placeholder=\"Enter dataset description...\"\r\n          ></input>\r\n          <br />\r\n          <div style={{ marginBottom: \"5px\" }}>\r\n            <Button\r\n              style={\r\n                selected !== null && enable\r\n                  ? {\r\n                      width: \"130px\",\r\n                      height: \"40px\",\r\n                      backgroundColor: \"#085FAB\",\r\n                      fontFamily: \"Lato\",\r\n                      fontSize: \"16px\",\r\n                      fontWeight: \"bold\",\r\n                      letterSpacing: \"1.5px\",\r\n                      color: \"white\",\r\n                      border: \"none\",\r\n                      borderRadius: \"65px\",\r\n                      borderColor: \"none\",\r\n                    }\r\n                  : {\r\n                      opacity: \"0.3\",\r\n                      width: \"130px\",\r\n                      height: \"40px\",\r\n                      backgroundColor: \"#085FAB\",\r\n                      fontFamily: \"Lato\",\r\n                      fontSize: \"16px\",\r\n                      fontWeight: \"bold\",\r\n                      letterSpacing: \"1.5px\",\r\n                      color: \"white\",\r\n                      border: \"none\",\r\n                      borderRadius: \"65px\",\r\n                      borderColor: \"none\",\r\n                    }\r\n              }\r\n              disabled={enable && selected !== null ? false : true}\r\n              onClick={() => savedataset()}\r\n            >\r\n              Save\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Cards\\AutoMLExistingDatabucketCard\\AutoMLExistingDatabucketCard.js",[],"D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLProject\\AutoMLProjectContext.js",["510","511"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst ProjectContext = React.createContext();\r\n\r\nclass ProjectProvider extends Component {\r\n  state = {\r\n    name: JSON.parse(localStorage.getItem(\"Project\"))\r\n      ? JSON.parse(localStorage.getItem(\"Project\")).name\r\n      : null,\r\n    type: JSON.parse(localStorage.getItem(\"Project\"))\r\n      ? JSON.parse(localStorage.getItem(\"Project\")).type\r\n      : null,\r\n    data: JSON.parse(localStorage.getItem(\"Project\"))\r\n      ? JSON.parse(localStorage.getItem(\"Project\")).desc\r\n      : null,\r\n    user: JSON.parse(localStorage.getItem(\"Project\"))\r\n      ? JSON.parse(localStorage.getItem(\"Project\")).user\r\n      : null,\r\n  };\r\n\r\n  setProject = (value) => {\r\n    this.setState({\r\n      name: value.name,\r\n      type: value.type,\r\n      data: value.desc,\r\n      user: value.user,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"Project\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ProjectContext.Provider\r\n        value={{ Project: this.state, setProject: this.setProject }}\r\n      >\r\n        {this.props.children}\r\n      </ProjectContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst ProjectConsumer = ProjectContext.Consumer;\r\n\r\nexport { ProjectProvider, ProjectContext };\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLDeleteProjectModal\\AutoMLDeleteProjectModal.js",[],"D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLPageState\\AutoMLPageStateContext.js",["512","513"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst PageContext = React.createContext();\r\n\r\nclass PageProvider extends Component {\r\n  state = {\r\n    all: {\r\n      projects: true,\r\n      models: false,\r\n      selectdatasets: false,\r\n      selecteddatasets: false,\r\n      datasetprocessing: false,\r\n      linking: false,\r\n      metascreen: false,\r\n      correlation: false,\r\n      modeltype: false,\r\n    },\r\n  };\r\n\r\n  setCurrentPage = (value) => {\r\n    let temp = this.state.all;\r\n    temp[`${value}`] = true;\r\n    this.setState((prevState) => ({\r\n      all: temp,\r\n    }));\r\n  };\r\n\r\n  setPageFalse = (value) => {\r\n    console.log(this.state);\r\n    let temp = this.state.all;\r\n    temp[`${value}`] = false;\r\n    this.setState((prevState) => ({\r\n      all: temp,\r\n    }));\r\n  };\r\n  CanGoNext = () => {\r\n    return false;\r\n  };\r\n  CanGoPrev = () => {\r\n    return false;\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"Page\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PageContext.Provider\r\n        value={{\r\n          pages: this.state,\r\n          setCurrentPage: this.setCurrentPage,\r\n          CanGoNext: this.CanGoNext,\r\n          CanGoPrev: this.CanGoPrev,\r\n          setPageFalse: this.setPageFalse,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </PageContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst PageConsumer = PageContext.Consumer;\r\n\r\nexport { PageProvider, PageContext };\r\n","D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLModelContext\\AutoMLModelContext.js",["514","515"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst ModelContext = React.createContext();\r\n\r\nclass ModelProvider extends Component {\r\n  state = {\r\n    model: JSON.parse(localStorage.getItem(\"Model\"))\r\n      ? JSON.parse(localStorage.getItem(\"Model\")).model\r\n      : null,\r\n    type: JSON.parse(localStorage.getItem(\"Model\"))\r\n      ? JSON.parse(localStorage.getItem(\"Model\")).type\r\n      : null,\r\n    allmodels: JSON.parse(localStorage.getItem(\"Model\"))\r\n      ? JSON.parse(localStorage.getItem(\"Model\")).allmodels\r\n      : null,\r\n  };\r\n\r\n  setModel = (value) => {\r\n    this.setState({\r\n      model: value,\r\n    });\r\n  };\r\n  setModelList = (list) => {\r\n    this.setState({\r\n      allmodels: list,\r\n    });\r\n  };\r\n  setModelsType = (value) => {\r\n    this.setState({\r\n      type: value,\r\n    });\r\n  };\r\n\r\n  addModel = (val) => {\r\n    let temp = this.state.allmodels;\r\n    temp.push(val);\r\n  };\r\n\r\n  removeModel = (name) => {\r\n    let temp = this.state.allmodels;\r\n    let arr = [];\r\n    temp.forEach((element) => {\r\n      if (name !== element.model_name) {\r\n        arr.push(element);\r\n      }\r\n    });\r\n    this.setState({\r\n      allmodels: arr,\r\n    });\r\n    console.log(arr);\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"Model\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ModelContext.Provider\r\n        value={{\r\n          Model: this.state,\r\n          setModel: this.setModel,\r\n          setModelList: this.setModelList,\r\n          setModelsType: this.setModelsType,\r\n          removeModel: this.removeModel,\r\n          addModel: this.addModel,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </ModelContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst ModelConsumer = ModelContext.Consumer;\r\n\r\nexport { ModelProvider, ModelContext };\r\n","D:\\Work\\beyond-data\\src\\Config\\config.js",[],"D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLAuthContext\\AutoMLAuthContext.js",["516","517"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nclass AuthProvider extends Component {\r\n  state = {\r\n    user_id: JSON.parse(localStorage.getItem(\"Auth\"))\r\n      ? JSON.parse(localStorage.getItem(\"Auth\")).user_id\r\n      : null,\r\n    company_id: JSON.parse(localStorage.getItem(\"Auth\"))\r\n      ? JSON.parse(localStorage.getItem(\"Auth\")).company_id\r\n      : null,\r\n    company_name: JSON.parse(localStorage.getItem(\"Auth\"))\r\n      ? JSON.parse(localStorage.getItem(\"Auth\")).company_name\r\n      : null,\r\n  };\r\n\r\n  setAuth = (value) => {\r\n    this.setState({\r\n      user_id: value.user_id,\r\n      company_id: value.company_id,\r\n      company_name: value.company_name,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"Auth\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AuthContext.Provider\r\n        value={{\r\n          Auth: this.state,\r\n          setAuth: this.setAuth,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </AuthContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst AuthConsumer = AuthContext.Consumer;\r\n\r\nexport { AuthProvider, AuthContext };\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLDeleteModelModal\\AutoMLDeleteModelModal.js",[],"D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLSelectedDatasetsCart\\AutoMLSelectedDatasetsCart.js",["518","519"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst SelectedDatasetsContext = React.createContext();\r\n\r\nclass SelectedDatasetsProvider extends Component {\r\n  state = {\r\n    datasets: JSON.parse(localStorage.getItem(\"SelectedDatasets\"))\r\n      ? JSON.parse(localStorage.getItem(\"SelectedDatasets\")).datasets\r\n      : [],\r\n    // financial_datasets: JSON.parse(localStorage.getItem(\"SelectedDatasets\"))\r\n    //   ? JSON.parse(localStorage.getItem(\"SelectedDatasets\")).financial_datasets\r\n    //   : [],\r\n    // trading_datasets: JSON.parse(localStorage.getItem(\"SelectedDatasets\"))\r\n    //   ? JSON.parse(localStorage.getItem(\"SelectedDatasets\")).trading_datasets\r\n    //   : [],\r\n    // industrial_datasets: JSON.parse(localStorage.getItem(\"SelectedDatasets\"))\r\n    //   ? JSON.parse(localStorage.getItem(\"SelectedDatasets\")).industrial_datasets\r\n    //   : [],\r\n    // economical_datasets: JSON.parse(localStorage.getItem(\"SelectedDatasets\"))\r\n    //   ? JSON.parse(localStorage.getItem(\"SelectedDatasets\")).economical_datasets\r\n    //   : [],\r\n    // my_datasets: JSON.parse(localStorage.getItem(\"SelectedDatasets\"))\r\n    //   ? JSON.parse(localStorage.getItem(\"SelectedDatasets\")).my_datasets\r\n    //   : [],\r\n  };\r\n\r\n  setSelectedDatasets = (value, type) => {\r\n    let temp = this.state.datasets;\r\n    temp.push(value);\r\n    this.setState({\r\n      datasets: temp,\r\n    });\r\n  };\r\n\r\n  updatecompanies = (value, tab) => {\r\n    let temp = this.state.datasets;\r\n    temp.forEach((element) => {\r\n      if (element.name === value.name && element.type === tab) {\r\n        element.selectedcompanies = value.selectedcompanies;\r\n      }\r\n    });\r\n    this.setState({\r\n      datasets: temp,\r\n    });\r\n  };\r\n\r\n  updatecolumns = (value, tab) => {\r\n    console.log(value);\r\n    let temp = this.state.datasets;\r\n    temp.forEach((element) => {\r\n      if (element.name === value.name && element.type === tab) {\r\n        element.selectedcolumns = value.selectedcolumns;\r\n        element.showncolumns = value.showncolumns;\r\n      }\r\n    });\r\n    this.setState({\r\n      datasets: temp,\r\n    });\r\n  };\r\n\r\n  deletedataset = (value, tab) => {\r\n    let temp = this.state.datasets;\r\n    let i = null;\r\n    temp.forEach((element, index) => {\r\n      if (value.name === element.name && element.type === tab) {\r\n        i = index;\r\n      }\r\n    });\r\n    temp.splice(i, 1);\r\n    this.setState({\r\n      datasets: temp,\r\n    });\r\n  };\r\n\r\n  clearcart = () => {\r\n    console.log(\"cleared\");\r\n    this.setState({\r\n      datasets: [],\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"SelectedDatasets\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <SelectedDatasetsContext.Provider\r\n        value={{\r\n          SelectedDatasets: this.state,\r\n          setSelectedDatasets: this.setSelectedDatasets,\r\n          clearcart: this.clearcart,\r\n          updatecompanies: this.updatecompanies,\r\n          deletedataset: this.deletedataset,\r\n          updatecolumns: this.updatecolumns,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </SelectedDatasetsContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst SelectedDatasetsConsumer = SelectedDatasetsContext.Consumer;\r\n\r\nexport { SelectedDatasetsProvider, SelectedDatasetsContext };\r\n","D:\\Work\\beyond-data\\src\\Components\\ErrorScreens\\Error404.js",[],"D:\\Work\\beyond-data\\src\\Components\\Loader\\Cliploader.js",["520"],"import React, { useEffect, useState } from \"react\";\r\n// import PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { GuardSpinner } from \"react-spinners-kit\";\r\nimport { css } from \"@emotion/react\";\r\nimport { Button } from \"antd\";\r\nimport \"./styles.css\";\r\n\r\nexport default function Cliploader(props) {\r\n  const override = css`\r\n    display: block;\r\n    margin: 0 auto;\r\n    border-color: #085fab;\r\n    margin-top: 35vh;\r\n    border-width: 10px;\r\n  `;\r\n\r\n  const [showbutton, setshowbutton] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setshowbutton(false);\r\n    setTimeout(() => {\r\n      setshowbutton(true);\r\n    }, 30000);\r\n  }, [props.loading]);\r\n\r\n  return (\r\n    <div\r\n      className=\"ClipLoader\"\r\n      style={\r\n        props.loading\r\n          ? {\r\n              background: \"rgba(255, 255, 255, 0.1)\",\r\n              backdropFilter: \"blur(10px)\",\r\n              // opacity: \"0.3\",\r\n              // background: \"#000\",\r\n              width: \"100%\",\r\n              height: \"100%\",\r\n              zIndex: \"10\",\r\n              top: \"0\",\r\n              left: \"0\",\r\n              position: \"fixed\",\r\n            }\r\n          : { display: \"none\" }\r\n      }\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"block\",\r\n          margin: \"0 auto\",\r\n          borderColor: \"#085fab\",\r\n          marginTop: \"35vh\",\r\n          marginBottom: \"10vh\",\r\n          marginLeft: \"50%\",\r\n          borderWidth: \"10px\",\r\n        }}\r\n      >\r\n        <GuardSpinner\r\n          frontColor=\"#085fab\"\r\n          backColor=\"#e1eeff\"\r\n          loading={props.loading}\r\n          // css={override}\r\n          size={45}\r\n        />\r\n      </div>\r\n      <Button\r\n        className=\"cancelButton\"\r\n        style={showbutton === false ? { display: \"none\" } : null}\r\n        onClick={props.handleCancel}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\Correlation\\CorrelationScreen.js",["521","522","523","524","525","526","527","528","529","530","531","532"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\nimport Chart from \"chart.js\";\r\nimport { Button, message } from \"antd\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { CustomTableContext } from \"../../../Data/Contexts/AutoMLCustomTable/AutoMLCustomTableContext\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { ProjectContext } from \"../../../Data/Contexts/AutoMLProject/AutoMLProjectContext\";\r\nimport { ModelContext } from \"../../../Data/Contexts/AutoMLModelContext/AutoMLModelContext\";\r\nimport axios from \"axios\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport Cliploader from \"../../../Components/Loader/Cliploader\";\r\nimport AutoMLModelTrainingLoader from \"../../../Components/Loader/AutoMLModelTrainingLoader/AutoMLModelTrainingLoader\";\r\n\r\nexport default function CorrelationScreen() {\r\n  const [meta, setmeta] = useState({\r\n    totalentries: \"1400\",\r\n    missingvals: \"08\",\r\n    targetcols: \"08\",\r\n    targetfeature: \"05\",\r\n  });\r\n  const [data, setdata] = useState({\r\n    labels: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"],\r\n    points: [12, 19, 3, 5, 2, 3, 20, 3, 5, 6, 2, 1],\r\n  });\r\n  const [rendered, setrendered] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n\r\n  const [ChartRef, setChartRef] = useState(React.createRef());\r\n\r\n  let history = useHistory();\r\n  let { project_id, model_id } = useParams();\r\n  const { setCurrentPage } = useContext(PageContext);\r\n  const { CustomTable } = useContext(CustomTableContext);\r\n  const { Auth } = useContext(AuthContext);\r\n  const { Project } = useContext(ProjectContext);\r\n  const { Model } = useContext(ModelContext);\r\n\r\n  if (rendered === false) {\r\n    let label = [];\r\n    let points = [];\r\n    CustomTable.customtable.filtered.forEach((element) => {\r\n      label.push(element.name);\r\n      points.push(element.correlation);\r\n    });\r\n    setdata({ labels: label, points: points });\r\n    setrendered(true);\r\n  }\r\n\r\n  useEffect(() => {\r\n    var ctx = ChartRef.current.getContext(\"2d\");\r\n    var myChart = new Chart(ctx, {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: data.labels,\r\n        datasets: [\r\n          {\r\n            label: \"Correlation\",\r\n            data: data.points,\r\n            backgroundColor: \"#e1eeff\",\r\n            borderColor: \"#085fab\",\r\n            borderWidth: 1,\r\n          },\r\n        ],\r\n      },\r\n      options: {\r\n        responsive: false,\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              ticks: {\r\n                maxRotation: 90,\r\n                minRotation: 80,\r\n              },\r\n              gridLines: {\r\n                offsetGridLines: false,\r\n              },\r\n            },\r\n          ],\r\n          yAxes: [\r\n            {\r\n              ticks: {\r\n                beginAtZero: true,\r\n                // min: 5,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    });\r\n  }, [rendered]);\r\n\r\n  const confirm = async () => {\r\n    let non_nullable = [];\r\n    let features = [];\r\n    CustomTable.customtable.filtered.forEach((element) => {\r\n      if (element.disabled !== true) {\r\n        features.push(element.name);\r\n        if (element.nullable === \"false\") {\r\n          non_nullable.push(element.name);\r\n        }\r\n      }\r\n    });\r\n    let FinalObject = {\r\n      company_name: Auth.company_name,\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      target_column: CustomTable.customtable.target,\r\n      databucket_name: CustomTable.customtable.bucket.databucket_name,\r\n      dataset_name: CustomTable.customtable.bucket.dataset_name,\r\n      model_name: Model.model.name,\r\n      project_name: Project.name,\r\n      features: features,\r\n      non_nullable_cols: non_nullable,\r\n    };\r\n    // console.log(FinalObject);\r\n    // setloading(true);\r\n    message.success(\"Model sent to training\");\r\n    // await axios\r\n    //   .post(`${URL}/automl/train/`, FinalObject)\r\n    //   .then(function (response) {\r\n    //     console.log(response);\r\n    //     setloading(false);\r\n    //   })\r\n    //   .catch(function (error) {\r\n    //     setloading(false);\r\n    //     console.log(error);\r\n    //     message.error(\"Server Error\");\r\n    //     if (error.response) {\r\n    //       // Request made and server responded\r\n    //       console.log(error.response.data);\r\n    //       console.log(error.response.status);\r\n    //       message.error(error.response.data);\r\n    //       console.log(error.response.headers);\r\n    //     } else if (error.request) {\r\n    //       // The request was made but no response was received\r\n    //       console.log(error.request);\r\n    //     } else {\r\n    //       // Something happened in setting up the request that triggered an Error\r\n    //     }\r\n    //   });\r\n    // setCurrentPage(\"modeltype\");\r\n    // history.push({\r\n    //   pathname: `/automl/projects/${project_id}/models/${model_id}/model_type/`,\r\n    //   state: {\r\n    //     detail: \"I am from New link page\",\r\n    //     page_name: \"automl_customised_datasets\",\r\n    //   },\r\n    // });\r\n  };\r\n\r\n  return (\r\n    <div className=\"correlation\">\r\n      <AutoMLModelTrainingLoader\r\n        isModalVisible={loading}\r\n        handleCancel={() => setloading(false)}\r\n      />\r\n      <canvas\r\n        id=\"myChart\"\r\n        ref={ChartRef}\r\n        // width={600}\r\n        style={{\r\n          display: \"block\",\r\n          margin: \"auto\",\r\n          width: \"100%\",\r\n          height: \"250px\",\r\n        }}\r\n      ></canvas>\r\n      <div style={{ marginTop: \"50px\" }}>\r\n        <div className=\"box\">\r\n          <h2>{meta.totalentries}</h2> <h4>Total Entries</h4>\r\n        </div>\r\n        <div className=\"box\">\r\n          <h2>{meta.missingvals}</h2> <h4>Missing Values</h4>\r\n        </div>\r\n        <div className=\"box\">\r\n          <h2>{meta.targetcols}</h2> <h4>Target Column</h4>\r\n        </div>\r\n        <div className=\"box\">\r\n          <h2>{meta.targetfeature}</h2> <h4>Target Feature</h4>\r\n        </div>\r\n      </div>\r\n      <Button className=\"button\" onClick={() => confirm()}>\r\n        Continue\r\n      </Button>\r\n      {/* <Cliploader loading={loading} /> */}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\SelectModelType\\SelectModelType.js",[],"D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLCustomTable\\AutoMLCustomTableContext.js",["533","534"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst CustomTableContext = React.createContext();\r\n\r\nclass CustomTableProvider extends Component {\r\n  state = {\r\n    customtable: JSON.parse(localStorage.getItem(\"CustomTable\"))\r\n      ? JSON.parse(localStorage.getItem(\"CustomTable\")).customtable\r\n      : null,\r\n  };\r\n\r\n  setCustomTable = (value) => {\r\n    this.setState({\r\n      customtable: value,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"CustomTable\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CustomTableContext.Provider\r\n        value={{\r\n          CustomTable: this.state,\r\n          setCustomTable: this.setCustomTable,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </CustomTableContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst CustomTableConsumer = CustomTableContext.Consumer;\r\n\r\nexport { CustomTableProvider, CustomTableContext };\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\AutoMLShareModelModal\\AutoMLShareModelModal.js",[],"D:\\Work\\beyond-data\\src\\Components\\NoData\\NoData.js",[],"D:\\Work\\beyond-data\\src\\Pages\\AutoML\\RetrainModel\\RetrainModel.js",["535","536","537"],"import { Button, Col, Row } from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport styles from \"./RetrainModel.module.scss\";\r\nimport \"./styles.css\";\r\nimport downloadIcon from \"../../../Components/Icons/AutoML/download.svg\";\r\nimport AutoMLDropZone from \"../../../Components/Dropzone/AutoMLDropZone\";\r\nimport { ModelContext } from \"../../../Data/Contexts/AutoMLModelContext/AutoMLModelContext\";\r\n\r\nexport default function RetrainModel(props) {\r\n  let { project_id, model_id } = useParams();\r\n  const [loading, setloading] = useState(false);\r\n\r\n  const { Model } = useContext(ModelContext);\r\n\r\n  let row = [\"Customer ID\", \"Customer Name\", \"Dept Name\", \"Price\"];\r\n\r\n  const { setCurrentPage } = useContext(PageContext);\r\n\r\n  const NextPage = () => {\r\n    props.history.push({\r\n      pathname: `/automl/projects/${project_id}/models/${Model.model.name}/retrain_model/feature_selection/`,\r\n      state: { detail: \"I am from Models page\" },\r\n    });\r\n  };\r\n\r\n  const downloadtemplate = () => {\r\n    let content = row.toString();\r\n    content.concat(\"\\n\");\r\n    let csvContent = \"data:text/csv;charset=utf-8,\" + content;\r\n    var encodedUri = encodeURI(csvContent);\r\n    var link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"my_data.csv\");\r\n    document.body.appendChild(link); // Required for FF\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <Row\r\n      justify=\"space-between\"\r\n      className={styles.container}\r\n      id=\"SelectedDatasets\"\r\n    >\r\n      <Col span={17} className={styles.column1}>\r\n        <h3 className={styles.titleBold}>\r\n          {project_id} | <span className={styles.subtitle}>{model_id}</span>\r\n        </h3>\r\n        <h3\r\n          style={{\r\n            textAlign: \"left\",\r\n            fontSize: \"20px\",\r\n            fontWeight: \"bold\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        >\r\n          Retrain\r\n        </h3>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        />\r\n        <div\r\n          style={{ flexGrow: \"1\", overflow: \"scroll\", paddingRight: \"10px\" }}\r\n        >\r\n          <p\r\n            style={{\r\n              fontSize: \"14px\",\r\n              color: \"#085fab\",\r\n              fontWeight: \"bold\",\r\n              marginTop: \"20px\",\r\n              marginBottom: \"5px\",\r\n              cursor: \"pointer\",\r\n              width: \"fit-content\",\r\n            }}\r\n            onClick={() => downloadtemplate()}\r\n          >\r\n            <img\r\n              src={downloadIcon}\r\n              alt=\"Download Icon\"\r\n              width={14}\r\n              style={{ marginTop: \"-5px\", marginRight: \"7px\" }}\r\n            />\r\n            Download template\r\n          </p>\r\n          <ul className=\"custom_row\">\r\n            {row.map((d, index) => (\r\n              <li\r\n                key={index}\r\n                className={\"listitem\"}\r\n                style={{ display: \"inline-block\" }}\r\n              >\r\n                {d}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <h2\r\n            style={{\r\n              textAlign: \"left\",\r\n              fontSize: \"14px\",\r\n              fontWeight: \"bold\",\r\n              marginTop: \"15px\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          >\r\n            Upload Dataset\r\n          </h2>\r\n          <AutoMLDropZone />\r\n        </div>\r\n        <Button className={styles.linkcolbutton} onClick={() => NextPage()}>\r\n          Continue\r\n        </Button>\r\n      </Col>\r\n      <Col span={7} className={styles.column2}>\r\n        <h3 className={styles.titleBold}>Instructions</h3>\r\n        <div\r\n          style={{\r\n            flexGrow: \"1\",\r\n            overflowY: \"scroll\",\r\n            paddingRight: \"0px\",\r\n            textAlign: \"left\",\r\n            color: \"#6D6D6D\",\r\n            fontSize: \"14px\",\r\n          }}\r\n        >\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\r\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n          aliquip ex ea commodo consequat.\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Dropzone\\AutoMLDropZone.js",["538","539"],"import React, { useMemo, useState } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport uploadIcon from \"../Icons/AutoML/uploadfile.svg\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  width: \"30%\",\r\n  height: \"130px\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  border: \"1px dashed #6D6D6D\",\r\n  boxSizing: \"border-box\",\r\n  borderRadius: \"10px\",\r\n  backgroundColor: \"white\",\r\n  color: \"#bdbdbd\",\r\n  cursor: \"pointer\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nexport default function AutoMLDropZone(props) {\r\n  const [file, setfile] = useState(null);\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    acceptedFiles,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({ accept: \".csv\", maxFiles: 1 });\r\n\r\n  const files = acceptedFiles.map((file) => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div {...getRootProps({ style })}>\r\n        <input {...getInputProps()} />\r\n        <br />\r\n        <img src={uploadIcon} alt=\"upload\" />\r\n        <p style={{ fontSize: \"13px\", color: \"#6d6d6d\" }}>\r\n          Drop a local file here, or{\" \"}\r\n          <span style={{ color: \"#085fab\" }}>Browse</span>\r\n        </p>\r\n      </div>\r\n      <h4>Uploaded File</h4>\r\n      <ul>{files}</ul>\r\n    </div>\r\n  );\r\n}\r\n\r\n<AutoMLDropZone />;\r\n","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\PredictModel\\AutoMLPredictModel.js",["540","541","542","543"],"import { Button, Col, message, Row } from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { PageContext } from \"../../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport styles from \"./AutoMLPredictModel.module.scss\";\r\nimport \"./styles.css\";\r\nimport downloadIcon from \"../../../Components/Icons/AutoML/download.svg\";\r\nimport AutoMLDropZone from \"../../../Components/Dropzone/AutoMLDropZone\";\r\nimport { ModelContext } from \"../../../Data/Contexts/AutoMLModelContext/AutoMLModelContext\";\r\n\r\nexport default function PredictModel(props) {\r\n  let { project_id, model_id } = useParams();\r\n  const [loading, setloading] = useState(false);\r\n  const [type, settype] = useState(\"batch\");\r\n\r\n  const { Model } = useContext(ModelContext);\r\n\r\n  let row = [\"Customer ID\", \"Customer Name\", \"Dept Name\", \"Price\"];\r\n\r\n  const { setCurrentPage } = useContext(PageContext);\r\n\r\n  const NextPage = () => {\r\n    // props.history.push({\r\n    //   pathname: `/automl/projects/${project_id}/models/${Model.model.name}/predict_model/feature_selection/`,\r\n    //   state: { detail: \"I am from Models page\" },\r\n    // });\r\n    message.success(\"Start Prediction\");\r\n  };\r\n\r\n  const downloadtemplate = () => {\r\n    let content = row.toString();\r\n    content.concat(\"\\n\");\r\n    let csvContent = \"data:text/csv;charset=utf-8,\" + content;\r\n    var encodedUri = encodeURI(csvContent);\r\n    var link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"my_data.csv\");\r\n    document.body.appendChild(link); // Required for FF\r\n    link.click();\r\n  };\r\n\r\n  return (\r\n    <Row\r\n      justify=\"space-between\"\r\n      className={styles.container}\r\n      id=\"SelectedDatasets\"\r\n    >\r\n      <Col span={17} className={styles.column1}>\r\n        <h3 className={styles.titleBold}>\r\n          {project_id} | <span className={styles.subtitle}>{model_id}</span>\r\n        </h3>\r\n        <h3\r\n          style={{\r\n            textAlign: \"left\",\r\n            fontSize: \"20px\",\r\n            fontWeight: \"bold\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        >\r\n          Predict\r\n        </h3>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        />\r\n        <div\r\n          style={{ flexGrow: \"1\", overflow: \"scroll\", paddingRight: \"10px\" }}\r\n        >\r\n          <p\r\n            style={{\r\n              fontSize: \"14px\",\r\n              color: \"#085fab\",\r\n              fontWeight: \"bold\",\r\n              marginTop: \"20px\",\r\n              marginBottom: \"5px\",\r\n              cursor: \"pointer\",\r\n              width: \"fit-content\",\r\n            }}\r\n            onClick={() => downloadtemplate()}\r\n          >\r\n            <img\r\n              src={downloadIcon}\r\n              alt=\"Download Icon\"\r\n              width={14}\r\n              style={{ marginTop: \"-5px\", marginRight: \"7px\" }}\r\n            />\r\n            Download template\r\n          </p>\r\n          <ul className=\"custom_row\">\r\n            {row.map((d, index) => (\r\n              <li\r\n                key={index}\r\n                className={\"listitem\"}\r\n                style={{ display: \"inline-block\" }}\r\n              >\r\n                {d}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <h2\r\n            style={{\r\n              textAlign: \"left\",\r\n              fontSize: \"14px\",\r\n              fontWeight: \"bold\",\r\n              marginBottom: \"5px\",\r\n              marginTop: \"15px\",\r\n            }}\r\n          >\r\n            Upload Dataset\r\n          </h2>\r\n          <div style={{ marginBottom: \"8px\" }}>\r\n            <input\r\n              type=\"radio\"\r\n              id=\"batch\"\r\n              value=\"batch\"\r\n              className=\"radio\"\r\n              checked={type === \"batch\" ? true : false}\r\n              onChange={(e) => settype(e.target.value)}\r\n              style={{ marginTop: \"-5px\", height: \"11px\" }}\r\n            />\r\n            <label\r\n              htmlFor=\"batch\"\r\n              className=\"label\"\r\n              style={{\r\n                fontSize: \"14px\",\r\n                color: \"#6d6d6d\",\r\n                paddingLeft: \"10px\",\r\n              }}\r\n            >\r\n              Batch Prediction\r\n            </label>\r\n            <input\r\n              type=\"radio\"\r\n              id=\"single\"\r\n              value=\"single\"\r\n              onChange={(e) => settype(e.target.value)}\r\n              className=\"radio\"\r\n              checked={type === \"single\" ? true : false}\r\n              style={{ marginTop: \"-5px\", height: \"11px\", marginLeft: \"30px\" }}\r\n            />\r\n            <label\r\n              htmlFor=\"single\"\r\n              className=\"label\"\r\n              style={{\r\n                fontSize: \"14px\",\r\n                color: \"#6d6d6d\",\r\n                paddingLeft: \"10px\",\r\n              }}\r\n            >\r\n              Single Prediction\r\n            </label>\r\n          </div>\r\n          {type === \"batch\" ? (\r\n            <AutoMLDropZone />\r\n          ) : (\r\n            <table className=\"predictiontable\">\r\n              <thead>\r\n                <tr>\r\n                  {row.map((item, index) => (\r\n                    <th>{item}</th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  {row.map((item, index) => (\r\n                    <td key={index}>\r\n                      <input className=\"input\" />\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          )}\r\n        </div>\r\n        <Button className={styles.linkcolbutton} onClick={() => NextPage()}>\r\n          Predict\r\n        </Button>\r\n      </Col>\r\n      <Col span={7} className={styles.column2}>\r\n        <h3 className={styles.titleBold}>Instructions</h3>\r\n        <div\r\n          style={{\r\n            flexGrow: \"1\",\r\n            overflowY: \"scroll\",\r\n            paddingRight: \"0px\",\r\n            textAlign: \"left\",\r\n            color: \"#6D6D6D\",\r\n            fontSize: \"14px\",\r\n          }}\r\n        >\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\r\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n          aliquip ex ea commodo consequat.\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Popover\\NotificationPopover.js",["544","545","546"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\nimport sharing_started from \"../Icons/AutoML/Notifications/sharenotify.svg\";\r\nimport deleteicon from \"../Icons/AutoML/Notifications/deletenotify.svg\";\r\nimport downloading_started from \"../Icons/AutoML/Notifications/downloadnotify.svg\";\r\nimport trainicon from \"../Icons/AutoML/Notifications/trainnotify.svg\";\r\nimport sharing_completed from \"../Icons/AutoML/Notifications/share_completed.svg\";\r\nimport downloading_completed from \"../Icons/AutoML/Notifications/sharenotify.svg\";\r\nimport file_uploaded from \"../Icons/AutoML/Notifications/file_uploaded.svg\";\r\nimport data_configured from \"../Icons/AutoML/Notifications/data_configured.svg\";\r\nimport data_concatenated from \"../Icons/AutoML/Notifications/concat_completed.svg\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { NotificationsContext } from \"../../Data/Contexts/AutoMLNotifications/AutoMLNotificationsContext\";\r\nimport { DataLakeBucketContext } from \"../../Data/Contexts/DataLake/DataLakeBucketContext/DataLakeBucketContext\";\r\nimport { Tooltip } from \"antd\";\r\n\r\nexport default function NotificationPopover() {\r\n  let history = useHistory();\r\n\r\n  const { Notifications } = useContext(NotificationsContext);\r\n  const [data, setdata] = useState(null);\r\n  const [render, setrender] = useState(false);\r\n\r\n  const { setBucket } = useContext(DataLakeBucketContext);\r\n\r\n  // let data = [\r\n  //   {\r\n  //     filename: \"HBL 2019\",\r\n  //     message: \"has  been deleted\",\r\n  //     date: \"Just now\",\r\n  //     type: \"deleted\",\r\n  //   },\r\n  //   {\r\n  //     filename: \"BAHL 2020\",\r\n  //     message: \"has shared successfully\",\r\n  //     date: \"Yesterday\",\r\n  //     type: \"shared\",\r\n  //   },\r\n  //   {\r\n  //     filename: \"Custom Dataset\",\r\n  //     message: \"has  been generated\",\r\n  //     date: \"2/5/21\",\r\n  //     type: \"generated\",\r\n  //   },\r\n  //   {\r\n  //     filename: \"HBL 2019\",\r\n  //     message: \"has  been deleted\",\r\n  //     date: \"Just now\",\r\n  //     type: \"deleted\",\r\n  //   },\r\n  //   {\r\n  //     filename: \"BAHL 2020\",\r\n  //     message: \"has shared successfully\",\r\n  //     date: \"Yesterday\",\r\n  //     type: \"shared\",\r\n  //   },\r\n  //   {\r\n  //     filename: \"Custom Dataset\",\r\n  //     message: \"has  been generated\",\r\n  //     date: \"2/5/21\",\r\n  //     type: \"generated\",\r\n  //   },\r\n  // ];\r\n\r\n  useEffect(() => {\r\n    if (Notifications.Notifications) {\r\n      let temp = [];\r\n      Notifications.Notifications.forEach((element) => {\r\n        let type = element.tag.split(\"_\")[1];\r\n        let info = {};\r\n        if (type === \"downloading\") {\r\n          type = \"downloaded\";\r\n          info = {\r\n            screen: \"databuckets\",\r\n            tab: \"downloaded\",\r\n            bucket: {\r\n              name: element.path_info ? element.path_info.databucket : \"\",\r\n              created_by: element.path_info ? element.path_info.created_by : \"\",\r\n            },\r\n            filename: element.object_name ? element.object_name : null,\r\n          };\r\n        } else if (type === \"sharing\") {\r\n          type = \"shared\";\r\n          info = {\r\n            screen: \"databuckets\",\r\n            tab: \"global\",\r\n            bucket: {\r\n              name: element.path_info ? element.path_info.databucket : \"\",\r\n              created_by: element.path_info ? element.path_info.created_by : \"\",\r\n            },\r\n            filename: element.object_name ? element.object_name : null,\r\n          };\r\n          // }\r\n        } else if (\r\n          type === \"generating\" ||\r\n          type === \"processing\" ||\r\n          type === \"concatenation\"\r\n        ) {\r\n          type = \"generated\";\r\n          info = {\r\n            screen: \"databuckets\",\r\n            tab: \"global\",\r\n            bucket: {\r\n              name: element.path_info ? element.path_info.databucket : \"\",\r\n              created_by: element.path_info ? element.path_info.created_by : \"\",\r\n            },\r\n            filename: element.object_name ? element.object_name : null,\r\n          };\r\n        } else if (type === \"deleting\") {\r\n          type = \"deleted\";\r\n          info = { screen: \"databuckets\", tab: \"my\" };\r\n        } else {\r\n          type = \"\";\r\n          info = {\r\n            screen: \"\",\r\n            tab: \"\",\r\n            filename: element.object_name ? element.object_name : null,\r\n          };\r\n        }\r\n        let icon = \"\";\r\n        let tag = \"\";\r\n        if (\r\n          element.tag.includes(\"sharing\") &&\r\n          element.tag.includes(\"started\")\r\n        ) {\r\n          icon = \"sharing_started\";\r\n          tag = \"Sharing Started\";\r\n        }\r\n        if (\r\n          element.tag.includes(\"sharing\") &&\r\n          element.tag.includes(\"completed\")\r\n        ) {\r\n          icon = \"sharing_completed\";\r\n          tag = \"Sharing Completed\";\r\n        }\r\n        if (\r\n          element.tag.includes(\"downloading\") &&\r\n          element.tag.includes(\"started\")\r\n        ) {\r\n          icon = \"downloading_started\";\r\n          tag = \"Downloading Started\";\r\n        }\r\n        if (\r\n          element.tag.includes(\"downloading\") &&\r\n          element.tag.includes(\"completed\")\r\n        ) {\r\n          icon = \"downloading_completed\";\r\n          tag = \"Downloading Completed\";\r\n        }\r\n        if (\r\n          element.tag.includes(\"processing\") &&\r\n          element.tag.includes(\"completed\") &&\r\n          element.tag.includes(\"dataset\")\r\n        ) {\r\n          icon = \"file_uploaded\";\r\n          tag = \"File Uploaded\";\r\n        }\r\n        if (\r\n          element.tag.includes(\"concatenation\") &&\r\n          element.tag.includes(\"completed\") &&\r\n          element.tag.includes(\"dataset\")\r\n        ) {\r\n          icon = \"data_concatenated\";\r\n          tag = \"Dataset Concatenated\";\r\n        }\r\n        if (\r\n          element.tag.includes(\"completed\") &&\r\n          element.tag.includes(\"configuration\") &&\r\n          element.tag.includes(\"dataset\")\r\n        ) {\r\n          icon = \"data_configured\";\r\n          tag = \"Dataset Configured\";\r\n        }\r\n        temp.push({\r\n          tag: tag,\r\n          filename: info.filename,\r\n          message: element.message,\r\n          date: element.time,\r\n          type: type,\r\n          info: info,\r\n          icon: icon,\r\n        });\r\n      });\r\n      temp.reverse();\r\n      console.log(temp);\r\n      setdata(temp);\r\n      setrender(!render);\r\n    }\r\n  }, [Notifications]);\r\n\r\n  const navigate = () => {\r\n    history.push({\r\n      pathname: `/automl/all_notifications/`,\r\n      state: { detail: \"I am from Models page\" },\r\n    });\r\n  };\r\n\r\n  const notificationClicked = async (item) => {\r\n    if (\r\n      item.message.includes(\"has been processed\") ||\r\n      item.message.includes(\"has been concatenated\") ||\r\n      item.message.includes(\"has been configured\")\r\n    ) {\r\n      await setBucket({\r\n        bucket: {\r\n          created_by: item.info.bucket.created_by,\r\n          desc: \"\",\r\n          last_modified: \"\",\r\n          name: item.info.bucket.name,\r\n          size: \"\",\r\n        },\r\n        type: \"My Data\",\r\n      });\r\n      history.push({\r\n        pathname: `/datalake/${item.info.bucket.name}/datasets`,\r\n        state: {\r\n          info: item.info,\r\n          detail: \"I am from Databuckets Screen\",\r\n          page_name: \"Datasets_Screen\",\r\n        },\r\n      });\r\n    }\r\n    if (item.message.includes(\"has been shared\")) {\r\n      await setBucket({\r\n        bucket: {\r\n          created_by: item.info.bucket.created_by,\r\n          desc: \"\",\r\n          last_modified: \"\",\r\n          name: item.info.bucket.name,\r\n          size: \"\",\r\n        },\r\n        type: \"Global Data\",\r\n      });\r\n      history.push({\r\n        pathname: `/datalake/${item.info.bucket.name}/datasets`,\r\n        state: {\r\n          info: item.info,\r\n          detail: \"I am from Databuckets Screen\",\r\n          page_name: \"Datasets_Screen\",\r\n        },\r\n      });\r\n    }\r\n    if (item.message.includes(\"has been downloaded\")) {\r\n      await setBucket({\r\n        bucket: {\r\n          created_by: item.info.bucket.created_by,\r\n          desc: \"\",\r\n          last_modified: \"\",\r\n          name: item.info.bucket.name,\r\n          size: \"\",\r\n        },\r\n        type: \"Downloaded Data\",\r\n      });\r\n      history.push({\r\n        pathname: `/datalake/${item.info.bucket.name}/datasets`,\r\n        state: {\r\n          info: item.info,\r\n          detail: \"I am from Databuckets Screen\",\r\n          page_name: \"Datasets_Screen\",\r\n        },\r\n      });\r\n    }\r\n    // if (\r\n    //   item.info.screen === \"databuckets\" &&\r\n    //   item.message.includes(\"has been\")\r\n    // ) {\r\n    //   history.push({\r\n    //     pathname: `/datalake/databuckets`,\r\n    //     state: {\r\n    //       info: item.info,\r\n    //       detail: \"I am from Databuckets Screen\",\r\n    //       page_name: \"Datasets_Screen\",\r\n    //     },\r\n    //   });\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"NotificationPopover\">\r\n        {data\r\n          ? data.map((item, index) => (\r\n              <li key={index} onClick={() => notificationClicked(item)}>\r\n                <Tooltip title={item.tag} color={\"#343649\"}>\r\n                  <div\r\n                    style={{\r\n                      display: \"inline-block\",\r\n                      width: \"40px\",\r\n                      // backgroundColor: \"red\",\r\n                      verticalAlign: \"top\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={\r\n                        item.icon === \"file_uploaded\"\r\n                          ? file_uploaded\r\n                          : item.icon === \"sharing_started\"\r\n                          ? sharing_started\r\n                          : item.icon === \"downloading_started\"\r\n                          ? downloading_started\r\n                          : item.icon === \"sharing_completed\"\r\n                          ? sharing_completed\r\n                          : item.icon === \"downloading_completed\"\r\n                          ? downloading_completed\r\n                          : item.icon === \"data_concatenated\"\r\n                          ? data_concatenated\r\n                          : item.icon === \"data_configured\"\r\n                          ? data_configured\r\n                          : null\r\n                      }\r\n                      alt=\"icon\"\r\n                    />\r\n                  </div>\r\n                </Tooltip>\r\n                <div\r\n                  style={{\r\n                    display: \"inline-block\",\r\n                    overflow: \"hidden\",\r\n                    whiteSpace: \"nowrap\",\r\n                    textOverflow: \"ellipsis\",\r\n                    width: \"250px\",\r\n                  }}\r\n                >\r\n                  <span>\r\n                    <span className=\"title\">{item.filename}</span>{\" \"}\r\n                    {/* {item.message}{\" \"} */}\r\n                  </span>\r\n                  <p className=\"date\">{item.date}</p>\r\n                </div>\r\n              </li>\r\n            ))\r\n          : null}\r\n      </ul>\r\n      <p\r\n        style={{\r\n          textAlign: \"center\",\r\n          fontSize: \"12px\",\r\n          color: \"#a1a1a1\",\r\n          backgroundColor: \"#F5FAFF\",\r\n          margin: \"0px\",\r\n          paddingTop: \"10px\",\r\n          paddingBottom: \"10px\",\r\n          cursor: \"pointer\",\r\n          borderRadius: \"8px\",\r\n        }}\r\n        onClick={() => navigate()}\r\n      >\r\n        View all notifications\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\AutoML\\Notifications\\AllNotifications.js",[],"D:\\Work\\beyond-data\\src\\Components\\Loader\\AutoMLGeneratingDatasetLoader\\AutoMLGeneratingDatasetLoader.js",["547"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport ShareAvatar from \"../../Images/AutoML/generatedatasetrobot.svg\";\r\nimport \"./styles.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\n\r\nexport default function AutoMLGeneratingDatasetLoader(props) {\r\n  return (\r\n    <div className=\"AutoMLGeneratingDatasetLoader\">\r\n      <Modal\r\n        width={332}\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={props.handleCancel}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EFF4F9\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"20px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"bold\",\r\n                color: \"#90A8BE\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"Lato\",\r\n              }}\r\n            >\r\n              Generating Dataset\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <img\r\n            className=\"shareAvatar\"\r\n            src={ShareAvatar}\r\n            style={{\r\n              width: \"73px\",\r\n              height: \"107px\",\r\n              display: \"block\",\r\n              margin: \"auto\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          />\r\n          <h2\r\n            style={{ fontFamily: \"Lato\", fontWeight: \"bold\", fontSize: \"18px\" }}\r\n          >\r\n            This may take a while\r\n          </h2>\r\n          <p\r\n            style={{\r\n              padding: \"10px\",\r\n              paddingTop: \"10px\",\r\n              fontFamily: \"Lato\",\r\n              fontSize: \"13px\",\r\n              fontWeight: \"normal\",\r\n              color: \"#6d6d6d\",\r\n            }}\r\n          >\r\n            We have sent your request to generate the Dataset! Based on the size\r\n            of your data, it could take some time while processing. <br />\r\n            <span style={{ fontWeight: \"bold\", color: \"#6d6d6d\" }}>\r\n              We will let you know once your Dataset is generated\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Loader\\AutoMLModelTrainingLoader\\AutoMLModelTrainingLoader.js",["548"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport ShareAvatar from \"../../Images/AutoML/generatedatasetrobot.svg\";\r\nimport \"./styles.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\n\r\nexport default function AutoMLModelTrainingLoader(props) {\r\n  return (\r\n    <div className=\"AutoMLModelTrainingLoader\">\r\n      <Modal\r\n        width={332}\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={props.handleCancel}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EFF4F9\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"20px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"bold\",\r\n                color: \"#90A8BE\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"Lato\",\r\n              }}\r\n            >\r\n              Training Model\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <img\r\n            className=\"shareAvatar\"\r\n            src={ShareAvatar}\r\n            style={{\r\n              width: \"73px\",\r\n              height: \"107px\",\r\n              display: \"block\",\r\n              margin: \"auto\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          />\r\n          <h2\r\n            style={{ fontFamily: \"Lato\", fontWeight: \"bold\", fontSize: \"18px\" }}\r\n          >\r\n            This may take a while\r\n          </h2>\r\n          <p\r\n            style={{\r\n              padding: \"10px\",\r\n              paddingTop: \"10px\",\r\n              fontFamily: \"Lato\",\r\n              fontSize: \"13px\",\r\n              fontWeight: \"normal\",\r\n              color: \"#6d6d6d\",\r\n            }}\r\n          >\r\n            We have sent your request to train model! Based on the size of your\r\n            data, it could take some time while processing. <br />\r\n            <span style={{ fontWeight: \"bold\", color: \"#6d6d6d\" }}>\r\n              We will let you know once your model is trained\r\n            </span>\r\n          </p>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Data\\Contexts\\AutoMLNotifications\\AutoMLNotificationsContext.js",["549","550"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst NotificationsContext = React.createContext();\r\n\r\nclass NotificationsProvider extends Component {\r\n  state = {\r\n    Notifications: JSON.parse(localStorage.getItem(\"Notifications\"))\r\n      ? JSON.parse(localStorage.getItem(\"Notifications\")).Notifications\r\n      : [],\r\n  };\r\n\r\n  setNotifications = (value) => {\r\n    let temp = this.state.Notifications;\r\n    if (this.state.Notifications.length !== 0) {\r\n      temp.push(value);\r\n    } else {\r\n      temp = [];\r\n    }\r\n    console.log(temp);\r\n    temp.forEach((element, index) => {\r\n      if (element) {\r\n      }\r\n    });\r\n    if (temp.length > 6) {\r\n      temp = temp.slice(temp.length - 6, temp.length);\r\n    }\r\n    this.setState({\r\n      Notifications: temp,\r\n    });\r\n  };\r\n\r\n  setNotificationsStatus = () => {\r\n    let temp = this.state.Notifications;\r\n    if (this.state.Notifications.length !== 0) {\r\n      temp.forEach((element) => {\r\n        element.status = \"read\";\r\n      });\r\n    }\r\n    this.setState({\r\n      Notifications: temp,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"Notifications\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <NotificationsContext.Provider\r\n        value={{\r\n          Notifications: this.state,\r\n          setNotifications: this.setNotifications,\r\n          setNotificationsStatus: this.setNotificationsStatus,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </NotificationsContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst NotificationsConsumer = NotificationsContext.Consumer;\r\n\r\nexport { NotificationsProvider, NotificationsContext };\r\n","D:\\Work\\beyond-data\\src\\Routes\\DataLakeRoutes\\DataLakesRoutes.js",["551","552","553"],"import React, { useState } from \"react\";\r\nimport { Prompt, Route, Switch, useHistory } from \"react-router-dom\";\r\nimport { AuthProvider } from \"../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { NotificationsProvider } from \"../../Data/Contexts/AutoMLNotifications/AutoMLNotificationsContext\";\r\nimport { PageProvider } from \"../../Data/Contexts/AutoMLPageState/AutoMLPageStateContext\";\r\nimport styles from \"./DataLakesRoutes.module.scss\";\r\nimport leftArrow from \"../../Components/Images/AutoML/leftarrow.svg\";\r\nimport rightArrow from \"../../Components/Images/AutoML/rightarrow.svg\";\r\nimport Layout, { Content } from \"antd/lib/layout/layout\";\r\nimport AutoMLHeader from \"../../Components/Header/AutoMLHeader/AutoMLHeader\";\r\nimport AutoMLSideBar from \"../../Components/SideBar/AutoMLSideBar/AutoMLSideBar\";\r\nimport AutoMLBreadcrumbs from \"../../Components/BreadCrumbs/AutoMLBreadcrumbs/AutoMLBreadcrumbs\";\r\nimport Error404 from \"../../Components/ErrorScreens/Error404\";\r\nimport DataBucketsMain from \"../../Pages/DataLake/DataBucketsMain/DataBucketsMain\";\r\nimport DatasetsMain from \"../../Pages/DataLake/DatasetsMain/DatasetsMain\";\r\nimport DataLakeConcat from \"../../Pages/DataLake/DataLakeConcat/DataLakeConcat\";\r\nimport DatasetConfigure from \"../../Pages/DataLake/DatasetConfigure/DatasetConfigure\";\r\nimport { DataLakeBucketProvider } from \"../../Data/Contexts/DataLake/DataLakeBucketContext/DataLakeBucketContext\";\r\nimport { DataLakeDatasetProvider } from \"../../Data/Contexts/DataLake/DataLakeDatasetContext/DataLakeDatasetContext\";\r\nimport { DataLakeFileUploadProvider } from \"../../Data/Contexts/DataLakeFileUploadContext/DataLakeFileUploadContext\";\r\nimport DataLakeBreadcrumbs from \"../../Components/BreadCrumbs/DataLakeBreadcrumbs/DataLakeBreadcrumbs\";\r\n\r\nexport default function DataLakesRoutes() {\r\n  // let pages = JSON.parse(localStorage.getItem(\"Page\"));\r\n  let history = useHistory();\r\n  let Bucket = JSON.parse(localStorage.getItem(\"Bucket\"));\r\n\r\n  const [prompt, setprompt] = useState(false);\r\n\r\n  const goBack = () => {\r\n    let route = history.location.pathname.split(\"/\");\r\n    if (route.includes(\"concat\")) {\r\n      history.push({\r\n        pathname: `/datalake/${Bucket.bucket.name}/datasets/`,\r\n        state: {\r\n          detail: `I am from concat screen`,\r\n          page_name: \"automl_models\",\r\n        },\r\n      });\r\n    } else if (route.includes(\"configure\")) {\r\n      history.push({\r\n        pathname: `/datalake/${Bucket.bucket.name}/datasets/`,\r\n        state: {\r\n          detail: `I am from concat screen`,\r\n          page_name: \"automl_models\",\r\n        },\r\n      });\r\n    } else if (route.includes(\"datasets\")) {\r\n      history.push({\r\n        pathname: `/datalake/databuckets/`,\r\n        state: {\r\n          detail: `I am from concat screen`,\r\n          page_name: \"automl_models\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const goNext = () => {\r\n    let route = history.location.pathname.split(\"/\");\r\n    if (route.includes(\"databuckets\")) {\r\n      history.push({\r\n        pathname: `/datalake/${Bucket.bucket.name}/datasets`,\r\n        state: {\r\n          detail: `I am from bucket screen`,\r\n          page_name: \"automl_models\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AuthProvider>\r\n        <NotificationsProvider>\r\n          <DataLakeFileUploadProvider>\r\n            <DataLakeBucketProvider>\r\n              <DataLakeDatasetProvider>\r\n                <PageProvider>\r\n                  <Layout style={{ height: \"100vh\" }}>\r\n                    <AutoMLHeader />\r\n                    <Layout>\r\n                      <AutoMLSideBar />\r\n                      <Layout style={{ backgroundColor: \"#F5FAFF\" }}>\r\n                        <DataLakeBreadcrumbs />\r\n                        <Content className={styles.content}>\r\n                          <Switch>\r\n                            <Route\r\n                              exact\r\n                              path=\"/datalake/databuckets\"\r\n                              component={DataBucketsMain}\r\n                            />\r\n                            <Route\r\n                              exact\r\n                              path=\"/datalake/:databucket/datasets\"\r\n                              component={DatasetsMain}\r\n                            />\r\n                            <Route\r\n                              exact\r\n                              path=\"/datalake/:databucket/datasets/:dataset/concat/\"\r\n                              component={DataLakeConcat}\r\n                            />\r\n                            <Route\r\n                              exact\r\n                              path=\"/datalake/:databucket/datasets/:dataset/configure/\"\r\n                              component={DatasetConfigure}\r\n                            />\r\n                            <Route exact path=\"/\" component={DataBucketsMain} />\r\n                          </Switch>\r\n                          <div\r\n                            className={styles.leftArrow}\r\n                            onClick={() => goBack()}\r\n                          >\r\n                            <img\r\n                              src={leftArrow}\r\n                              style={{\r\n                                width: \"45px\",\r\n                                cursor: \"pointer\",\r\n                              }}\r\n                              alt=\"leftArrow\"\r\n                            />\r\n                          </div>\r\n                          <div\r\n                            className={styles.rightArrow}\r\n                            onClick={() => goNext()}\r\n                          >\r\n                            <img\r\n                              src={rightArrow}\r\n                              style={{ width: \"45px\", cursor: \"pointer\" }}\r\n                              alt=\"rightArrow\"\r\n                            />\r\n                          </div>\r\n                        </Content>\r\n                      </Layout>\r\n                    </Layout>\r\n                  </Layout>\r\n                </PageProvider>\r\n              </DataLakeDatasetProvider>\r\n            </DataLakeBucketProvider>\r\n          </DataLakeFileUploadProvider>\r\n        </NotificationsProvider>\r\n      </AuthProvider>\r\n      <Prompt\r\n        when={prompt}\r\n        message={() => \"Are you sure you want to leave this page?\"}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\DataLake\\DataBucketsMain\\DataBucketsMain.js",["554","555","556","557","558","559","560"],"/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport blueIcon from \"../../../Components/Icons/DataLake/lightblueKey.svg\";\r\nimport darkBlueIcon from \"../../../Components/Icons/DataLake/darkblueKey.svg\";\r\nimport questionIcon from \"../../../Components/Icons/DataLake/QuestionIcon.svg\";\r\nimport DataLakeTitle from \"../../../Components/Icons/DataLake/DataLakeTitle.svg\";\r\nimport uploadIcon from \"../../../Components/Icons/DataLake/upload.svg\";\r\nimport newBucketIcon from \"../../../Components/Icons/DataLake/newDatabucket.svg\";\r\nimport { Button, Col, Input, message, Popover, Row } from \"antd\";\r\nimport \"./styles.css\";\r\nimport editIcon from \"../../../Components/Icons/AutoML/edit.svg\";\r\nimport saveIcon from \"../../../Components/Icons/AutoML/save.svg\";\r\nimport shareIcon from \"../../../Components/Icons/AutoML/share.svg\";\r\nimport deleteIcon from \"../../../Components/Icons/AutoML/delete.svg\";\r\nimport downloadIcon from \"../../../Components/Icons/AutoML/download.svg\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport CustomTabs from \"../../../Components/Tabs/CustomTabs/CustomTabs\";\r\nimport DataLakeSpaceGraph from \"../../../Components/Graphs/DataLakeSpaceGraph/DataLakeSpaceGraph\";\r\nimport DataLakeDatabucketstable from \"../../../Components/Tables/DataLakeDatabucketstable/DataLakeDatabucketstable\";\r\nimport DataLakeBucketShareModal from \"../../../Components/Modals/DataLakeBucketShareModal/DataLakeBucketShareModal\";\r\nimport DataLakeNewBucketModal from \"../../../Components/Modals/DataLakeNewBucketModal/DataLakeNewBucketModal\";\r\nimport DataLakeUploadDatasetModal from \"../../../Components/Modals/DataLakeUploadDatasetModal/DataLakeUploadDatasetModal\";\r\nimport UploadCollapsable from \"../../../Components/Collapsable/UploadCollapsable/UploadCollapsable\";\r\nimport DataLakeBucketDeleteModal from \"../../../Components/Modals/DataLakeBucketDeleteModal/DataLakeBucketDeleteModal\";\r\nimport searchIcon from \"../../../Components/Icons/AutoML/search1.svg\";\r\nimport { DataLakeBucketContext } from \"../../../Data/Contexts/DataLake/DataLakeBucketContext/DataLakeBucketContext\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport axios from \"axios\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport DataLakeBucketDownloadModal from \"../../../Components/Modals/DataLakeBucketDownloadModal/DataLakeBucketDownloadModal\";\r\nimport Cliploader from \"../../../Components/Loader/Cliploader\";\r\nimport fileDownload from \"js-file-download\";\r\nimport BucketShareReplaceModal from \"../../../Components/Modals/Misc/BucketShareReplaceModal/BucketShareReplaceModal\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\n\r\nexport default function DataBucketsMain(props) {\r\n  const [editable, seteditable] = useState(false);\r\n  const [description, setdescription] = useState(\"\");\r\n  const [title, settitle] = useState(\"\");\r\n  const [editabledescription, seteditabledescription] = useState(null);\r\n  const [editabletitle, seteditabletitle] = useState(null);\r\n  const [selected, setselected] = useState(null);\r\n  const [selectedBucket, setselectedBucket] = useState(null);\r\n  const [resettable, setresettable] = useState(false);\r\n  const [searchval, setsearchval] = useState(\"\");\r\n  const [rendertable, setrendertable] = useState(true);\r\n  const [recallAPI, setrecallAPI] = useState(false);\r\n  const [tempDatasets, settempDatasets] = useState(null);\r\n  const [tempDeleteDatasets, settempDeleteDatasets] = useState(null);\r\n  const [tempDownloadDatasets, settempDownloadDatasets] = useState(null);\r\n  const [tempDownloadLocalDatasets, settempDownloadLocalDatasets] =\r\n    useState(null);\r\n\r\n  const [downloadPopover, setdownloadPopover] = useState(false);\r\n  const [shareModal, setshareModal] = useState(false);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [downloadModal, setdownloadModal] = useState(false);\r\n  const [downloadLocalModal, setdownloadLocalModal] = useState(false);\r\n  const [newBucketModal, setnewBucketModal] = useState(false);\r\n  const [uploadDatasetModal, setuploadDatasetModal] = useState(false);\r\n  const [ReplaceShareModal, setReplaceShareModal] = useState(false);\r\n  const [ReplaceDownloadModal, setReplaceDownloadModal] = useState(false);\r\n  const [tab, settab] = useState(\"My Data\");\r\n  const [loading, setloading] = useState(false);\r\n  const [SpaceInfo, setSpaceInfo] = useState({ free_space: 0, used_space: 0 });\r\n\r\n  const [ConfirmShareData, setConfirmShareData] = useState(false);\r\n\r\n  const { Bucket, setBucket } = useContext(DataLakeBucketContext);\r\n  const { Auth, setAuth } = useContext(AuthContext);\r\n\r\n  let location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (location && location.state) {\r\n      if (location.state.info) {\r\n        if (\r\n          location.state.info.screen === \"databuckets\" &&\r\n          location.state.info.tab\r\n        ) {\r\n          if (location.state.info.tab === \"global\") {\r\n            settab(\"Global Data\");\r\n            setselected(null);\r\n            setselectedBucket(null);\r\n            seteditabledescription(\"\");\r\n            settitle(\"\");\r\n            seteditable(false);\r\n            setdescription(\"\");\r\n            seteditabletitle(\"\");\r\n            setsearchval(\"\");\r\n            setresettable(!resettable);\r\n            setrecallAPI(!recallAPI);\r\n          }\r\n          if (location.state.info.tab === \"downloaded\") {\r\n            settab(\"Downloaded Data\");\r\n            setselected(null);\r\n            setselectedBucket(null);\r\n            seteditabledescription(\"\");\r\n            settitle(\"\");\r\n            seteditable(false);\r\n            setdescription(\"\");\r\n            seteditabletitle(\"\");\r\n            setsearchval(\"\");\r\n            setresettable(!resettable);\r\n            setrecallAPI(!recallAPI);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    let demo = {\r\n      company_name: \"aawaz4\",\r\n      company_id: \"aawaz_217\",\r\n      user_id: \"BD_usama1\",\r\n    };\r\n    setAuth(demo);\r\n  }, [tab]);\r\n\r\n  const shareBucket = async (data) => {\r\n    console.log(data);\r\n    let arr = [];\r\n    if (data && data.length !== 0) {\r\n      data.forEach((element) => {\r\n        if (element.checked === true) {\r\n          arr.push(element.name);\r\n        }\r\n      });\r\n    }\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      databucket_name: selectedBucket.name,\r\n      databucket_desc: selectedBucket.desc,\r\n      datasets: arr,\r\n      confirmation: \"no\",\r\n    };\r\n    console.log(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/share_databucket/`,\r\n      data: {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        company_name: Auth.company_name,\r\n        databucket_name: selectedBucket.name,\r\n        databucket_desc: selectedBucket.desc,\r\n        confirmation: \"no\",\r\n        datasets: arr,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n        if (response.data.message === \"sharing started\") {\r\n          setshareModal(false);\r\n        } else if (\r\n          response.data.message === \"conflict\" &&\r\n          response.data.already_exists.length !== 0\r\n        ) {\r\n          setshareModal(false);\r\n          setReplaceShareModal(true);\r\n          setConfirmShareData(response.data.already_exists);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          message.error(\"Server Error\");\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const confirmShare = async () => {\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      databucket_name: selectedBucket.name,\r\n      databucket_desc: selectedBucket.desc,\r\n      datasets: ConfirmShareData,\r\n      confirmation: \"yes\",\r\n    };\r\n    console.log(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/share_databucket/`,\r\n      data: {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        company_name: Auth.company_name,\r\n        databucket_name: selectedBucket.name,\r\n        databucket_desc: selectedBucket.desc,\r\n        confirmation: \"yes\",\r\n        datasets: ConfirmShareData,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n        setReplaceShareModal(false);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        setReplaceShareModal(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const confirmDownload = async () => {\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      databucket_name: selectedBucket.name,\r\n      databucket_desc: selectedBucket.desc,\r\n      created_by: selectedBucket.created_by,\r\n      datasets: ConfirmShareData,\r\n      confirmation: \"yes\",\r\n    };\r\n    console.log(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/download_databucket/`,\r\n      data: {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        company_name: Auth.company_name,\r\n        databucket_name: selectedBucket.name,\r\n        databucket_desc: selectedBucket.desc,\r\n        created_by: selectedBucket.created_by,\r\n        datasets: ConfirmShareData,\r\n        confirmation: \"yes\",\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        setReplaceDownloadModal(false);\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        setReplaceDownloadModal(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const downloadBucket = async (data) => {\r\n    console.log(data);\r\n    let arr = [];\r\n    if (data && data.length !== 0) {\r\n      data.forEach((element) => {\r\n        if (element.checked === true) {\r\n          arr.push(element.name);\r\n        }\r\n      });\r\n    }\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      databucket_name: selectedBucket.name,\r\n      databucket_desc: selectedBucket.desc,\r\n      created_by: selectedBucket.created_by,\r\n      datasets: arr,\r\n      confirmation: \"no\",\r\n    };\r\n    console.log(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/download_databucket/`,\r\n      data: {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        company_name: Auth.company_name,\r\n        databucket_name: selectedBucket.name,\r\n        databucket_desc: selectedBucket.desc,\r\n        created_by: selectedBucket.created_by,\r\n        confirmation: \"no\",\r\n        datasets: arr,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        if (response.data.message === \"downloading started\") {\r\n          setdownloadModal(false);\r\n        } else if (response.data.message === \"conflict\") {\r\n          setdownloadModal(false);\r\n          setReplaceDownloadModal(true);\r\n          setConfirmShareData(response.data.already_exists);\r\n        }\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        setdownloadModal(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const deleteBucket = async (data) => {\r\n    let arr = [];\r\n    setloading(true);\r\n    setdeleteModal(false);\r\n    if (data && data.length !== 0) {\r\n      data.forEach((element) => {\r\n        if (element.checked === true) {\r\n          arr.push(element.name);\r\n        }\r\n      });\r\n    }\r\n    let s = \"\";\r\n    if (tab === \"My Data\") {\r\n      s = \"my_datasets\";\r\n    } else if (tab === \"Downloaded Data\") {\r\n      s = \"downloaded_datasets\";\r\n    } else if (tab === \"Global Data\") {\r\n      s = \"shared_datasets\";\r\n    }\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      databucket_name: selectedBucket.name,\r\n      datasets: arr,\r\n      space: s,\r\n    };\r\n    console.log(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/delete_databucket/`,\r\n      data: {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        company_name: Auth.company_name,\r\n        databucket_name: selectedBucket.name,\r\n        datasets: arr,\r\n        space: s,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        if (response.data.message === \"deleted\") {\r\n          setloading(false);\r\n          setrecallAPI(!recallAPI);\r\n        } else {\r\n          message.error(response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          message.error(\"Server Error\", error.response.status);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const createNewBucket = async (name, desc) => {\r\n    const myData = {\r\n      company_name: Auth.company_name,\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      databucket_name: name,\r\n      databucket_desc: desc,\r\n    };\r\n    console.log(myData);\r\n    const formData = serialize(myData);\r\n    setloading(true);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/create_databucket/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const startUploading = () => {\r\n    console.log(\"Upload Start\");\r\n  };\r\n\r\n  const setDataBucket = (id, item) => {\r\n    console.log(item);\r\n    setselected(id);\r\n    // setselectedBucket({\r\n    //   name: \"abc\",\r\n    //   datasets: [\r\n    //     {\r\n    //       name: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit,\",\r\n    //       desc: \"my name is dataset\",\r\n    //     },\r\n    //     { name: \"abc\", desc: \"my name is dataset\" },\r\n    //     { name: \"abc\", desc: \"my name is dataset\" },\r\n    //     { name: \"abc\", desc: \"my name is dataset\" },\r\n    //     { name: \"abc\", desc: \"my name is dataset\" },\r\n    //   ],\r\n    // });\r\n    setselectedBucket(item);\r\n    settitle(item.name);\r\n    setdescription(item.desc);\r\n    seteditabletitle(item.name);\r\n    seteditabledescription(item.desc);\r\n  };\r\n\r\n  const proceed = () => {\r\n    props.history.push({\r\n      pathname: `/datalake/${selectedBucket.name}/datasets/`,\r\n      state: {\r\n        detail: \"I am from Databuckets Screen\",\r\n        page_name: \"Datasets_Screen\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const showshareModal = async () => {\r\n    if (tab === \"My Data\") {\r\n      setloading(true);\r\n      await axios({\r\n        method: \"get\",\r\n        url: `${URL}/automl/share_databucket?company_id=${Auth.company_id}&user_id=${Auth.user_id}&databucket_name=${selectedBucket.name}`,\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          setshareModal(true);\r\n          console.log(response);\r\n          if (response.data) {\r\n            settempDatasets(response.data);\r\n          } else {\r\n            settempDatasets(null);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const showDeleteModal = async () => {\r\n    let s = \"\";\r\n    let enable = false;\r\n    if (tab === \"My Data\") {\r\n      s = \"p\";\r\n      enable = true;\r\n    } else if (tab === \"Downloaded Data\") {\r\n      s = \"d\";\r\n      enable = true;\r\n    } else if (tab === \"Global Data\") {\r\n      s = \"s\";\r\n      if (selectedBucket.created_by === Auth.user_id) {\r\n        enable = true;\r\n      }\r\n    }\r\n    if (enable) {\r\n      setloading(true);\r\n      let obj = {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        databucket_name: selectedBucket.name,\r\n        space: s,\r\n      };\r\n      console.log(obj);\r\n      await axios({\r\n        method: \"get\",\r\n        url: `${URL}/automl/delete_databucket?company_id=${Auth.company_id}&user_id=${Auth.user_id}&databucket_name=${selectedBucket.name}&space=${s}`,\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          setdeleteModal(true);\r\n          console.log(response);\r\n          if (response.data) {\r\n            let temp = [];\r\n            for (const [key, value] of Object.entries(response.data)) {\r\n              let obj = { name: key, used: value };\r\n              temp.push(obj);\r\n            }\r\n            settempDeleteDatasets(temp);\r\n          } else {\r\n            settempDeleteDatasets(null);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n        });\r\n    }\r\n  };\r\n\r\n  const DownloadLocally = async (data) => {\r\n    console.log(data);\r\n    let s = \"\";\r\n    if (tab === \"My Data\") {\r\n      s = \"my_datasets\";\r\n    } else if (tab === \"Downloaded Data\") {\r\n      s = \"downloaded_datasets\";\r\n    } else if (tab === \"Global Data\") {\r\n      s = \"shared_datasets\";\r\n    }\r\n    setdownloadPopover(false);\r\n    let arr = [];\r\n    if (data && data.length !== 0) {\r\n      data.forEach((element) => {\r\n        if (element.checked === true) {\r\n          arr.push(element.name);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (arr.length === 1) {\r\n      let obj = {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        company_name: Auth.company_name,\r\n        created_by: selectedBucket.created_by,\r\n        databucket_name: selectedBucket.name,\r\n        databucket_desc: selectedBucket.desc,\r\n        dataset_name: arr[0],\r\n        confirmation: \"no\",\r\n        download_type: \"local\",\r\n        space: s,\r\n      };\r\n      console.log(obj);\r\n      const formData = serialize(obj);\r\n      await axios({\r\n        method: \"post\",\r\n        url: `${URL}/automl/download_dataset/`,\r\n        data: formData,\r\n        headers: {\r\n          \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          console.log(response);\r\n          setdownloadLocalModal(false);\r\n          fileDownload(response.data, arr[0]);\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n          if (error.response) {\r\n            // Request made and server responded\r\n            console.log(error.response.data);\r\n            setdownloadLocalModal(false);\r\n            message.error(\"Server Error\", error.response.status);\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n          } else if (error.request) {\r\n            // The request was made but no response was received\r\n            console.log(error.request);\r\n          } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n          }\r\n        });\r\n    } else {\r\n      let obj = {\r\n        company_id: Auth.company_id,\r\n        user_id: selectedBucket.created_by,\r\n        company_name: Auth.company_name,\r\n        databucket_name: selectedBucket.name,\r\n        datasets: arr,\r\n        space: s,\r\n      };\r\n      console.log(obj);\r\n      await axios({\r\n        method: \"post\",\r\n        url: `${URL}/automl/download_databucket_local/`,\r\n        data: {\r\n          company_id: Auth.company_id,\r\n          user_id: selectedBucket.created_by,\r\n          company_name: Auth.company_name,\r\n          databucket_name: selectedBucket.name,\r\n          datasets: arr,\r\n          space: s,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          console.log(response);\r\n          setdownloadLocalModal(false);\r\n          fileDownload(response.data, \"filename.zip\");\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n          if (error.response) {\r\n            // Request made and server responded\r\n            console.log(error.response.data);\r\n            setdownloadLocalModal(false);\r\n            message.error(\"Server Error\", error.response.status);\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n          } else if (error.request) {\r\n            // The request was made but no response was received\r\n            console.log(error.request);\r\n          } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const showDownloadModal = async () => {\r\n    if (tab === \"Global Data\") {\r\n      setloading(true);\r\n      await axios({\r\n        method: \"get\",\r\n        url: `${URL}/automl/download_databucket?company_id=${Auth.company_id}&created_by=${selectedBucket.created_by}&databucket_name=${selectedBucket.name}`,\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          setdownloadPopover(false);\r\n          setdownloadModal(true);\r\n          console.log(response);\r\n          if (response.data) {\r\n            settempDownloadDatasets(response.data);\r\n          } else {\r\n            settempDownloadDatasets(null);\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n          setdownloadPopover(false);\r\n          if (error.response) {\r\n            // Request made and server responded\r\n            console.log(error.response.data);\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n          } else if (error.request) {\r\n            // The request was made but no response was received\r\n            console.log(error.request);\r\n          } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const showDownloadLocalModal = async () => {\r\n    setloading(true);\r\n    let s = \"\";\r\n    let url = \"\";\r\n    if (tab === \"My Data\") {\r\n      s = \"p\";\r\n      url = `${URL}/automl/datasets_list?company_id=${Auth.company_id}&user_id=${Auth.user_id}&databucket_name=${selectedBucket.name}&space=${s}`;\r\n    } else if (tab === \"Downloaded Data\") {\r\n      s = \"d\";\r\n      url = `${URL}/automl/datasets_list?company_id=${Auth.company_id}&user_id=${Auth.user_id}&databucket_name=${selectedBucket.name}&space=${s}`;\r\n    } else if (tab === \"Global Data\") {\r\n      s = \"s\";\r\n      url = `${URL}/automl/download_databucket?company_id=${Auth.company_id}&created_by=${selectedBucket.created_by}&databucket_name=${selectedBucket.name}`;\r\n    }\r\n    await axios({\r\n      method: \"get\",\r\n      url: url,\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        setdownloadPopover(false);\r\n        setdownloadLocalModal(true);\r\n        console.log(response);\r\n        if (response.data) {\r\n          settempDownloadLocalDatasets(response.data);\r\n        } else {\r\n          settempDownloadLocalDatasets(null);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        setdownloadPopover(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const renameBucket = async () => {\r\n    if (editable === true) {\r\n      if (title !== editabletitle || description !== editabledescription) {\r\n        let updated = {};\r\n        if (title !== editabletitle && description === editabledescription) {\r\n          updated = { databucket_name: editabletitle };\r\n        } else if (\r\n          title === editabletitle &&\r\n          description !== editabledescription\r\n        ) {\r\n          updated = { databucket_desc: editabledescription };\r\n        } else if (\r\n          title !== editabletitle &&\r\n          description !== editabledescription\r\n        ) {\r\n          updated = {\r\n            databucket_name: editabletitle,\r\n            databucket_desc: editabledescription,\r\n          };\r\n        }\r\n        setloading(true);\r\n        let obj = {\r\n          company_id: Auth.company_id,\r\n          user_id: Auth.user_id,\r\n          company_name: Auth.company_name,\r\n          databucket_name: selectedBucket.name,\r\n          update: updated,\r\n        };\r\n        console.log(obj);\r\n        await axios({\r\n          method: \"post\",\r\n          url: `${URL}/automl/edit_databucket/`,\r\n          data: {\r\n            company_id: Auth.company_id,\r\n            user_id: Auth.user_id,\r\n            company_name: Auth.company_name,\r\n            databucket_name: selectedBucket.name,\r\n            update: updated,\r\n          },\r\n        })\r\n          .then(function (response) {\r\n            setloading(false);\r\n            console.log(response);\r\n            if (response.data === \"Updated\") {\r\n              settitle(editabletitle);\r\n              setdescription(editabledescription);\r\n              setrecallAPI(!recallAPI);\r\n            }\r\n          })\r\n          .catch(function (error) {\r\n            setloading(false);\r\n            if (error.response) {\r\n              // Request made and server responded\r\n              console.log(error.response.data);\r\n              message.error(\"Error\", error.response.status);\r\n              console.log(error.response.status);\r\n              console.log(error.response.headers);\r\n            } else if (error.request) {\r\n              // The request was made but no response was received\r\n              console.log(error.request);\r\n            } else {\r\n              // Something happened in setting up the request that triggered an Error\r\n            }\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Row\r\n      justify=\"space-between\"\r\n      className={\"DataBucketsMain\"}\r\n      id=\"DataBucketsMain\"\r\n    >\r\n      <Col span={17} className={\"column1\"}>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <img\r\n            src={DataLakeTitle}\r\n            alt={\"text\"}\r\n            style={{ display: \"inline-block\", height: \"21px\", width: \"120px\" }}\r\n          />\r\n          <img\r\n            src={questionIcon}\r\n            alt={\"icon\"}\r\n            style={{ display: \"inline-block\", width: \"14px\", marginTop: \"3px\" }}\r\n          />\r\n        </div>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <div style={{ flexGrow: \"1\" }}>\r\n            <CustomTabs\r\n              options={[\"My Data\", \"Downloaded Data\", \"Global Data\"]}\r\n              setTab={(val) => {\r\n                settab(val);\r\n                setselected(null);\r\n                setselectedBucket(null);\r\n                seteditabledescription(\"\");\r\n                settitle(\"\");\r\n                seteditable(false);\r\n                setdescription(\"\");\r\n                seteditabletitle(\"\");\r\n                setsearchval(\"\");\r\n                setresettable(!resettable);\r\n              }}\r\n            />\r\n          </div>\r\n          <div\r\n            style={\r\n              selected !== null\r\n                ? { display: \"none\" }\r\n                : {\r\n                    borderBottom: \"1px solid #e8e8e8\",\r\n                    marginBottom: \"11px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"flex-end\",\r\n                  }\r\n            }\r\n          >\r\n            <div className=\"searchbar\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"search\"\r\n                autoComplete=\"off\"\r\n                style={{ backgroundImage: `url(${searchIcon})` }}\r\n                value={searchval}\r\n                onChange={(e) => {\r\n                  setselected(null);\r\n                  setselectedBucket(null);\r\n                  setresettable(!resettable);\r\n                  setsearchval(e.target.value);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={\r\n              selected !== null\r\n                ? {\r\n                    borderBottom: \"1px solid #e8e8e8\",\r\n                    marginBottom: \"11px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"flex-end\",\r\n                  }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            <div\r\n              style={\r\n                tab === \"Global Data\"\r\n                  ? { display: \"none\" }\r\n                  : selected === null || tab === \"Downloaded Data\"\r\n                  ? {\r\n                      display: \"flex\",\r\n                      height: \"16px\",\r\n                      marginBottom: \"9px\",\r\n                      marginRight: \"22px\",\r\n                      cursor: \"not-allowed\",\r\n                      opacity: \"0.3\",\r\n                    }\r\n                  : {\r\n                      display: \"flex\",\r\n                      height: \"16px\",\r\n                      marginBottom: \"9px\",\r\n                      marginRight: \"22px\",\r\n                      cursor: \"pointer\",\r\n                    }\r\n              }\r\n              onClick={() => {\r\n                showshareModal();\r\n              }}\r\n            >\r\n              <img\r\n                src={shareIcon}\r\n                alt=\"icon\"\r\n                style={{\r\n                  width: \"18px\",\r\n                  height: \"18px\",\r\n                  marginRight: \"5px\",\r\n                  marginTop: \"2px\",\r\n                }}\r\n              />\r\n              <span\r\n                style={{\r\n                  fontSize: \"14px\",\r\n                  height: \"16px\",\r\n                  color: \"#6D6D6D\",\r\n                }}\r\n              >\r\n                Share\r\n              </span>\r\n            </div>\r\n            <Popover\r\n              content={\r\n                <div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: \"14px\",\r\n                      color: \"#444444\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => showDownloadLocalModal()}\r\n                  >\r\n                    Download on Local Storage\r\n                  </div>\r\n                  <hr\r\n                    style={{\r\n                      backgroundColor: \"#E1EEFF\",\r\n                      border: \"none\",\r\n                      height: \"1px\",\r\n                      marginBottom: \"07px\",\r\n                      width: \"100%\",\r\n                    }}\r\n                  />\r\n                  <div\r\n                    style={\r\n                      tab === \"Downloaded Data\" || tab === \"My Data\"\r\n                        ? {\r\n                            fontSize: \"14px\",\r\n                            color: \"#444444\",\r\n                            cursor: \"not-allowed\",\r\n                            opacity: \"0.3\",\r\n                          }\r\n                        : {\r\n                            fontSize: \"14px\",\r\n                            color: \"#444444\",\r\n                            cursor: \"pointer\",\r\n                          }\r\n                    }\r\n                    onClick={() => showDownloadModal()}\r\n                  >\r\n                    Download on Cloud Storage\r\n                  </div>\r\n                </div>\r\n              }\r\n              placement=\"bottomRight\"\r\n              trigger=\"click\"\r\n              visible={downloadPopover}\r\n              onVisibleChange={() => setdownloadPopover(!downloadPopover)}\r\n            >\r\n              <div\r\n                style={\r\n                  selected === null\r\n                    ? {\r\n                        display: \"flex\",\r\n                        height: \"16px\",\r\n                        marginBottom: \"9px\",\r\n                        marginRight: \"22px\",\r\n                        cursor: \"not-allowed\",\r\n                        opacity: \"0.3\",\r\n                      }\r\n                    : {\r\n                        display: \"flex\",\r\n                        height: \"16px\",\r\n                        marginBottom: \"9px\",\r\n                        marginRight: \"22px\",\r\n                        cursor: \"pointer\",\r\n                      }\r\n                }\r\n              >\r\n                <img\r\n                  src={downloadIcon}\r\n                  alt=\"icon\"\r\n                  style={{\r\n                    width: \"16px\",\r\n                    height: \"16px\",\r\n                    marginRight: \"5px\",\r\n                    marginTop: \"2px\",\r\n                  }}\r\n                />\r\n                <span\r\n                  style={{\r\n                    fontSize: \"14px\",\r\n                    height: \"16px\",\r\n                    color: \"#6D6D6D\",\r\n                  }}\r\n                >\r\n                  Download\r\n                </span>\r\n              </div>\r\n            </Popover>\r\n            <div\r\n              style={\r\n                selectedBucket && selectedBucket.created_by !== Auth.user_id\r\n                  ? {\r\n                      display: \"flex\",\r\n                      height: \"16px\",\r\n                      marginBottom: \"9px\",\r\n                      marginRight: \"18px\",\r\n                      cursor: \"not-allowed\",\r\n                      opacity: \"0.3\",\r\n                    }\r\n                  : {\r\n                      display: \"flex\",\r\n                      height: \"16px\",\r\n                      marginBottom: \"9px\",\r\n                      marginRight: \"18px\",\r\n                      cursor: \"pointer\",\r\n                    }\r\n              }\r\n              onClick={() => {\r\n                showDeleteModal();\r\n              }}\r\n            >\r\n              <img\r\n                src={deleteIcon}\r\n                alt=\"icon\"\r\n                style={{ width: \"18px\", height: \"18px\", marginRight: \"5px\" }}\r\n              />\r\n              <span\r\n                style={{\r\n                  fontSize: \"14px\",\r\n                  height: \"10px\",\r\n                  color: \"#6D6D6D\",\r\n                  marginRight: \"15px\",\r\n                }}\r\n              >\r\n                Delete\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{ flexGrow: \"1\", overflow: \"scroll\" }}>\r\n          <DataLakeDatabucketstable\r\n            selected={(id, item) => {\r\n              setDataBucket(id, item);\r\n            }}\r\n            recallAPI={recallAPI}\r\n            SpaceInfo={(val) => setSpaceInfo(val)}\r\n            tab={tab}\r\n            reset={resettable}\r\n            render={rendertable}\r\n            value={searchval}\r\n          />\r\n        </div>\r\n        <Button\r\n          className=\"proceedButton\"\r\n          style={\r\n            tab === \"Removed Check\"\r\n              ? { display: \"none\" }\r\n              : selected === null\r\n              ? { opacity: \"0.3\", cursor: \"not-allowed\" }\r\n              : null\r\n          }\r\n          onClick={() => {\r\n            if (selected !== null) {\r\n              proceed();\r\n            }\r\n          }}\r\n        >\r\n          Proceed\r\n        </Button>\r\n      </Col>\r\n      <Col span={7} className={\"column2\"}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            fontFamily: \"Lato\",\r\n            marginTop: \"5px\",\r\n            height: \"30px\",\r\n          }}\r\n        >\r\n          {editable === false ? (\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontSize: \"18px\",\r\n                fontWeight: \"normal\",\r\n                lineHeight: \"24px\",\r\n                fontFamily: \"Lato\",\r\n                color: \"#085fab\",\r\n              }}\r\n            >\r\n              {title}\r\n            </h2>\r\n          ) : (\r\n            <div style={{ flexGrow: \"1\" }}>\r\n              <Input\r\n                value={editabletitle}\r\n                maxLength={30}\r\n                style={{\r\n                  height: \"30px\",\r\n                  fontSize: \"18px\",\r\n                  fontWeight: \"normal\",\r\n                  lineHeight: \"24px\",\r\n                  fontFamily: \"Lato\",\r\n                  width: \"80%\",\r\n                  color: \"#085fab\",\r\n                  // borderRadius: \"10px\",\r\n                  // padding: \"10px\",\r\n                }}\r\n                onChange={(e) => seteditabletitle(e.target.value)}\r\n              />\r\n            </div>\r\n          )}\r\n          <a\r\n            style={\r\n              editable === true\r\n                ? {\r\n                    textDecoration: \"none\",\r\n                    color: \"#6d6d6d\",\r\n                    marginRight: \"23px\",\r\n                    fontSize: \"14px\",\r\n                  }\r\n                : { display: \"none\" }\r\n            }\r\n            onClick={() => {\r\n              seteditabletitle(title);\r\n              seteditabledescription(description);\r\n              seteditable(!editable);\r\n            }}\r\n          >\r\n            Discard\r\n          </a>\r\n          <div\r\n            style={\r\n              tab === \"My Data\" && title !== \"\"\r\n                ? { cursor: \"pointer\" }\r\n                : { display: \"none\" }\r\n            }\r\n            onClick={() => {\r\n              renameBucket();\r\n              seteditable(!editable);\r\n            }}\r\n          >\r\n            <img\r\n              src={editable === true ? saveIcon : editIcon}\r\n              alt=\"edit icon\"\r\n              style={{ width: \"16px\", marginBottom: \"2px\" }}\r\n            ></img>\r\n            {/* <span\r\n              style={{\r\n                fontWeight: \"700\",\r\n                fontSize: \"14px\",\r\n                marginLeft: \"4px\",\r\n                color: \"#6D6D6D\",\r\n                fontFamily: \"Lato\",\r\n              }}\r\n            >\r\n              {editable === true ? \"Save\" : \" Edit\"}\r\n            </span> */}\r\n          </div>\r\n        </div>\r\n        <div style={{ overflowY: \"scroll\", paddingRight: \"0px\" }}>\r\n          <div\r\n            style={{ marginTop: \"15px\", height: \"110px\", overflow: \"hidden\" }}\r\n          >\r\n            <p\r\n              style={\r\n                editable === false\r\n                  ? { fontFamily: \"Lato\", fontSize: \"14px\", color: \"#6D6D6D\" }\r\n                  : { display: \"none\" }\r\n              }\r\n            >\r\n              {description}\r\n            </p>\r\n            <TextArea\r\n              style={\r\n                editable === true\r\n                  ? { fontFamily: \"Lato\", fontSize: \"14px\", color: \"#6D6D6D\" }\r\n                  : { display: \"none\" }\r\n              }\r\n              value={editabledescription}\r\n              onChange={(e) => seteditabledescription(e.target.value)}\r\n              placeholder=\"Controlled autosize\"\r\n              autoSize={{ minRows: 3, maxRows: 5 }}\r\n              maxLength={300}\r\n            />\r\n          </div>{\" \"}\r\n          <div>\r\n            <DataLakeSpaceGraph data={SpaceInfo} />\r\n            <div style={{ display: \"flex\", marginTop: \"12px\" }}>\r\n              <img\r\n                alt={\"text\"}\r\n                src={darkBlueIcon}\r\n                width={18}\r\n                style={{ marginRight: \"25px\" }}\r\n              />\r\n              <span\r\n                style={{ flexGrow: \"1\", fontSize: \"13px\", marginTop: \"2px\" }}\r\n              >\r\n                Free Space on Cloud\r\n              </span>\r\n              <span\r\n                style={{ fontSize: \"13px\", marginTop: \"2px\", color: \"#6d6d6d\" }}\r\n              >\r\n                {SpaceInfo.free_space}\r\n              </span>\r\n            </div>\r\n            <div style={{ display: \"flex\", marginTop: \"12px\" }}>\r\n              <img\r\n                alt={\"text\"}\r\n                src={blueIcon}\r\n                width={18}\r\n                style={{ marginRight: \"25px\" }}\r\n              />\r\n              <span\r\n                style={{ flexGrow: \"1\", fontSize: \"13px\", marginTop: \"2px\" }}\r\n              >\r\n                Used Space on Cloud\r\n              </span>\r\n              <span\r\n                style={{ fontSize: \"13px\", marginTop: \"2px\", color: \"#6d6d6d\" }}\r\n              >\r\n                {SpaceInfo.used_space}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        />\r\n        <div\r\n          style={\r\n            tab === \"My Data\"\r\n              ? {\r\n                  display: \"flex\",\r\n                  height: \"16px\",\r\n                  marginBottom: \"9px\",\r\n                  marginRight: \"18px\",\r\n                  cursor: \"pointer\",\r\n                }\r\n              : { display: \"none\" }\r\n          }\r\n          onClick={() => setnewBucketModal(true)}\r\n        >\r\n          <img\r\n            src={newBucketIcon}\r\n            alt=\"icon\"\r\n            style={{ width: \"23px\", height: \"19px\", marginRight: \"5px\" }}\r\n          />\r\n          <span\r\n            style={{\r\n              fontSize: \"14px\",\r\n              height: \"16px\",\r\n              color: \"#085fab\",\r\n            }}\r\n          >\r\n            New Databucket\r\n          </span>\r\n        </div>\r\n        {/* <div\r\n          style={{\r\n            display: \"flex\",\r\n            height: \"16px\",\r\n            marginBottom: \"9px\",\r\n            marginRight: \"18px\",\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={() => setuploadDatasetModal(true)}\r\n        >\r\n          <img\r\n            src={uploadIcon}\r\n            alt=\"icon\"\r\n            style={{ width: \"16px\", height: \"19px\", marginRight: \"12px\" }}\r\n          />\r\n          <span\r\n            style={{\r\n              fontSize: \"14px\",\r\n              height: \"16px\",\r\n              color: \"#085fab\",\r\n            }}\r\n          >\r\n            Upload Dataset\r\n          </span>\r\n        </div> */}\r\n        <br />\r\n      </Col>\r\n      <DataLakeBucketShareModal\r\n        data={selectedBucket}\r\n        datasets={tempDatasets}\r\n        isModalVisible={shareModal}\r\n        handleCancel={() => {\r\n          settempDatasets(null);\r\n          setshareModal(false);\r\n        }}\r\n        handleOK={(data) => shareBucket(data)}\r\n      />\r\n      <BucketShareReplaceModal\r\n        isModalVisible={ReplaceShareModal}\r\n        handleCancel={() => setReplaceShareModal(false)}\r\n        handleOK={() => confirmShare()}\r\n      />\r\n      <BucketShareReplaceModal\r\n        isModalVisible={ReplaceDownloadModal}\r\n        handleCancel={() => setReplaceDownloadModal(false)}\r\n        handleOK={() => confirmDownload()}\r\n      />\r\n      <DataLakeBucketDownloadModal\r\n        data={selectedBucket}\r\n        datasets={tempDownloadDatasets}\r\n        isModalVisible={downloadModal}\r\n        handleCancel={() => {\r\n          settempDownloadDatasets(null);\r\n          setdownloadModal(false);\r\n        }}\r\n        handleOK={(data) => downloadBucket(data)}\r\n      />\r\n      <DataLakeBucketDownloadModal\r\n        data={selectedBucket}\r\n        datasets={tempDownloadLocalDatasets}\r\n        isModalVisible={downloadLocalModal}\r\n        handleCancel={() => {\r\n          settempDownloadLocalDatasets(null);\r\n          setdownloadLocalModal(false);\r\n        }}\r\n        handleOK={(data) => DownloadLocally(data)}\r\n      />\r\n      <DataLakeBucketDeleteModal\r\n        data={selectedBucket}\r\n        datasets={tempDeleteDatasets}\r\n        isModalVisible={deleteModal}\r\n        handleCancel={() => {\r\n          settempDeleteDatasets(null);\r\n          setdeleteModal(false);\r\n        }}\r\n        handleOK={(data) => deleteBucket(data)}\r\n      />\r\n      <DataLakeNewBucketModal\r\n        isModalVisible={newBucketModal}\r\n        handleCancel={() => setnewBucketModal(false)}\r\n        recallAPI={() => {\r\n          setnewBucketModal(false);\r\n          setrecallAPI(!recallAPI);\r\n        }}\r\n        handleOK={(name, desc) => createNewBucket(name, desc)}\r\n      />\r\n      <DataLakeUploadDatasetModal\r\n        isModalVisible={uploadDatasetModal}\r\n        handleCancel={() => setuploadDatasetModal(false)}\r\n        handleOK={() => startUploading()}\r\n      />\r\n      <div style={{ position: \"fixed\", bottom: \"0\", right: \"0\" }}>\r\n        <UploadCollapsable />\r\n      </div>\r\n      <Cliploader loading={loading} handleCancel={() => setloading(false)} />\r\n    </Row>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Tabs\\CustomTabs\\CustomTabs.js",[],"D:\\Work\\beyond-data\\src\\Components\\Graphs\\DataLakeSpaceGraph\\DataLakeSpaceGraph.js",["561","562","563","564"],"import React, { useEffect, useState } from \"react\";\r\nimport Chart from \"chart.js\";\r\nimport \"./styles.css\";\r\n\r\nexport default function DataLakeSpaceGraph(props) {\r\n  const [ChartRef, setChartRef] = useState(React.createRef());\r\n  const [rendered, setrendered] = useState(false);\r\n\r\n  let data = {\r\n    datasets: [\r\n      {\r\n        label: \"My First Dataset\",\r\n        // data: props.data\r\n        //   ? [parseInt(props.data.free_space), parseInt(props.data.used_space)]\r\n        //   : [5, 1],\r\n        data: [5, 1],\r\n        backgroundColor: [\"#e1eeff\", \"#085fab\"],\r\n        borderRadius: 30,\r\n        borderWidth: 10,\r\n        borderColor: \"#f5faff\",\r\n        hoverOffset: 0,\r\n      },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    var ctx = ChartRef.current.getContext(\"2d\");\r\n    var myChart = new Chart(ctx, {\r\n      type: \"doughnut\",\r\n      data: data,\r\n      options: {\r\n        responsive: false,\r\n        cutoutPercentage: \"70\",\r\n      },\r\n    });\r\n  }, [rendered]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <div class=\"circle\">\r\n        <div className=\"text\">\r\n          12GB <span class=\"subtext\">Free Space</span>{\" \"}\r\n        </div>\r\n      </div> */}\r\n      <canvas\r\n        id=\"myChart\"\r\n        ref={ChartRef}\r\n        // width={\"60%\"}\r\n        style={{\r\n          display: \"block\",\r\n          margin: \"auto\",\r\n          width: \"60%\",\r\n          height: \"100%\",\r\n        }}\r\n      ></canvas>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Tables\\DataLakeDatabucketstable\\DataLakeDatabucketstable.js",["565","566","567","568","569","570"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport NoData from \"../../NoData/NoData\";\r\nimport styles from \"./DataLakeDatabucketstable.module.scss\";\r\nimport bucketIcon from \"../../Icons/DataLake/bucketIcon.svg\";\r\nimport { DataLakeBucketContext } from \"../../../Data/Contexts/DataLake/DataLakeBucketContext/DataLakeBucketContext\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport axios from \"axios\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport Cliploader from \"../../Loader/Cliploader\";\r\n\r\nexport default function DataLakeDatabucketstable(props) {\r\n  const [data, setdata] = useState(null);\r\n  const [selected, setselected] = useState(null);\r\n  const [data1, setdata1] = useState(null);\r\n  const [loading, setloading] = useState(false);\r\n\r\n  const [tempData, settempData] = useState(null);\r\n\r\n  const { Bucket, setBucket } = useContext(DataLakeBucketContext);\r\n  const { Auth } = useContext(AuthContext);\r\n\r\n  useEffect(() => {\r\n    if (props.value === \"\") {\r\n      setdata(tempData);\r\n    } else {\r\n      let temp = [];\r\n      tempData.forEach((element) => {\r\n        if (element.name.includes(props.value)) {\r\n          temp.push(element);\r\n        }\r\n      });\r\n      setdata(temp);\r\n    }\r\n  }, [props.value]);\r\n\r\n  const loadBuckets = async () => {\r\n    let s = \"\";\r\n    if (props.tab === \"My Data\") {\r\n      s = \"p\";\r\n    } else if (props.tab === \"Downloaded Data\") {\r\n      s = \"d\";\r\n    } else if (props.tab === \"Global Data\") {\r\n      s = \"s\";\r\n    }\r\n    setloading(true);\r\n    setdata1([{}]);\r\n    let temp = [];\r\n    await axios({\r\n      method: \"get\",\r\n      url: `${URL}/automl/load_databuckets/?company_name=${Auth.company_name}&company_id=${Auth.company_id}&user_id=${Auth.user_id}&space=${s}&total_user_space=5`,\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        if (response.data.buckets_info) {\r\n          response.data.buckets_info.forEach((element) => {\r\n            let obj = {\r\n              name: element.databucket_name,\r\n              desc: element.databucket_desc,\r\n              last_modified: element.last_modified,\r\n              created_by: element.user_name ? element.user_name : Auth.user_id,\r\n              size: element.size + \" GB\",\r\n            };\r\n            temp.push(obj);\r\n          });\r\n          setdata(temp);\r\n          settempData(temp);\r\n        }\r\n        console.log(response);\r\n        props.SpaceInfo(response.data.space_info);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        setdata(null);\r\n        settempData(null);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadBuckets();\r\n  }, [props.tab]);\r\n\r\n  useEffect(() => {\r\n    loadBuckets();\r\n  }, [props.recallAPI]);\r\n\r\n  useEffect(() => {\r\n    let trs = document.getElementsByTagName(\"tr\");\r\n    setselected(null);\r\n    for (var x of trs) {\r\n      x.style.backgroundColor = \"white\";\r\n      x.style.borderBottom = \"0.5px solid #e2e9ef\";\r\n      // var css = \"tbody tr:hover { background: red;}\";\r\n      // var s = document.createElement(\"style\");\r\n\r\n      // if (s.styleSheet) {\r\n      //   s.styleSheet.cssText = css;\r\n      // } else {\r\n      //   s.appendChild(document.createTextNode(css));\r\n      // }\r\n      // x.appendChild(s);\r\n      x.className = \"\";\r\n    }\r\n    let tds = document.getElementsByTagName(\"td\");\r\n    for (var y of tds) {\r\n      y.style.fontWeight = \"normal\";\r\n      y.style.color = \"#6D6d6d\";\r\n    }\r\n  }, [props.reset]);\r\n\r\n  const rowclick = (id) => {\r\n    let trs = document.getElementsByTagName(\"tr\");\r\n    for (var x of trs) {\r\n      x.style.backgroundColor = \"white\";\r\n      x.style.borderBottom = \"0.5px solid #e2e9ef\";\r\n      // var css = \"tbody tr:hover { background: red;}\";\r\n      // var s = document.createElement(\"style\");\r\n\r\n      // if (s.styleSheet) {\r\n      //   s.styleSheet.cssText = css;\r\n      // } else {\r\n      //   s.appendChild(document.createTextNode(css));\r\n      // }\r\n      // x.appendChild(s);\r\n      x.className = \"\";\r\n    }\r\n    let tds = document.getElementsByTagName(\"td\");\r\n    for (var y of tds) {\r\n      y.style.fontWeight = \"normal\";\r\n      y.style.color = \"#6D6d6d\";\r\n    }\r\n    setselected(id);\r\n    document.getElementById(id).className = \"selected\";\r\n    document.getElementById(id).style.backgroundColor = \"#e1eeff\";\r\n    document.getElementById(id).style.borderBottom = \"none\";\r\n    let list = document.getElementById(id).children;\r\n    for (var i = 0; i < list.length; i++) {\r\n      list[i].style.fontWeight = \"700\";\r\n      // if (i === 0) {\r\n      //   list[i].style.backgroundColor = \"#085FAB\";\r\n      // }\r\n    }\r\n    console.log(data[id]);\r\n    setBucket({ bucket: data[id], type: props.tab });\r\n    props.selected(id, data[id]);\r\n  };\r\n\r\n  const Hoverover = (index) => {\r\n    // console.log(document.getElementById(index));\r\n    if (document.getElementsByClassName(\"selected\")[0]) {\r\n      if (document.getElementsByClassName(\"selected\")[0].id !== index) {\r\n        document.getElementById(index).style.backgroundColor = \"#e1eeff\";\r\n      }\r\n    }\r\n  };\r\n  const Hovercancel = (index) => {\r\n    // console.log(document.getElementById(index));\r\n    if (document.getElementsByClassName(\"selected\")[0]) {\r\n      if (\r\n        parseInt(document.getElementsByClassName(\"selected\")[0].id) !== index\r\n      ) {\r\n        document.getElementById(index).style.backgroundColor = \"white\";\r\n      } else {\r\n        document.getElementById(index).style.backgroundColor = \"#e1eeff\";\r\n      }\r\n    }\r\n  };\r\n\r\n  const getrows = () => {\r\n    return data.map((item, index) => {\r\n      return (\r\n        <tr\r\n          id={index}\r\n          key={index}\r\n          onClick={() => {\r\n            rowclick(index);\r\n            // props.selected(item.key);\r\n          }}\r\n          onMouseOver={() => Hoverover(index)}\r\n          onMouseLeave={() => Hovercancel(index)}\r\n        >\r\n          <td\r\n            style={selected === index ? { backgroundColor: \"#085fab\" } : null}\r\n          ></td>\r\n          <td>\r\n            <img src={bucketIcon} alt={\"icon\"} style={{ width: \"15px\" }} />\r\n          </td>\r\n          <td\r\n            className={styles.description}\r\n            style={{\r\n              overflow: \"hidden\",\r\n              textOverflow: \"ellipsis\",\r\n              paddingRight: \"70px\",\r\n            }}\r\n          >\r\n            {\" \"}\r\n            {item.name}{\" \"}\r\n          </td>\r\n          <td>{item.created_by}</td>\r\n          <td className={styles.model_last_modified}>\r\n            <p style={{ margin: \"0px\", padding: \"0\", fontSize: \"13px\" }}>\r\n              {item.last_modified}\r\n            </p>\r\n          </td>\r\n          <td>{item.size}</td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.DataLakeDatabucketstable}>\r\n      <Cliploader loading={loading} handleCancel={() => setloading(false)} />\r\n      {data ? (\r\n        <table className={styles.datatable}>\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th> </th>\r\n              <th>Name</th>\r\n              <th>Created by</th>\r\n              <th>Last Modified</th>\r\n              <th>Size</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{getrows()}</tbody>\r\n        </table>\r\n      ) : (\r\n        <NoData text=\"No Data\" />\r\n        // <Empty style={{ marginTop: \"20px\" }} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeBucketShareModal\\DataLakeBucketShareModal.js",["571"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport ShareAvatar from \"../../Images/AutoML/shareAvatar.svg\";\r\nimport \"./DataLakeBucketShareModal.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\n\r\nexport default function DataLakeBucketShareModal(props) {\r\n  const [pin, setpin] = useState(\"\");\r\n  const [datasets, setdatasets] = useState(null);\r\n  const [rendered, setrendered] = useState(false);\r\n\r\n  if (datasets === null && props.datasets) {\r\n    let temp = [];\r\n    if (props.datasets) {\r\n      props.datasets.forEach((item) => {\r\n        let obj = { name: item, checked: true };\r\n        temp.push(obj);\r\n      });\r\n      setdatasets(temp);\r\n    }\r\n  }\r\n\r\n  const clickcheckbox = (index, val) => {\r\n    let temp = datasets;\r\n    temp[index].checked = !temp[index].checked;\r\n    setdatasets(temp);\r\n    setrendered(!rendered);\r\n  };\r\n\r\n  return (\r\n    <div className=\"DataLakeBucketShareModal\">\r\n      <Modal\r\n        width={\"40%\"}\r\n        centered\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={() => {\r\n          setdatasets(null);\r\n          props.handleCancel();\r\n        }}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EFF4F9\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"25px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"500\",\r\n                color: \"#90A8BE\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"normal\",\r\n              }}\r\n            >\r\n              Are you Sure?\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            <img\r\n              src={ShareAvatar}\r\n              style={{\r\n                width: \"73px\",\r\n                height: \"107px\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n                marginLeft: \"30px\",\r\n                marginRight: \"20px\",\r\n                marginBottom: \"20px\",\r\n                marginTop: \"0px\",\r\n              }}\r\n            />\r\n            <div>\r\n              <h2\r\n                style={{\r\n                  fontFamily: \"Lato\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"18px\",\r\n                  textAlign: \"left\",\r\n                  fontStyle: \"normal\",\r\n                }}\r\n              >\r\n                Share Data Bucket\r\n              </h2>\r\n              <p\r\n                style={{\r\n                  padding: \"25px\",\r\n                  paddingLeft: \"0px\",\r\n                  paddingTop: \"0px\",\r\n                  fontFamily: \"Lato\",\r\n                  fontSize: \"13px\",\r\n                  fontStyle: \"normal\",\r\n                  color: \"#A1A1A1\",\r\n                  textAlign: \"left\",\r\n                }}\r\n              >\r\n                Sharing this Data Bucket will result in sharing of all the\r\n                Datasets selected below. Unselect the Dataset which you do not\r\n                intent to share.{\" \"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <p\r\n            style={{\r\n              textAlign: \"left\",\r\n              marginLeft: \"30px\",\r\n              color: \"black\",\r\n              fontWeight: \"bold\",\r\n              fontStyle: \"normal\",\r\n              marginBottom: \"5px\",\r\n            }}\r\n          >\r\n            Datasets\r\n          </p>\r\n          <div style={{ height: \"15vh\", overflow: \"scroll\" }}>\r\n            {datasets && datasets.length > 0\r\n              ? datasets.map((item, index) => (\r\n                  <div\r\n                    key={index}\r\n                    style={{ textAlign: \"left\", display: \"flex\" }}\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"vehicle1\"\r\n                      name=\"vehicle1\"\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                        marginLeft: \"30px\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      checked={item.checked}\r\n                      onChange={(e) => clickcheckbox(index, e.target.value)}\r\n                    />\r\n                    <p\r\n                      style={{\r\n                        flexGrow: \"1\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </p>\r\n                    {/* <p\r\n                      style={{\r\n                        marginRight: \"20px\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"normal\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.desc}\r\n                    </p> */}\r\n                    <br />\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </div>\r\n          <input\r\n            placeholder=\"Enter 4 Digits Pin to confirm\"\r\n            type=\"text\"\r\n            maxLength={4}\r\n            autoComplete=\"off\"\r\n            value={pin}\r\n            style={{\r\n              width: \"50%\",\r\n              margin: \"auto\",\r\n              marginBottom: \"15px\",\r\n              borderRadius: \"10px\",\r\n            }}\r\n            onChange={(e) => setpin(e.target.value)}\r\n          />\r\n\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"#E2E9EF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n          <div style={{ marginBottom: \"0px\" }}>\r\n            <Button\r\n              style={{\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"white\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n                color: \"#085FAB\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n              }}\r\n              onClick={() => {\r\n                setdatasets(null);\r\n                props.handleCancel();\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                width: \"130px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"#085FAB\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                letterSpacing: \"0.5px\",\r\n                color: \"white\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n                borderColor: \"none\",\r\n              }}\r\n              onClick={() => props.handleOK(datasets)}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeNewBucketModal\\DataLakeNewBucketModal.js",["572","573","574","575","576"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport ShareAvatar from \"../../Images/AutoML/shareAvatar.svg\";\r\nimport \"./DataLakeNewBucketModal.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport axios from \"axios\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport Cliploader from \"../../Loader/Cliploader\";\r\n\r\nexport default function DataLakeNewBucketModal(props) {\r\n  const [Message, setMessage] = useState(\"\");\r\n  const [m_name, setm_name] = useState(\"\");\r\n  const [m_desc, setm_desc] = useState(\"\");\r\n  const [m_name_error, setm_name_error] = useState(null);\r\n  const [enable, setenable] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n\r\n  const { Auth } = useContext(AuthContext);\r\n\r\n  const validate = async (e) => {\r\n    setenable(true);\r\n    setm_name_error(null);\r\n    document.getElementById(\"project_name\").style.borderColor = \"#40a9ff\";\r\n    await setm_name(e.target.value);\r\n    var format = /[!@#$%^&*()+\\=\\[\\]{};':\"\\\\|,<>\\/?]+/;\r\n    if (format.test(e.target.value) || format.test(e.target.value)) {\r\n      // let textfield = document.getElementById(\"project_name\");\r\n      // textfield.style.backgroundColor = \"red\";\r\n      setenable(false);\r\n      setm_name_error(\"Model Name contains special characters\");\r\n      document.getElementById(\"project_name\").style.borderColor = \"#EC547A\";\r\n      document.getElementById(\"project_name\").style.boxShadow = \"none\";\r\n    } else {\r\n      setenable(true);\r\n      document.getElementById(\"project_name\").style.borderColor = \"#40a9ff\";\r\n    }\r\n    let name = \"\";\r\n    if (e.target.value.length === 0) {\r\n      name = e.target.value;\r\n    } else {\r\n      name = e.target.value;\r\n    }\r\n    if (e.target.value.length < 3) {\r\n      setenable(false);\r\n      setm_name_error(\"Model Name should be 3 Characters Minimum\");\r\n      document.getElementById(\"project_name\").style.borderColor = \"#EC547A\";\r\n      document.getElementById(\"project_name\").style.boxShadow = \"none\";\r\n    }\r\n    if (\r\n      name[0] === \" \" ||\r\n      name[0] === \"_\" ||\r\n      name[0] === \"-\" ||\r\n      name[0] === \".\" ||\r\n      name[0] === \",\"\r\n    ) {\r\n      setenable(false);\r\n      setm_name_error(\r\n        \"Model Name first character cannot be a special character\"\r\n      );\r\n      document.getElementById(\"project_name\").style.borderColor = \"#EC547A\";\r\n      document.getElementById(\"project_name\").style.boxShadow = \"none\";\r\n    }\r\n  };\r\n\r\n  const createBucket = async () => {\r\n    if (enable === true) {\r\n      const myData = {\r\n        company_name: Auth.company_name,\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        databucket_name: m_name,\r\n        databucket_desc: m_desc,\r\n      };\r\n      const formData = serialize(myData);\r\n      setloading(true);\r\n      await axios({\r\n        method: \"post\",\r\n        url: `${URL}/automl/create_databucket/`,\r\n        data: formData,\r\n        headers: {\r\n          \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          console.log(response);\r\n          props.recallAPI();\r\n          setm_name(null);\r\n          setm_desc(\"\");\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n          if (error.response) {\r\n            // Request made and server responded\r\n            console.log(error.response.data);\r\n            console.log(error.response.status);\r\n            setm_name_error(error.response.data);\r\n            setenable(false);\r\n            console.log(error.response.headers);\r\n          } else if (error.request) {\r\n            // The request was made but no response was received\r\n            console.log(error.request);\r\n          } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"DataLakeNewBucketModal\">\r\n      <Modal\r\n        width={\"35%\"}\r\n        wrapClassName=\"DataLakeNewBucketModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={props.handleCancel}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <Cliploader loading={loading} handleCancel={() => setloading(false)} />\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EFF4F9\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"15px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"bold\",\r\n                color: \"#90A8BE\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"normal\",\r\n              }}\r\n            >\r\n              Create New Data Bucket\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n            marginLeft: \"15px\",\r\n            marginRight: \"15px\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              textAlign: \"left\",\r\n              fontStyle: \"normal\",\r\n              fontWeight: \"bold\",\r\n              fontSize: \"14px\",\r\n              color: \"black\",\r\n              marginLeft: \"16px\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          >\r\n            Data Bucket Name\r\n          </div>\r\n          <input\r\n            placeholder=\"Enter data bucket name\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            id=\"project_name\"\r\n            value={m_name}\r\n            maxLength={30}\r\n            minLength={5}\r\n            onChange={(e) => validate(e)}\r\n          />\r\n          <p\r\n            style={\r\n              m_name_error === null\r\n                ? { display: \"none\" }\r\n                : {\r\n                    color: \"#EC547A\",\r\n                    fontSize: \"14px\",\r\n                    fontFamily: \"Lato\",\r\n                    textAlign: \"left\",\r\n                    fontStyle: \"normal\",\r\n                    marginLeft: \"16px\",\r\n                  }\r\n            }\r\n          >\r\n            *{m_name_error}\r\n          </p>\r\n\r\n          <div\r\n            style={{\r\n              textAlign: \"left\",\r\n              marginLeft: \"16px\",\r\n              fontStyle: \"normal\",\r\n              color: \"#EC547A\",\r\n            }}\r\n          >\r\n            {Message}\r\n          </div>\r\n          <div\r\n            style={{\r\n              textAlign: \"left\",\r\n              fontStyle: \"normal\",\r\n              fontWeight: \"bold\",\r\n              fontSize: \"14px\",\r\n              color: \"black\",\r\n              marginLeft: \"16px\",\r\n              marginBottom: \"10px\",\r\n              marginTop: \"10px\",\r\n            }}\r\n          >\r\n            Data Bucket Description\r\n          </div>\r\n          <input\r\n            placeholder=\"Enter data bucket description\"\r\n            type=\"text\"\r\n            maxLength={300}\r\n            value={m_desc}\r\n            onChange={(e) => setm_desc(e.target.value)}\r\n            style={{ marginBottom: \"15px\" }}\r\n            autoComplete=\"off\"\r\n          />\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"#E2E9EF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n          <div style={{ marginBottom: \"0px\" }}>\r\n            <Button\r\n              style={{\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"white\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n                color: \"#085FAB\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n              }}\r\n              onClick={props.handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={\r\n                enable\r\n                  ? {\r\n                      width: \"130px\",\r\n                      height: \"35px\",\r\n                      backgroundColor: \"#085FAB\",\r\n                      fontFamily: \"Lato\",\r\n                      fontSize: \"14px\",\r\n                      fontWeight: \"normal\",\r\n                      letterSpacing: \"0.5px\",\r\n                      color: \"white\",\r\n                      border: \"none\",\r\n                      borderRadius: \"65px\",\r\n                      borderColor: \"none\",\r\n                    }\r\n                  : {\r\n                      width: \"130px\",\r\n                      height: \"35px\",\r\n                      backgroundColor: \"#085FAB\",\r\n                      fontFamily: \"Lato\",\r\n                      fontSize: \"14px\",\r\n                      fontWeight: \"normal\",\r\n                      letterSpacing: \"0.5px\",\r\n                      color: \"white\",\r\n                      border: \"none\",\r\n                      borderRadius: \"65px\",\r\n                      borderColor: \"none\",\r\n                      cursor: \"not-allowed\",\r\n                      opacity: \"0.3\",\r\n                    }\r\n              }\r\n              onClick={() => {\r\n                createBucket();\r\n                // props.handleOK(m_name, m_desc)\r\n              }}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeUploadDatasetModal\\DataLakeUploadDatasetModal.js",["577","578","579"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useContext, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport ShareAvatar from \"../../Images/AutoML/shareAvatar.svg\";\r\nimport \"./DataLakeUploadDatasetModal.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\nimport DataLakeDropZone from \"../../Dropzone/DataLakeDropZone/DataLakeDropZone\";\r\nimport { DataLakeFileUploadContext } from \"../../../Data/Contexts/DataLakeFileUploadContext/DataLakeFileUploadContext\";\r\n\r\nexport default function DataLakeUploadDatasetModal(props) {\r\n  const { Files, setFiles } = useContext(DataLakeFileUploadContext);\r\n\r\n  return (\r\n    <div className=\"DataLakeUploadDatasetModal\">\r\n      <Modal\r\n        width={\"50%\"}\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={props.handleCancel}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EFF4F9\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"15px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"bold\",\r\n                color: \"#90A8BE\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"normal\",\r\n              }}\r\n            >\r\n              Drop your files here\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            marginLeft: \"20px\",\r\n            marginRight: \"20px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <DataLakeDropZone setFile={(files) => setFiles(files)} />\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"#E2E9EF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n          <div style={{ marginBottom: \"19px\" }}>\r\n            <Button\r\n              style={{\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"white\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n                color: \"#085FAB\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n              }}\r\n              onClick={props.handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                width: \"130px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"#085FAB\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                letterSpacing: \"0.5px\",\r\n                color: \"white\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n                borderColor: \"none\",\r\n              }}\r\n              onClick={() => props.handleOK()}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Dropzone\\DataLakeDropZone\\DataLakeDropZone.js",["580","581","582","583","584","585","586"],"import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport uploadIcon from \"../../Icons/AutoML/uploadfile.svg\";\r\nimport \"./styles.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  width: \"100%\",\r\n  height: \"230px\",\r\n  alignItems: \"center\",\r\n  padding: \"60px\",\r\n  borderWidth: 2,\r\n  border: \"1px dashed #6D6D6D\",\r\n  boxSizing: \"border-box\",\r\n  borderRadius: \"10px\",\r\n  backgroundColor: \"white\",\r\n  color: \"#bdbdbd\",\r\n  cursor: \"pointer\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nexport default function DataLakeDropZone(props) {\r\n  const [file, setfile] = useState([]);\r\n  const [render, setrender] = useState(false);\r\n\r\n  let count = 0;\r\n\r\n  const fileSizeValidator = (file) => {\r\n    // if (file.size > 2000000) {\r\n    //   return {\r\n    //     code: \"File Size too large\",\r\n    //     message: `Size is larger than 3 mb (Example)`,\r\n    //   };\r\n    // }\r\n  };\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    acceptedFiles,\r\n    fileRejections,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \".csv,.xlsx\",\r\n    multiple: true,\r\n    // maxFiles: 5,\r\n    validator: fileSizeValidator,\r\n  });\r\n\r\n  const files = acceptedFiles.map((file) => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  const rejected = fileRejections.map((file) => (\r\n    <li key={file.file.path}>\r\n      {file.file.path} - {file.file.size} bytes {file.errors[0].message}\r\n    </li>\r\n  ));\r\n\r\n  useEffect(() => {\r\n    let temp = file;\r\n    console.log(temp);\r\n    console.log(acceptedFiles);\r\n    let len = file.length;\r\n    acceptedFiles.map((file) => {\r\n      if (len < 5) {\r\n        temp.push({ file: file, correct: true });\r\n      } else {\r\n        temp.push({\r\n          file: file,\r\n          correct: false,\r\n          error: { message: \"Length Exceeded\" },\r\n        });\r\n      }\r\n      len = len + 1;\r\n    });\r\n    fileRejections.map((item) => {\r\n      temp.push({ file: item.file, correct: false, error: item.errors[0] });\r\n    });\r\n    setfile(temp);\r\n    setrender(!render);\r\n    // console.log(file);\r\n  }, [acceptedFiles, fileRejections]);\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  useEffect(() => {\r\n    props.setFile(file);\r\n  }, [file]);\r\n\r\n  const removeFile = (index) => {\r\n    console.log(index);\r\n    let temp = file;\r\n    temp.splice(index, 1);\r\n    setfile(temp);\r\n    setrender(!render);\r\n  };\r\n\r\n  return (\r\n    <div className=\"DataLakeDropZone\">\r\n      <div {...getRootProps({ style })}>\r\n        <input {...getInputProps()} />\r\n        <br />\r\n        <img src={uploadIcon} alt=\"upload\" />\r\n        <p style={{ fontSize: \"13px\", color: \"#6d6d6d\" }}>\r\n          Drop a local file here, or{\" \"}\r\n          <span style={{ color: \"#085fab\" }}>Browse</span>\r\n        </p>\r\n      </div>\r\n      <h4>Uploaded File</h4>\r\n      {file.map((element, index) =>\r\n        element.correct === true ? (\r\n          <div className=\"accepted\" key={index}>\r\n            <div className=\"file\">\r\n              <span\r\n                style={{\r\n                  flexGrow: \"1\",\r\n                  textOverflow: \"ellipsis\",\r\n                  overflow: \"hidden\",\r\n                  whiteSpace: \"nowrap\",\r\n                }}\r\n              >\r\n                {element.file.path} - {(element.file.size / 1048576).toFixed(2)}{\" \"}\r\n                MBs\r\n              </span>\r\n              <img\r\n                src={closeIcon}\r\n                alt=\"icon\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => removeFile(index)}\r\n              />\r\n            </div>{\" \"}\r\n          </div>\r\n        ) : (\r\n          <div className=\"accepted\" key={index}>\r\n            <div className=\"rejectedFile\">\r\n              <span\r\n                style={{\r\n                  flexGrow: \"1\",\r\n                  textOverflow: \"ellipsis\",\r\n                  overflow: \"hidden\",\r\n                  whiteSpace: \"nowrap\",\r\n                }}\r\n              >\r\n                {element.file.path} - {(element.file.size / 1048576).toFixed(2)}{\" \"}\r\n                MBs\r\n              </span>\r\n              <img\r\n                src={closeIcon}\r\n                alt=\"icon\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => removeFile(index)}\r\n              />\r\n            </div>{\" \"}\r\n          </div>\r\n        )\r\n      )}\r\n      {/* {acceptedFiles.map((element) => (\r\n        <div className=\"accepted\">\r\n          <div className=\"file\">\r\n            <span\r\n              style={{\r\n                flexGrow: \"1\",\r\n                textOverflow: \"ellipsis\",\r\n                overflow: \"hidden\",\r\n                whiteSpace: \"nowrap\",\r\n              }}\r\n            >\r\n              {element.path} - {(element.size / 1048576).toFixed(2)} MBs\r\n            </span>\r\n            <img\r\n              src={closeIcon}\r\n              alt=\"icon\"\r\n              style={{ cursor: \"pointer\" }}\r\n              // onClick={() => setfileList(null)}\r\n            />\r\n          </div>{\" \"}\r\n        </div>\r\n      ))}\r\n      {fileRejections.map((element) => (\r\n        <div className=\"accepted\">\r\n          <div className=\"rejectedFile\">\r\n            {console.log(element.errors[0].message)}\r\n            <span\r\n              style={{\r\n                flexGrow: \"1\",\r\n                textOverflow: \"ellipsis\",\r\n                overflow: \"hidden\",\r\n                whiteSpace: \"nowrap\",\r\n              }}\r\n            >\r\n              {element.file.path} - {(element.file.size / 1048576).toFixed(2)}{\" \"}\r\n              MBs\r\n            </span>\r\n            <img\r\n              src={closeIcon}\r\n              alt=\"icon\"\r\n              style={{ cursor: \"pointer\" }}\r\n              // onClick={() => setfileList(null)}\r\n            />\r\n          </div>{\" \"}\r\n        </div>\r\n      ))} */}\r\n      {/* <ul>{files}</ul> */}\r\n      {/* <ul>{rejected}</ul> */}\r\n    </div>\r\n  );\r\n}\r\n\r\n<DataLakeDropZone />;\r\n","D:\\Work\\beyond-data\\src\\Components\\Collapsable\\UploadCollapsable\\UploadCollapsable.js",["587","588"],"import { Collapse, Progress } from \"antd\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport \"./styles.css\";\r\nimport icon from \"../../Icons/DataLake/datasetIcon.svg\";\r\nimport cross from \"../../Icons/DataLake/cross.svg\";\r\nimport { DataLakeFileUploadContext } from \"../../../Data/Contexts/DataLakeFileUploadContext/DataLakeFileUploadContext\";\r\n\r\nexport default function UploadCollapsable() {\r\n  const { Panel } = Collapse;\r\n\r\n  const { Files, deleteFile } = useContext(DataLakeFileUploadContext);\r\n\r\n  const [Title, setTitle] = useState(\"\");\r\n  const [list, setlist] = useState([\r\n    { name: \"file1\", progress: 25, error: true },\r\n    { name: \"file1\", progress: 53, error: false },\r\n    { name: \"file1\", progress: 100, error: false },\r\n  ]);\r\n  const [render, setrender] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let temp = [];\r\n    Files.files.forEach((element) => {\r\n      if (element.correct === true) {\r\n        let progress =\r\n          Files.progress && Files.progress[element.file.path]\r\n            ? Files.progress[element.file.path]\r\n            : null;\r\n        temp.push({\r\n          name: element.file.path,\r\n          progress: progress,\r\n          error:\r\n            Files.error && Files.error[element.file.path] !== null\r\n              ? Files.error[element.file.path]\r\n              : false,\r\n          // error: false,\r\n        });\r\n      }\r\n    });\r\n    setlist(temp);\r\n    setrender(!render);\r\n  }, [Files]);\r\n\r\n  useEffect(() => {\r\n    let text = \"Uploaded\";\r\n    if (list) {\r\n      list.forEach((element) => {\r\n        if (element.progress < 100) {\r\n          text = \"Uploading\";\r\n        }\r\n      });\r\n    } else {\r\n      text = \"Upload\";\r\n    }\r\n    setTitle(text);\r\n  }, [list]);\r\n\r\n  function callback(key) {\r\n    console.log(key);\r\n  }\r\n\r\n  const removefile = (index, file) => {\r\n    let temp = [];\r\n    list.forEach((element) => {\r\n      temp.push(element);\r\n    });\r\n    if (temp.length === 1) {\r\n      temp = null;\r\n    } else {\r\n      temp = temp.splice(index, 1);\r\n    }\r\n    setlist(temp);\r\n    setrender(!render);\r\n  };\r\n\r\n  const files =\r\n    list || list.length !== 0\r\n      ? list.map((file, index) => (\r\n          <div key={index}>\r\n            <div style={{ display: \"flex\" }}>\r\n              <img\r\n                src={icon}\r\n                alt=\"icon\"\r\n                width={15}\r\n                style={{ marginRight: \"12px\" }}\r\n              />{\" \"}\r\n              <span\r\n                style={{\r\n                  flexGrow: \"1\",\r\n                  fontStyle: \"normal\",\r\n                  fontSize: \"14px\",\r\n                  color: \"#6d6d6d\",\r\n                }}\r\n              >\r\n                {file.name}\r\n              </span>{\" \"}\r\n              <img\r\n                src={cross}\r\n                alt=\"icon\"\r\n                width={8}\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() => deleteFile(index, file)}\r\n              />\r\n            </div>\r\n            <Progress\r\n              percent={file.progress}\r\n              size=\"small\"\r\n              status={\r\n                file.error\r\n                  ? \"exception\"\r\n                  : file.progress === 100\r\n                  ? \"success\"\r\n                  : \"normal\"\r\n              }\r\n            />\r\n          </div>\r\n        ))\r\n      : null;\r\n\r\n  return (\r\n    <div className=\"UploadCollapsable\">\r\n      {list ? (\r\n        <Collapse\r\n          onChange={callback}\r\n          defaultActiveKey=\"1\"\r\n          expandIconPosition={\"right\"}\r\n          style={list.length === 0 ? { display: \"none\" } : null}\r\n        >\r\n          <Panel header={`${Title} Files`} key=\"1\">\r\n            {files}\r\n          </Panel>\r\n        </Collapse>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeBucketDeleteModal\\DataLakeBucketDeleteModal.js",["589","590"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport deleteAvatar from \"../../Images/AutoML/deleteAvatar.svg\";\r\nimport \"./DataLakeBucketDeleteModal.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeiconDelete.svg\";\r\nimport datasetIcon from \"../../Icons/DataLake/datasetUse.svg\";\r\n\r\nexport default function DataLakeBucketDeleteModal(props) {\r\n  const [pin, setpin] = useState(\"\");\r\n  const [datasets, setdatasets] = useState(null);\r\n  const [rendered, setrendered] = useState(false);\r\n\r\n  if (datasets === null && props.datasets) {\r\n    let temp = [];\r\n    if (props.datasets) {\r\n      props.datasets.map((item) => {\r\n        let obj = { name: item.name, used: item.used, checked: true };\r\n        temp.push(obj);\r\n      });\r\n      setdatasets(temp);\r\n    }\r\n  }\r\n\r\n  const clickcheckbox = (index, val) => {\r\n    let temp = datasets;\r\n    temp[index].checked = !temp[index].checked;\r\n    setdatasets(temp);\r\n    setrendered(!rendered);\r\n  };\r\n\r\n  return (\r\n    <div className=\"DataLakeBucketDeleteModal\">\r\n      <Modal\r\n        width={\"40%\"}\r\n        centered\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={() => {\r\n          setdatasets(null);\r\n          props.handleCancel();\r\n        }}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EC547A\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"25px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"500\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"normal\",\r\n              }}\r\n            >\r\n              Are you Sure?\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                color: \"white\",\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            <img\r\n              src={deleteAvatar}\r\n              style={{\r\n                width: \"73px\",\r\n                height: \"107px\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n                marginLeft: \"30px\",\r\n                marginRight: \"20px\",\r\n                marginBottom: \"20px\",\r\n                marginTop: \"0px\",\r\n              }}\r\n            />\r\n            <div>\r\n              <h2\r\n                style={{\r\n                  fontFamily: \"Lato\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"18px\",\r\n                  textAlign: \"left\",\r\n                  fontStyle: \"normal\",\r\n                }}\r\n              >\r\n                Delete Data Bucket\r\n              </h2>\r\n              <p\r\n                style={{\r\n                  padding: \"25px\",\r\n                  paddingLeft: \"0px\",\r\n                  paddingTop: \"0px\",\r\n                  fontFamily: \"Lato\",\r\n                  fontSize: \"13px\",\r\n                  fontStyle: \"normal\",\r\n                  color: \"#A1A1A1\",\r\n                  textAlign: \"left\",\r\n                }}\r\n              >\r\n                Deleting this Data Bucket will result in deletion of all the\r\n                following Datasets. Unselect the model which you intend to save.{\" \"}\r\n                <br />\r\n                <div style={{ marginTop: \"5px\" }}>\r\n                  <img alt={\"Text\"} src={datasetIcon} width={20} />{\" \"}\r\n                  <span style={{ fontWeight: \"bold\" }}>\r\n                    Datasets in use by another model.\r\n                  </span>\r\n                </div>\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <p\r\n            style={{\r\n              textAlign: \"left\",\r\n              marginLeft: \"30px\",\r\n              color: \"black\",\r\n              fontWeight: \"bold\",\r\n              fontStyle: \"normal\",\r\n              marginBottom: \"5px\",\r\n            }}\r\n          >\r\n            Datasets\r\n          </p>\r\n          <div style={{ height: \"15vh\", overflow: \"scroll\" }}>\r\n            {datasets && datasets.length > 0\r\n              ? datasets.map((item, index) => (\r\n                  <div\r\n                    key={index}\r\n                    style={{ textAlign: \"left\", display: \"flex\" }}\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"vehicle1\"\r\n                      name=\"vehicle1\"\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                        marginLeft: \"30px\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      checked={item.checked}\r\n                      onChange={(e) => clickcheckbox(index, e.target.value)}\r\n                    />\r\n                    <img\r\n                      alt={\"Text\"}\r\n                      src={datasetIcon}\r\n                      width={20}\r\n                      style={{\r\n                        marginBottom: \"5px\",\r\n                        marginRight: \"15px\",\r\n                        marginLeft: \"6px\",\r\n                      }}\r\n                    />\r\n                    <p\r\n                      style={{\r\n                        flexGrow: \"1\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </p>\r\n                    {/* <p\r\n                      style={{\r\n                        marginRight: \"20px\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"normal\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.desc}\r\n                    </p> */}\r\n                    <br />\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </div>\r\n          <input\r\n            placeholder=\"Enter 4 Digits Pin to confirm\"\r\n            type=\"text\"\r\n            maxLength={4}\r\n            autoComplete=\"off\"\r\n            value={pin}\r\n            style={{\r\n              width: \"50%\",\r\n              margin: \"auto\",\r\n              borderRadius: \"10px\",\r\n              marginBottom: \"15px\",\r\n            }}\r\n            onChange={(e) => setpin(e.target.value)}\r\n          />\r\n\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"#E2E9EF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n          <div style={{ marginBottom: \"0px\" }}>\r\n            <Button\r\n              style={{\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"white\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n                color: \"black\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n              }}\r\n              onClick={() => {\r\n                setdatasets(null);\r\n                props.handleCancel();\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                width: \"130px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"#EC547A\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                letterSpacing: \"0.5px\",\r\n                color: \"white\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n                borderColor: \"none\",\r\n              }}\r\n              onClick={() => props.handleOK(datasets)}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Pages\\DataLake\\DatasetsMain\\DatasetsMain.js",["591","592","593"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport bucketIcon from \"../../../Components/Icons/DataLake/bucketIcon.svg\";\r\nimport searchIcon from \"../../../Components/Icons/AutoML/search1.svg\";\r\nimport \"./styles.css\";\r\nimport { Button, message, Popover } from \"antd\";\r\nimport DataLakeDatasetsTable from \"../../../Components/Tables/DataLakeDatasetsTable/DataLakeDatasetstable\";\r\nimport shareIcon from \"../../../Components/Icons/AutoML/share.svg\";\r\nimport deleteIcon from \"../../../Components/Icons/AutoML/delete.svg\";\r\nimport downloadIcon from \"../../../Components/Icons/AutoML/download.svg\";\r\nimport ellipsis from \"../../../Components/Icons/DataLake/ellipsis.svg\";\r\nimport concatIcon from \"../../../Components/Icons/DataLake/concat_s_icon.svg\";\r\nimport DataLakeDeleteDatasetModal from \"../../../Components/Modals/DataLakeDeleteDatasetModal/DataLakeDeleteDatasetModal\";\r\nimport DataLakeShareDatasetModal from \"../../../Components/Modals/DataLakeShareDatasetModal/DataLakeShareDatasetModal\";\r\nimport DataLakeDatasetInfoDrawer from \"../../../Components/Drawers/DataLakeDatasetInfoDrawer/DataLakeDatasetInfoDrawer\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport AutoMLSelectedDatasetsPreviewRowsTable from \"../../../Components/Tables/AutoMLSelectedDataPopupTables/AutoMLSelectedDatasetsPreviewRowsTable\";\r\nimport AutoMLSelectedDatasetsMetaTable from \"../../../Components/Tables/AutoMLSelectedDatasetsMetaTable/AutoMLSelectedDatasetsMetaTable\";\r\nimport UploadCollapsable from \"../../../Components/Collapsable/UploadCollapsable/UploadCollapsable\";\r\nimport DataLakeUploadDatasetModal from \"../../../Components/Modals/DataLakeUploadDatasetModal/DataLakeUploadDatasetModal\";\r\nimport { DataLakeBucketContext } from \"../../../Data/Contexts/DataLake/DataLakeBucketContext/DataLakeBucketContext\";\r\nimport { DataLakeDatasetContext } from \"../../../Data/Contexts/DataLake/DataLakeDatasetContext/DataLakeDatasetContext\";\r\nimport axios from \"axios\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport Cliploader from \"../../../Components/Loader/Cliploader\";\r\nimport { DataLakeFileUploadContext } from \"../../../Data/Contexts/DataLakeFileUploadContext/DataLakeFileUploadContext\";\r\nimport DataLakeDownloadDatasetModal from \"../../../Components/Modals/DataLakeDownloadDatasetModal/DataLakeDownloadDatasetModal\";\r\nimport fileDownload from \"js-file-download\";\r\nimport { NotificationsContext } from \"../../../Data/Contexts/AutoMLNotifications/AutoMLNotificationsContext\";\r\n\r\nexport default function DatasetsMain(props) {\r\n  const { databucket } = useParams();\r\n  const wrapperRef = useRef(null);\r\n\r\n  const [searchval, setsearchval] = useState(\"\");\r\n  const [selected, setselected] = useState(null);\r\n  const [downloadPopover, setdownloadPopover] = useState(false);\r\n\r\n  const [shareModal, setshareModal] = useState(false);\r\n  const [downloadModal, setdownloadModal] = useState(false);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [infoDrawer, setinfoDrawer] = useState(false);\r\n  const [showpopup, setshowpopup] = useState(false);\r\n  const [resettable, setresettable] = useState(false);\r\n  const [uploadDatasetModal, setuploadDatasetModal] = useState(false);\r\n  const [loading, setloading] = useState(false);\r\n  const [recallapi, setrecallapi] = useState(false);\r\n  const [downloadCloudModal, setdownloadCloudModal] = useState(false);\r\n\r\n  const [datasets, setdatasets] = useState();\r\n  const [selectedDataset, setselectedDataset] = useState(null);\r\n\r\n  const { Bucket } = useContext(DataLakeBucketContext);\r\n  const { Dataset } = useContext(DataLakeDatasetContext);\r\n  const { Auth } = useContext(AuthContext);\r\n  const { Files, setProgress, setError } = useContext(\r\n    DataLakeFileUploadContext\r\n  );\r\n  const { Notifications } = useContext(NotificationsContext);\r\n\r\n  // console.log(Notifications);\r\n\r\n  useEffect(() => {\r\n    Notifications.Notifications.forEach((element) => {\r\n      if (\r\n        element.status === \"unread\" &&\r\n        (element.message ===\r\n          \"Your data has been processed and is ready to use.\" ||\r\n          element.message ===\r\n            \"Your data has been concatenated and is ready to use.\" ||\r\n          element.message === \"Your data has been configured.\") &&\r\n        Bucket.bucket.name === element.path_info.databucket &&\r\n        Bucket.bucket.created_by === element.path_info.created_by\r\n      ) {\r\n        console.log(element);\r\n        setrecallapi(!recallapi);\r\n      }\r\n    });\r\n  }, [Notifications]);\r\n\r\n  useEffect(() => {\r\n    if (Dataset.dataset !== null) {\r\n      let temp = [];\r\n      let keys = Object.keys(Dataset.dataset.dataset_preview);\r\n      temp.push(keys);\r\n      keys.forEach((element, index) => {\r\n        let arr = [];\r\n        keys.forEach((item) => {\r\n          arr.push(Dataset.dataset.dataset_preview[`${item}`][index]);\r\n        });\r\n        temp.push(arr);\r\n      });\r\n      let slicedArr = [];\r\n      if (temp.length > 3) {\r\n        slicedArr = temp.slice(0, 4);\r\n      } else {\r\n        slicedArr = temp;\r\n      }\r\n      setrows(slicedArr);\r\n      temp = [];\r\n      temp.push(Dataset.dataset.dataset_metadata.columns);\r\n      temp.push(Dataset.dataset.dataset_metadata.dtypes);\r\n      let arr = [];\r\n      Dataset.dataset.dataset_metadata.columns.forEach((element) => {\r\n        arr.push(\"-\");\r\n      });\r\n      temp.push(arr);\r\n      Dataset.dataset.dataset_metadata.columns.forEach((element) => {\r\n        arr.push(\"-\");\r\n      });\r\n      temp.push(arr);\r\n      setmeta(temp);\r\n    }\r\n  }, [Dataset]);\r\n\r\n  const [rows, setrows] = useState(null);\r\n  const [meta, setmeta] = useState(null);\r\n\r\n  const useOutsideAlerter = (ref) => {\r\n    // useEffect(() => {\r\n    async function handleClickOutside(event) {\r\n      if (\r\n        (ref.current &&\r\n          !ref.current.contains(event.target) &&\r\n          event.target.className === \"ant-breadcrumb\") ||\r\n        event.target.className === \"DataLakeBreadcrumbs\" ||\r\n        event.target.className === \"ant-layout\" ||\r\n        event.target.className ===\r\n          \"ant-menu ant-menu-light ant-menu-root ant-menu-inline\"\r\n      ) {\r\n        //  alert(\"You clicked outside of me!\");\r\n        console.log(\"outside click\");\r\n        setselectedDataset(null);\r\n        setselected(null);\r\n        setresettable(!resettable);\r\n        // if (resettable === false) {\r\n        //   setresettable(true);\r\n        // } else {\r\n        //   setresettable(false);\r\n        // }\r\n      }\r\n    }\r\n    // Bind the event listener\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      // Unbind the event listener on clean up\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n    // }, [ref]);\r\n  };\r\n\r\n  useOutsideAlerter(wrapperRef);\r\n\r\n  const shareDataset = async () => {\r\n    setloading(true);\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      databucket_name: Bucket.bucket.name,\r\n      databucket_desc: Bucket.bucket.desc,\r\n      dataset_name: selectedDataset.name,\r\n      confirmation: \"no\",\r\n    };\r\n    console.log(obj);\r\n    const formData = serialize(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/share_dataset/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n        setshareModal(false);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        setshareModal(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          message.error(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const deleteDataset = async () => {\r\n    setloading(true);\r\n    let s = \"\";\r\n    if (Bucket.type === \"My Data\") {\r\n      s = \"my_datasets\";\r\n    } else if (Bucket.type === \"Downloaded Data\") {\r\n      s = \"downloaded_datasets\";\r\n    } else if (Bucket.type === \"Global Data\") {\r\n      s = \"shared_datasets\";\r\n    }\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      databucket_name: Bucket.bucket.name,\r\n      databucket_desc: Bucket.bucket.desc,\r\n      space: s,\r\n      dataset_name: selectedDataset.name,\r\n      confirmation: \"no\",\r\n    };\r\n    console.log(obj);\r\n    const formData = serialize(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/delete_dataset/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n        if (response.data.message === \"deleted\") {\r\n          setdeleteModal(false);\r\n          setrecallapi(!recallapi);\r\n          setselected(null);\r\n          setselectedDataset(null);\r\n        } else {\r\n          message.error(response.data.message);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        setdeleteModal(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          if (\r\n            error.response.data.used_by &&\r\n            error.response.data.used_by[0] &&\r\n            error.response.data.used_for\r\n          ) {\r\n            message.error(\r\n              `Dataset is currently used by ${error.response.data.used_by[0]} for ${error.response.data.used_for}`\r\n            );\r\n          } else {\r\n            message.error(\"Server Error\");\r\n          }\r\n\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const concatScreen = () => {\r\n    props.history.push({\r\n      pathname: `/datalake/${databucket}/datasets/${selectedDataset.name}/concat`,\r\n      state: {\r\n        detail: \"I am from Databuckets Screen\",\r\n        page_name: \"Datasets_Screen\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const configureScreen = () => {\r\n    console.log(\"call\");\r\n    props.history.push({\r\n      pathname: `/datalake/${databucket}/datasets/${selectedDataset.name}/configure`,\r\n      state: {\r\n        detail: \"I am from Databuckets Screen\",\r\n        page_name: \"Datasets_Screen\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const showDownloadLocalModal = () => {\r\n    setdownloadPopover(false);\r\n    setdownloadModal(true);\r\n  };\r\n\r\n  const showDownloadModal = () => {\r\n    setdownloadPopover(false);\r\n    setdownloadCloudModal(true);\r\n  };\r\n\r\n  const downloadDataset = async () => {\r\n    let s = \"\";\r\n    setloading(true);\r\n    if (Bucket.type === \"My Data\") {\r\n      s = \"my_datasets\";\r\n    } else if (Bucket.type === \"Downloaded Data\") {\r\n      s = \"downloaded_datasets\";\r\n    } else if (Bucket.type === \"Global Data\") {\r\n      s = \"shared_datasets\";\r\n    }\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      created_by: selectedDataset.created_by,\r\n      databucket_name: Bucket.bucket.name,\r\n      databucket_desc: Bucket.bucket.desc,\r\n      dataset_name: selectedDataset.name,\r\n      confirmation: \"no\",\r\n      download_type: \"local\",\r\n      space: s,\r\n    };\r\n    console.log(obj);\r\n    const formData = serialize(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/download_dataset/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n        setdownloadModal(false);\r\n        fileDownload(response.data, selectedDataset.name);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          setdownloadModal(false);\r\n          message.error(\"Server Error\", error.response.status);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const downloadCloudDataset = async () => {\r\n    let s = \"\";\r\n    setloading(true);\r\n    if (Bucket.type === \"My Data\") {\r\n      s = \"my_datasets\";\r\n    } else if (Bucket.type === \"Downloaded Data\") {\r\n      s = \"downloaded_datasets\";\r\n    } else if (Bucket.type === \"Global Data\") {\r\n      s = \"shared_datasets\";\r\n    }\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      created_by: selectedDataset.created_by,\r\n      databucket_name: Bucket.bucket.name,\r\n      databucket_desc: Bucket.bucket.desc,\r\n      dataset_name: selectedDataset.name,\r\n      confirmation: \"no\",\r\n      download_type: \"cloud\",\r\n      space: s,\r\n    };\r\n    console.log(obj);\r\n    const formData = serialize(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/download_dataset/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n        if (response.data === \"Your Dataset is being downloaded !!!\") {\r\n          setdownloadCloudModal(false);\r\n        } else {\r\n          message.error(response.data);\r\n        }\r\n        // fileDownload(response.data, selectedDataset.name);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          setdownloadCloudModal(false);\r\n          message.error(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  const startUploading = async () => {\r\n    console.log(\"Upload Start\");\r\n    let s = \"\";\r\n    if (Bucket.type === \"My Data\") {\r\n      s = \"my_datasets\";\r\n    } else if (Bucket.type === \"Downloaded Data\") {\r\n      s = \"downloaded_datasets\";\r\n    } else if (Bucket.type === \"Global Data\") {\r\n      s = \"shared_datasets\";\r\n    }\r\n    // setloading(true);\r\n    setuploadDatasetModal(false);\r\n    let corrected = [];\r\n    let sizes = {};\r\n    let fileList = [];\r\n    let count = 0;\r\n    Files.files.forEach((element, index) => {\r\n      if (element.correct === true) {\r\n        fileList[count] = element.file;\r\n        count = count + 1;\r\n        corrected.push(element.file);\r\n        sizes[`${element.file.path}`] = \"0.01\";\r\n      }\r\n    });\r\n    //Iterating though each file and seperate API\r\n    corrected.forEach(async (element, index) => {\r\n      let obj = {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        company_name: Auth.company_name,\r\n        databucket_name: Bucket.bucket.name,\r\n        files: element,\r\n        files_size: JSON.stringify(sizes),\r\n        space: s,\r\n      };\r\n      console.log(obj);\r\n      const formData = serialize(obj);\r\n      await axios({\r\n        method: \"post\",\r\n        url: `${URL}/automl/upload_dataset/`,\r\n        data: formData,\r\n        onUploadProgress: (progressEvent) => {\r\n          var percentCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          setProgress({ name: element.path, val: percentCompleted });\r\n        },\r\n        headers: {\r\n          \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n        },\r\n      })\r\n        .then(function (response) {\r\n          setloading(false);\r\n          if (response.data.message === \"success\") {\r\n            setuploadDatasetModal(false);\r\n          } else {\r\n            if (response.data.alread_exists.length !== 0) {\r\n              message.error(`${response.data.alread_exists[0]} already exists`);\r\n            } else if (response.data.invalid_files.length) {\r\n              message.error(`${response.data.invalid_files[0]} is invalid`);\r\n            }\r\n          }\r\n          console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n          setloading(false);\r\n          if (error.response) {\r\n            // Request made and server responded\r\n            console.log(error.response.data);\r\n            setuploadDatasetModal(false);\r\n            setError({ name: element.path, val: true });\r\n            console.log(error.response.status);\r\n            console.log(error.response.headers);\r\n          } else if (error.request) {\r\n            // The request was made but no response was received\r\n            console.log(error.request);\r\n          } else {\r\n            // Something happened in setting up the request that triggered an Error\r\n          }\r\n        });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"DatasetsMain\"\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        textAlign: \"left\",\r\n        height: \"100%\",\r\n      }}\r\n      ref={wrapperRef}\r\n    >\r\n      <Cliploader loading={loading} handleCancel={() => setloading(false)} />\r\n      <div>\r\n        <div style={{ display: \"flex\" }}>\r\n          <img src={bucketIcon} alt=\"icon\" width={20} />\r\n          <span\r\n            style={{\r\n              flexGrow: \"1\",\r\n              fontWeight: \"bold\",\r\n              fontStyle: \"normal\",\r\n              fontSize: \"18px\",\r\n              marginLeft: \"10px\",\r\n            }}\r\n          >\r\n            {databucket}\r\n          </span>\r\n          <div className=\"Searchbar\">\r\n            <input\r\n              type=\"text\"\r\n              name=\"search\"\r\n              autoComplete=\"off\"\r\n              style={{ backgroundImage: `url(${searchIcon})` }}\r\n              // placeholder=\"Search..\"\r\n              value={searchval}\r\n              onChange={(e) => {\r\n                setselected(null);\r\n                setselectedDataset(null);\r\n                setresettable(!resettable);\r\n                setsearchval(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n          <Button\r\n            className=\"UploadButton\"\r\n            style={\r\n              selected === null && Bucket.type === \"My Data\"\r\n                ? null\r\n                : { display: \"none\" }\r\n            }\r\n            onClick={() => setuploadDatasetModal(true)}\r\n          >\r\n            Upload Dataset\r\n          </Button>\r\n          <div\r\n            style={\r\n              selected !== null\r\n                ? {\r\n                    marginBottom: \"0px\",\r\n                    marginLeft: \"10px\",\r\n                    display: \"flex\",\r\n                    alignItems: \"flex-end\",\r\n                  }\r\n                : { display: \"none\" }\r\n            }\r\n          >\r\n            <Popover\r\n              content={\r\n                <div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: \"14px\",\r\n                      color: \"#444444\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => showDownloadLocalModal()}\r\n                  >\r\n                    Download on Local Storage\r\n                  </div>\r\n                  <hr\r\n                    style={{\r\n                      backgroundColor: \"#E1EEFF\",\r\n                      border: \"none\",\r\n                      height: \"1px\",\r\n                      marginBottom: \"07px\",\r\n                      width: \"100%\",\r\n                    }}\r\n                  />\r\n                  <div\r\n                    style={\r\n                      Bucket.type === \"Downloaded Data\" ||\r\n                      Bucket.type === \"My Data\"\r\n                        ? {\r\n                            fontSize: \"14px\",\r\n                            color: \"#444444\",\r\n                            cursor: \"not-allowed\",\r\n                            opacity: \"0.3\",\r\n                          }\r\n                        : {\r\n                            fontSize: \"14px\",\r\n                            color: \"#444444\",\r\n                            cursor: \"pointer\",\r\n                          }\r\n                    }\r\n                    onClick={() => showDownloadModal()}\r\n                  >\r\n                    Download on Cloud Storage\r\n                  </div>\r\n                </div>\r\n              }\r\n              placement=\"bottomRight\"\r\n              trigger=\"click\"\r\n              visible={downloadPopover}\r\n              onVisibleChange={() => setdownloadPopover(!downloadPopover)}\r\n            >\r\n              <div\r\n                style={\r\n                  selected === null\r\n                    ? {\r\n                        display: \"flex\",\r\n                        height: \"16px\",\r\n                        marginBottom: \"9px\",\r\n                        marginRight: \"22px\",\r\n                        cursor: \"not-allowed\",\r\n                        opacity: \"0.3\",\r\n                      }\r\n                    : {\r\n                        display: \"flex\",\r\n                        height: \"16px\",\r\n                        marginBottom: \"9px\",\r\n                        marginRight: \"22px\",\r\n                        cursor: \"pointer\",\r\n                      }\r\n                }\r\n              >\r\n                <img\r\n                  src={downloadIcon}\r\n                  alt=\"icon\"\r\n                  style={{\r\n                    width: \"16px\",\r\n                    height: \"16px\",\r\n                    marginRight: \"5px\",\r\n                    marginTop: \"2px\",\r\n                  }}\r\n                />\r\n                <span\r\n                  style={{\r\n                    fontSize: \"14px\",\r\n                    height: \"16px\",\r\n                    color: \"#6D6D6D\",\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                >\r\n                  Download\r\n                </span>\r\n              </div>\r\n            </Popover>\r\n            <div\r\n              style={\r\n                Bucket.type === \"Downloaded Data\" ||\r\n                Bucket.type === \"Global Data\"\r\n                  ? {\r\n                      display: \"flex\",\r\n                      height: \"16px\",\r\n                      marginBottom: \"9px\",\r\n                      marginRight: \"22px\",\r\n                      cursor: \"not-allowed\",\r\n                      opacity: \"0.3\",\r\n                    }\r\n                  : {\r\n                      display: \"flex\",\r\n                      height: \"16px\",\r\n                      marginBottom: \"9px\",\r\n                      marginRight: \"22px\",\r\n                      cursor: \"pointer\",\r\n                    }\r\n              }\r\n              onClick={() => {\r\n                if (Bucket.type === \"My Data\") {\r\n                  setshareModal(true);\r\n                }\r\n              }}\r\n            >\r\n              <img\r\n                src={shareIcon}\r\n                alt=\"icon\"\r\n                style={{\r\n                  width: \"18px\",\r\n                  height: \"18px\",\r\n                  marginRight: \"5px\",\r\n                  marginTop: \"2px\",\r\n                }}\r\n              />\r\n              <span\r\n                style={{\r\n                  fontSize: \"14px\",\r\n                  fontWeight: \"bold\",\r\n                  height: \"16px\",\r\n                  color: \"#6D6D6D\",\r\n                }}\r\n              >\r\n                Share\r\n              </span>\r\n            </div>\r\n            <div\r\n              style={\r\n                selectedDataset !== null &&\r\n                Auth.user_id === selectedDataset.created_by\r\n                  ? {\r\n                      display: \"flex\",\r\n                      height: \"16px\",\r\n                      marginBottom: \"9px\",\r\n                      marginRight: \"18px\",\r\n                      cursor: \"pointer\",\r\n                    }\r\n                  : {\r\n                      display: \"flex\",\r\n                      height: \"16px\",\r\n                      marginBottom: \"9px\",\r\n                      marginRight: \"18px\",\r\n                      cursor: \"not-allowed\",\r\n                      opacity: \"0.3\",\r\n                    }\r\n              }\r\n              onClick={() => {\r\n                if (\r\n                  selectedDataset !== null &&\r\n                  Auth.user_id === selectedDataset.created_by\r\n                ) {\r\n                  setdeleteModal(true);\r\n                }\r\n              }}\r\n            >\r\n              <img\r\n                src={deleteIcon}\r\n                alt=\"icon\"\r\n                style={{\r\n                  width: \"18px\",\r\n                  height: \"18px\",\r\n                  marginRight: \"5px\",\r\n                  marginTop: \"1px\",\r\n                }}\r\n              />\r\n              <span\r\n                style={{\r\n                  fontSize: \"14px\",\r\n                  height: \"10px\",\r\n                  color: \"#6D6D6D\",\r\n                  fontWeight: \"bold\",\r\n                }}\r\n              >\r\n                Delete\r\n              </span>\r\n            </div>\r\n            <Popover\r\n              content={\r\n                <div\r\n                  style={{ width: \"200px\", cursor: \"pointer\" }}\r\n                  onClick={() => concatScreen()}\r\n                >\r\n                  <img\r\n                    src={concatIcon}\r\n                    alt=\"Icon\"\r\n                    style={{ marginRight: \"3px\" }}\r\n                  />{\" \"}\r\n                  Concatenate\r\n                </div>\r\n              }\r\n              placement=\"bottomRight\"\r\n              trigger=\"click\"\r\n            >\r\n              <img\r\n                src={ellipsis}\r\n                alt=\"icon\"\r\n                style={\r\n                  Bucket.type === \"My Data\"\r\n                    ? {\r\n                        width: \"18px\",\r\n                        height: \"18px\",\r\n                        marginRight: \"5px\",\r\n                        marginBottom: \"5px\",\r\n                        cursor: \"pointer\",\r\n                      }\r\n                    : { display: \"none\" }\r\n                }\r\n              />\r\n            </Popover>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <hr\r\n        style={{\r\n          width: \"100%\",\r\n          backgroundColor: \"#E1EEFF\",\r\n          border: \"none\",\r\n          height: \"1px\",\r\n          marginBottom: \"15px\",\r\n        }}\r\n      />\r\n      <div style={{ flexGrow: \"1\", overflow: \"scroll\" }}>\r\n        <DataLakeDatasetsTable\r\n          selected={(id) => setselected(id)}\r\n          selectedDataset={(val) => setselectedDataset(val)}\r\n          showdrawer={() => setinfoDrawer(true)}\r\n          showpopup={() => setshowpopup(true)}\r\n          reset={resettable}\r\n          recallAPI={recallapi}\r\n          value={searchval}\r\n        />\r\n      </div>\r\n      <DataLakeDeleteDatasetModal\r\n        isModalVisible={deleteModal}\r\n        handleCancel={() => setdeleteModal(false)}\r\n        handleOK={() => deleteDataset()}\r\n      />\r\n      <DataLakeShareDatasetModal\r\n        isModalVisible={shareModal}\r\n        handleCancel={() => setshareModal(false)}\r\n        handleOK={() => shareDataset()}\r\n      />\r\n      <DataLakeDownloadDatasetModal\r\n        isModalVisible={downloadModal}\r\n        handleCancel={() => setdownloadModal(false)}\r\n        handleOK={() => downloadDataset()}\r\n      />\r\n      <DataLakeDownloadDatasetModal\r\n        isModalVisible={downloadCloudModal}\r\n        handleCancel={() => setdownloadCloudModal(false)}\r\n        handleOK={() => downloadCloudDataset()}\r\n      />\r\n      <DataLakeDatasetInfoDrawer\r\n        onClose={() => setinfoDrawer(false)}\r\n        drawervisible={infoDrawer}\r\n        type={\"My Data\"}\r\n        data={selectedDataset}\r\n        recallAPI={() => setrecallapi(!recallapi)}\r\n      />\r\n      {selectedDataset !== null ? (\r\n        <Modal\r\n          title={\"Configurations\"}\r\n          visible={showpopup}\r\n          footer={false}\r\n          centered\r\n          onCancel={() => setshowpopup(false)}\r\n          wrapClassName=\"PreviewPopup\"\r\n          width={\"80%\"}\r\n          style={{ fontStyle: \"normal\" }}\r\n        >\r\n          <p className=\"sublink\">{selectedDataset.name}</p>\r\n          <p className=\"subtitle\" style={{ marginBottom: \"7px\" }}>\r\n            Dataset Description\r\n          </p>\r\n          <p className=\"desc\">{selectedDataset.description} </p>\r\n          <div\r\n            style={{\r\n              width: \"inherit\",\r\n              overflowX: \"scroll\",\r\n              paddingBottom: \"10px\",\r\n            }}\r\n          >\r\n            <AutoMLSelectedDatasetsPreviewRowsTable rows={rows} />\r\n          </div>\r\n          <p className=\"subtitle\" style={{ marginTop: \"10px\" }}>\r\n            Meta Data\r\n          </p>\r\n          <div\r\n            style={{\r\n              width: \"inherit\",\r\n              overflowX: \"scroll\",\r\n              paddingBottom: \"10px\",\r\n            }}\r\n          >\r\n            <AutoMLSelectedDatasetsMetaTable rows={meta} />\r\n          </div>\r\n          <Button\r\n            className=\"configureButton\"\r\n            style={Bucket.type === \"Global Data\" ? { display: \"none\" } : {}}\r\n            onClick={() => configureScreen()}\r\n          >\r\n            Configure\r\n          </Button>\r\n        </Modal>\r\n      ) : null}\r\n      <div style={{ position: \"fixed\", bottom: \"0\", right: \"0\" }}>\r\n        <UploadCollapsable />\r\n      </div>\r\n      <DataLakeUploadDatasetModal\r\n        isModalVisible={uploadDatasetModal}\r\n        handleCancel={() => setuploadDatasetModal(false)}\r\n        handleOK={() => startUploading()}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Tables\\DataLakeDatasetsTable\\DataLakeDatasetstable.js",["594","595","596","597","598","599","600","601","602","603"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport NoData from \"../../NoData/NoData\";\r\nimport styles from \"./DataLakeDatasetsTable.module.scss\";\r\nimport bucketIcon from \"../../Icons/DataLake/datasetIcon.svg\";\r\nimport infoIcon from \"../../Icons/DataLake/infoIcon.svg\";\r\nimport configureIcon from \"../../Icons/DataLake/configureIcon.svg\";\r\nimport { DataLakeBucketContext } from \"../../../Data/Contexts/DataLake/DataLakeBucketContext/DataLakeBucketContext\";\r\nimport { URL } from \"../../../Config/config\";\r\nimport axios from \"axios\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { serialize } from \"object-to-formdata\";\r\nimport { DataLakeDatasetContext } from \"../../../Data/Contexts/DataLake/DataLakeDatasetContext/DataLakeDatasetContext\";\r\nimport Cliploader from \"../../Loader/Cliploader\";\r\n\r\nexport default function DataLakeDatasetsTable(props) {\r\n  const [data, setdata] = useState(null);\r\n  const [selected, setselected] = useState(null);\r\n  const [rendered, setrendered] = useState(false);\r\n  const [mainCheck, setmainCheck] = useState(false);\r\n  const [data1, setdata1] = useState(null);\r\n  const [tempData, settempData] = useState(null);\r\n  const [reset, setreset] = useState(false);\r\n\r\n  const [loading, setloading] = useState(false);\r\n\r\n  const { Bucket } = useContext(DataLakeBucketContext);\r\n  const { Auth, setAuth } = useContext(AuthContext);\r\n  const { setDataset } = useContext(DataLakeDatasetContext);\r\n\r\n  useEffect(() => {\r\n    if (props.value === \"\") {\r\n      setdata(tempData);\r\n    } else {\r\n      let temp = [];\r\n      tempData.forEach((element) => {\r\n        if (element.name.includes(props.value)) {\r\n          temp.push(element);\r\n        }\r\n      });\r\n      setdata(temp);\r\n    }\r\n  }, [props.value]);\r\n\r\n  const loadDatasets = async () => {\r\n    let s = \"\";\r\n    if (Bucket.type === \"My Data\") {\r\n      s = \"p\";\r\n    } else if (Bucket.type === \"Downloaded Data\") {\r\n      s = \"d\";\r\n    } else if (Bucket.type === \"Global Data\") {\r\n      s = \"s\";\r\n    }\r\n    setloading(true);\r\n    setdata1([{}]);\r\n    let temp = [];\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Bucket.bucket.created_by,\r\n      databucket_name: Bucket.bucket.name,\r\n      space: s,\r\n    };\r\n    console.log(obj);\r\n    const formData = serialize(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/load_datasets/`,\r\n      data: formData,\r\n      headers: {\r\n        \"content-type\": `multipart/form-data; boundary=${formData._boundary}`,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n        let temp = [];\r\n        if (response.data) {\r\n          response.data.forEach((element) => {\r\n            temp.push({\r\n              name: element.dataset_name,\r\n              created_by: element.user_name,\r\n              description: element.dataset_desc,\r\n              last_modified: element.last_modified,\r\n              size: element.size,\r\n              checked: false,\r\n              cols_invalid_indexes: element.cols_invalid_indexes,\r\n              dataset_metadata: element.dataset_metadata,\r\n              dataset_preview: element.dataset_preview,\r\n              used_in_models: element.used_in_models,\r\n              used_in_reports: element.used_in_reports,\r\n            });\r\n          });\r\n          setdata(temp);\r\n          settempData(temp);\r\n        } else {\r\n          setdata(null);\r\n          settempData(temp);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        // setdata(null);\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  if (data1 === null) {\r\n    loadDatasets();\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadDatasets();\r\n  }, [props.recallAPI]);\r\n\r\n  useEffect(() => {\r\n    let trs = document.getElementsByTagName(\"tr\");\r\n    setselected(null);\r\n    let count = 0;\r\n    for (var x of trs) {\r\n      if (count % 2 === 0) {\r\n        x.style.backgroundColor = \"#F5F5F5\";\r\n      } else {\r\n        x.style.backgroundColor = \"white\";\r\n      }\r\n      count = count + 1;\r\n      x.style.borderBottom = \"0.5px solid #e2e9ef\";\r\n      // var css = \"tbody tr:hover { background: red;}\";\r\n      // var s = document.createElement(\"style\");\r\n\r\n      // if (s.styleSheet) {\r\n      //   s.styleSheet.cssText = css;\r\n      // } else {\r\n      //   s.appendChild(document.createTextNode(css));\r\n      // }\r\n      // x.appendChild(s);\r\n      x.className = \"\";\r\n    }\r\n    let tds = document.getElementsByTagName(\"td\");\r\n    for (var y of tds) {\r\n      y.style.fontWeight = \"normal\";\r\n      y.style.color = \"#6D6d6d\";\r\n    }\r\n  }, [props.reset]);\r\n\r\n  const rowclick = (id) => {\r\n    let trs = document.getElementsByTagName(\"tr\");\r\n    let count = 0;\r\n    for (var x of trs) {\r\n      if (count % 2 === 0) {\r\n        x.style.backgroundColor = \"#F5F5F5\";\r\n      } else {\r\n        x.style.backgroundColor = \"white\";\r\n      }\r\n      count = count + 1;\r\n      x.style.borderBottom = \"0.5px solid #e2e9ef\";\r\n      // var css = \"tbody tr:hover { background: red;}\";\r\n      // var s = document.createElement(\"style\");\r\n\r\n      // if (s.styleSheet) {\r\n      //   s.styleSheet.cssText = css;\r\n      // } else {\r\n      //   s.appendChild(document.createTextNode(css));\r\n      // }\r\n      // x.appendChild(s);\r\n      x.className = \"\";\r\n    }\r\n    let tds = document.getElementsByTagName(\"td\");\r\n    for (var y of tds) {\r\n      y.style.fontWeight = \"normal\";\r\n      y.style.color = \"#6D6d6d\";\r\n    }\r\n    setselected(id);\r\n    document.getElementById(id).className = \"selected\";\r\n    document.getElementById(id).style.backgroundColor = \"#e1eeff\";\r\n    document.getElementById(id).style.borderBottom = \"none\";\r\n    let list = document.getElementById(id).children;\r\n    for (var i = 0; i < list.length; i++) {\r\n      list[i].style.fontWeight = \"700\";\r\n      // if (i === 0) {\r\n      //   list[i].style.backgroundColor = \"#085FAB\";\r\n      // }\r\n    }\r\n    setDataset(data[id]);\r\n    props.selected(id);\r\n    props.selectedDataset(data[id]);\r\n  };\r\n\r\n  const Hoverover = (index) => {\r\n    // console.log(document.getElementById(index));\r\n    if (document.getElementsByClassName(\"selected\")[0]) {\r\n      if (document.getElementsByClassName(\"selected\")[0].id !== index) {\r\n        document.getElementById(index).style.backgroundColor = \"#e1eeff\";\r\n      }\r\n    } else {\r\n      document.getElementById(index).style.backgroundColor = \"#e1eeff\";\r\n    }\r\n  };\r\n\r\n  const Hovercancel = (index) => {\r\n    // console.log(document.getElementById(index));\r\n    if (document.getElementsByClassName(\"selected\")[0]) {\r\n      if (\r\n        parseInt(document.getElementsByClassName(\"selected\")[0].id) !== index\r\n      ) {\r\n        if (index % 2 === 0) {\r\n          document.getElementById(index).style.backgroundColor = \"white\";\r\n        } else {\r\n          document.getElementById(index).style.backgroundColor = \"#F5F5F5\";\r\n        }\r\n      } else {\r\n        document.getElementById(index).style.backgroundColor = \"#e1eeff\";\r\n      }\r\n    } else {\r\n      if (index % 2 === 0) {\r\n        document.getElementById(index).style.backgroundColor = \"white\";\r\n      } else {\r\n        document.getElementById(index).style.backgroundColor = \"#F5F5F5\";\r\n      }\r\n    }\r\n  };\r\n\r\n  // const clickcheckbox = (index, val) => {\r\n  //   let temp = data;\r\n  //   temp[index].checked = !temp[index].checked;\r\n  //   setmainCheck(false);\r\n  //   setdata(temp);\r\n  //   setrendered(!rendered);\r\n  // };\r\n\r\n  // const checkall = (val) => {\r\n  //   console.log(val);\r\n  //   let temp = data;\r\n  //   if (mainCheck === false) {\r\n  //     temp.forEach((item, index) => {\r\n  //       temp[index].checked = true;\r\n  //     });\r\n  //     setmainCheck(true);\r\n  //   } else {\r\n  //     temp.forEach((item, index) => {\r\n  //       temp[index].checked = false;\r\n  //     });\r\n  //     setmainCheck(false);\r\n  //   }\r\n  //   setdata(temp);\r\n  //   setrendered(!rendered);\r\n  // };\r\n\r\n  const getrows = () => {\r\n    return data.map((item, index) => {\r\n      return (\r\n        <tr\r\n          id={index}\r\n          key={index}\r\n          onClick={() => {\r\n            if (selected !== index) {\r\n              rowclick(index);\r\n            }\r\n            // props.selected(item.key);\r\n          }}\r\n          style={index % 2 === 0 ? null : { backgroundColor: \"#F5F5F5\" }}\r\n          onMouseOver={() => Hoverover(index)}\r\n          onMouseLeave={() => Hovercancel(index)}\r\n        >\r\n          <td\r\n            style={selected === index ? { backgroundColor: \"#085fab\" } : null}\r\n          ></td>\r\n          {/* <td>\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"vehicle1\"\r\n              name=\"vehicle1\"\r\n              style={{\r\n                marginTop: \"5px\",\r\n                marginLeft: \"0px\",\r\n                marginRight: \"0px\",\r\n              }}\r\n              checked={item.checked}\r\n              onChange={(e) => clickcheckbox(index, e.target.value)}\r\n            />\r\n          </td> */}\r\n\r\n          <td>\r\n            <img src={bucketIcon} alt={\"icon\"} style={{ width: \"15px\" }} />\r\n          </td>\r\n          <td\r\n            className={styles.description}\r\n            style={{\r\n              overflow: \"hidden\",\r\n              textOverflow: \"ellipsis\",\r\n              paddingRight: \"40px\",\r\n            }}\r\n          >\r\n            {item.name}\r\n          </td>\r\n          <td\r\n            className={styles.description}\r\n            style={{\r\n              overflow: \"hidden\",\r\n              textOverflow: \"ellipsis\",\r\n              paddingRight: \"40px\",\r\n            }}\r\n          >\r\n            {item.description}\r\n          </td>\r\n          <td>{item.created_by}</td>\r\n          <td className={styles.model_last_modified}>\r\n            <p style={{ margin: \"0px\", padding: \"0\", fontSize: \"13px\" }}>\r\n              {item.last_modified}\r\n            </p>\r\n          </td>\r\n          <td>{item.size} GB</td>\r\n          <td>\r\n            <img\r\n              src={infoIcon}\r\n              alt=\"Text\"\r\n              width={14}\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => props.showdrawer()}\r\n            />\r\n          </td>\r\n          <td>\r\n            <img\r\n              src={configureIcon}\r\n              alt=\"Text\"\r\n              width={18}\r\n              style={{ cursor: \"pointer\" }}\r\n              onClick={() => props.showpopup()}\r\n            />\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={styles.Container}>\r\n      <Cliploader loading={loading} />\r\n      {data ? (\r\n        <table className={styles.datatable}>\r\n          <thead>\r\n            <tr>\r\n              <th> </th>\r\n              {/* <th>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id=\"vehicle1\"\r\n                  name=\"vehicle1\"\r\n                  style={{\r\n                    marginTop: \"5px\",\r\n                    marginLeft: \"10px\",\r\n                    marginRight: \"0px\",\r\n                  }}\r\n                  checked={mainCheck}\r\n                  onChange={(e) => checkall(e.target.value)}\r\n                />{\" \"}\r\n              </th> */}\r\n              <th> </th>\r\n              <th>Name</th>\r\n              <th>Description</th>\r\n              <th>Created by</th>\r\n              <th>Last Modified</th>\r\n              <th>Size</th>\r\n              <th></th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{getrows()}</tbody>\r\n        </table>\r\n      ) : (\r\n        <NoData text=\"No Data\" />\r\n        // <Empty style={{ marginTop: \"20px\" }} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeDeleteDatasetModal\\DataLakeDeleteDatasetModal.js",["604","605","606","607"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport deleteAvatar from \"../../Images/AutoML/deleteAvatar.svg\";\r\nimport \"./DataLakeDeleteDatasetModal.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeiconDelete.svg\";\r\nimport datasetIcon from \"../../Icons/DataLake/datasetUse.svg\";\r\n\r\nexport default function DataLakeDeleteDatasetModal(props) {\r\n  const [pin, setpin] = useState(\"\");\r\n  // const [datasets, setdatasets] = useState(null);\r\n  const [rendered, setrendered] = useState(false);\r\n\r\n  // if (datasets === null) {\r\n  //   let temp = [];\r\n  //   props.data.datasets.map((item) => {\r\n  //     let obj = { name: item.name, desc: item.desc, checked: true };\r\n  //     temp.push(obj);\r\n  //   });\r\n  //   setdatasets(temp);\r\n  // }\r\n\r\n  // const clickcheckbox = (index, val) => {\r\n  //   let temp = datasets;\r\n  //   temp[index].checked = !temp[index].checked;\r\n  //   setdatasets(temp);\r\n  //   setrendered(!rendered);\r\n  // };\r\n\r\n  return (\r\n    <div className=\"DataLakeDeleteDatasetModal\">\r\n      <Modal\r\n        width={\"30%\"}\r\n        centered\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={props.handleCancel}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EC547A\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"25px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"500\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"normal\",\r\n              }}\r\n            >\r\n              Are you Sure?\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                color: \"white\",\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              margin: \"auto\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            <img\r\n              src={deleteAvatar}\r\n              style={{\r\n                width: \"80px\",\r\n                height: \"107px\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n              }}\r\n            />\r\n            <div>\r\n              <h2\r\n                style={{\r\n                  fontFamily: \"Lato\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"18px\",\r\n                  textAlign: \"center\",\r\n                  fontStyle: \"normal\",\r\n                }}\r\n              >\r\n                Delete Dataset?\r\n              </h2>\r\n              <p\r\n                style={{\r\n                  padding: \"25px\",\r\n                  paddingLeft: \"0px\",\r\n                  paddingTop: \"0px\",\r\n                  fontFamily: \"Lato\",\r\n                  fontSize: \"13px\",\r\n                  fontStyle: \"normal\",\r\n                  color: \"#A1A1A1\",\r\n                  marginLeft: \"50px\",\r\n                  marginRight: \"50px\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                This Action will result in sharing of the Dataset named ‘Lorem\r\n                Ipsum’.\r\n                <br />\r\n                {/* <div style={{ marginTop: \"5px\" }}>\r\n                  <img alt={\"Text\"} src={datasetIcon} width={20} />{\" \"}\r\n                  <span style={{ fontWeight: \"bold\" }}>\r\n                    Datasets in use by another model.\r\n                  </span>\r\n                </div> */}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          {/* <p\r\n            style={{\r\n              textAlign: \"left\",\r\n              marginLeft: \"30px\",\r\n              color: \"black\",\r\n              fontWeight: \"bold\",\r\n              fontStyle: \"normal\",\r\n              marginBottom: \"5px\",\r\n            }}\r\n          >\r\n            Datasets\r\n          </p> */}\r\n          {/* <div style={{ height: \"15vh\", overflow: \"scroll\" }}>\r\n            {datasets && datasets.length > 0\r\n              ? datasets.map((item, index) => (\r\n                  <div\r\n                    key={index}\r\n                    style={{ textAlign: \"left\", display: \"flex\" }}\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"vehicle1\"\r\n                      name=\"vehicle1\"\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                        marginLeft: \"30px\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      checked={item.checked}\r\n                      onChange={(e) => clickcheckbox(index, e.target.value)}\r\n                    />\r\n                    <img\r\n                      alt={\"Text\"}\r\n                      src={datasetIcon}\r\n                      width={20}\r\n                      style={{\r\n                        marginBottom: \"5px\",\r\n                        marginRight: \"15px\",\r\n                        marginLeft: \"6px\",\r\n                      }}\r\n                    />\r\n                    <p\r\n                      style={{\r\n                        flexGrow: \"1\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </p>\r\n                    <p\r\n                      style={{\r\n                        marginRight: \"20px\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"normal\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.desc}\r\n                    </p>\r\n                    <br />\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </div> */}\r\n          <input\r\n            placeholder=\"Enter 4 Digits Pin to confirm\"\r\n            type=\"text\"\r\n            maxLength={4}\r\n            autoComplete=\"off\"\r\n            value={pin}\r\n            style={{\r\n              width: \"80%\",\r\n              margin: \"auto\",\r\n              borderRadius: \"10px\",\r\n              marginBottom: \"15px\",\r\n            }}\r\n            onChange={(e) => setpin(e.target.value)}\r\n          />\r\n\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"#E2E9EF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n          <div style={{ marginBottom: \"0px\" }}>\r\n            <Button\r\n              style={{\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"white\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n                color: \"black\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n              }}\r\n              onClick={props.handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                width: \"130px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"#EC547A\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                letterSpacing: \"0.5px\",\r\n                color: \"white\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n                borderColor: \"none\",\r\n              }}\r\n              onClick={() => props.handleOK()}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeShareDatasetModal\\DataLakeShareDatasetModal.js",["608","609","610"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport ShareAvatar from \"../../Images/AutoML/shareAvatar.svg\";\r\nimport \"./DataLakeShareDatasetModal.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\n\r\nexport default function DataLakeShareDatasetModal(props) {\r\n  const [pin, setpin] = useState(\"\");\r\n  // const [datasets, setdatasets] = useState(null);\r\n  const [rendered, setrendered] = useState(false);\r\n\r\n  // if (datasets === null) {\r\n  //   let temp = [];\r\n  //   props.data.datasets.map((item) => {\r\n  //     let obj = { name: item.name, desc: item.desc, checked: true };\r\n  //     temp.push(obj);\r\n  //   });\r\n  //   setdatasets(temp);\r\n  // }\r\n\r\n  // const clickcheckbox = (index, val) => {\r\n  //   let temp = datasets;\r\n  //   temp[index].checked = !temp[index].checked;\r\n  //   setdatasets(temp);\r\n  //   setrendered(!rendered);\r\n  // };\r\n\r\n  return (\r\n    <div className=\"DataLakeShareDatasetModal\">\r\n      <Modal\r\n        width={\"30%\"}\r\n        centered\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={props.handleCancel}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EFF4F9\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"25px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"500\",\r\n                color: \"#90A8BE\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"normal\",\r\n              }}\r\n            >\r\n              Are you Sure?\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <img\r\n              src={ShareAvatar}\r\n              style={{\r\n                width: \"73px\",\r\n                height: \"107px\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n              }}\r\n            />\r\n            <div>\r\n              <h2\r\n                style={{\r\n                  fontFamily: \"Lato\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"18px\",\r\n                  textAlign: \"center\",\r\n                  fontStyle: \"normal\",\r\n                }}\r\n              >\r\n                Share Dataset?\r\n              </h2>\r\n              <p\r\n                style={{\r\n                  padding: \"25px\",\r\n                  paddingLeft: \"0px\",\r\n                  paddingTop: \"0px\",\r\n                  paddingBottom: \"10px\",\r\n                  fontFamily: \"Lato\",\r\n                  marginLeft: \"50px\",\r\n                  marginRight: \"50px\",\r\n                  fontSize: \"13px\",\r\n                  fontStyle: \"normal\",\r\n                  color: \"#A1A1A1\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                This Action will result in sharing of the Dataset named ‘Lorem\r\n                Ipsum’.{\" \"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          {/* <p\r\n            style={{\r\n              textAlign: \"left\",\r\n              marginLeft: \"30px\",\r\n              color: \"black\",\r\n              fontWeight: \"bold\",\r\n              fontStyle: \"normal\",\r\n              marginBottom: \"5px\",\r\n            }}\r\n          >\r\n            Datasets\r\n          </p>\r\n          <div style={{ height: \"15vh\", overflow: \"scroll\" }}>\r\n            {datasets && datasets.length > 0\r\n              ? datasets.map((item, index) => (\r\n                  <div\r\n                    key={index}\r\n                    style={{ textAlign: \"left\", display: \"flex\" }}\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"vehicle1\"\r\n                      name=\"vehicle1\"\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                        marginLeft: \"30px\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      checked={item.checked}\r\n                      onChange={(e) => clickcheckbox(index, e.target.value)}\r\n                    />\r\n                    <p\r\n                      style={{\r\n                        flexGrow: \"1\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </p>\r\n                    <p\r\n                      style={{\r\n                        marginRight: \"20px\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"normal\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.desc}\r\n                    </p>\r\n                    <br />\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </div> */}\r\n          <input\r\n            placeholder=\"Enter 4 Digits Pin to confirm\"\r\n            type=\"text\"\r\n            maxLength={4}\r\n            autoComplete=\"off\"\r\n            value={pin}\r\n            style={{\r\n              width: \"80%\",\r\n              margin: \"auto\",\r\n              borderRadius: \"10px\",\r\n              marginBottom: \"15px\",\r\n            }}\r\n            onChange={(e) => setpin(e.target.value)}\r\n          />\r\n\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"#E2E9EF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n          <div style={{ marginBottom: \"0px\" }}>\r\n            <Button\r\n              style={{\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"white\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n                color: \"#085FAB\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n              }}\r\n              onClick={props.handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                width: \"130px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"#085FAB\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                letterSpacing: \"0.5px\",\r\n                color: \"white\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n                borderColor: \"none\",\r\n              }}\r\n              onClick={() => props.handleOK()}\r\n            >\r\n              Continue\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Drawers\\DataLakeDatasetInfoDrawer\\DataLakeDatasetInfoDrawer.js",[],"D:\\Work\\beyond-data\\src\\Pages\\DataLake\\DataLakeConcat\\DataLakeConcat.js",[],"D:\\Work\\beyond-data\\src\\Components\\Dropzone\\DataLakeConcatDropzone\\DataLakeConcatDropzone.js",["611","612","613","614","615"],"import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport uploadIcon from \"../../Icons/AutoML/uploadfile.svg\";\r\nimport \"./styles.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  width: \"100%\",\r\n  height: \"100%\",\r\n  alignItems: \"center\",\r\n  padding: \"20px\",\r\n  borderWidth: 2,\r\n  border: \"1px dashed #6D6D6D\",\r\n  boxSizing: \"border-box\",\r\n  borderRadius: \"10px\",\r\n  backgroundColor: \"white\",\r\n  color: \"#bdbdbd\",\r\n  cursor: \"pointer\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nexport default function DataLakeConcatDropzone(props) {\r\n  const [fileList, setfileList] = useState(null);\r\n  const [count, setcount] = useState(0);\r\n\r\n  const fileSizeValidator = (file) => {\r\n    console.log(file);\r\n    if (file.size > 8000) {\r\n      setfileList(file);\r\n      return {\r\n        code: \"File Size too large\",\r\n        message: `Size is larger than 3 mb (Example)`,\r\n      };\r\n    } else {\r\n      setfileList(file);\r\n    }\r\n  };\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    acceptedFiles,\r\n    fileRejections,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n  } = useDropzone({\r\n    accept: \".xlsx,.csv\",\r\n    maxFiles: 1,\r\n    validator: fileSizeValidator,\r\n  });\r\n\r\n  const files = acceptedFiles.map((file) => (\r\n    <li key={file.path}>\r\n      {file.path} - {file.size} bytes\r\n    </li>\r\n  ));\r\n\r\n  const rejected = fileRejections.map((file) => (\r\n    <li key={file.file.path}>\r\n      {file.file.path} - {file.file.size} bytes {file.errors[0].message}\r\n    </li>\r\n  ));\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (fileList !== null) {\r\n      props.savefile(fileList);\r\n    }\r\n  }, [fileList]);\r\n\r\n  return (\r\n    <div className=\"DataLakeConcatDropzone\" style={{ height: \"inherit\" }}>\r\n      {fileList ? (\r\n        <div className=\"file\">\r\n          <span style={{ flexGrow: \"1\" }}>\r\n            {fileList.path} - {(fileList.size / 1048576).toFixed(2)} MBs\r\n          </span>\r\n          <img\r\n            src={closeIcon}\r\n            alt=\"icon\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => setfileList(null)}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div {...getRootProps({ style })}>\r\n          <input {...getInputProps()} />\r\n          {/* <br /> */}\r\n          <img src={uploadIcon} alt=\"upload\" />\r\n          <p style={{ fontSize: \"13px\", color: \"#6d6d6d\" }}>\r\n            Drop a local file here, or{\" \"}\r\n            <span style={{ color: \"#085fab\" }}>Browse</span>\r\n          </p>\r\n        </div>\r\n      )}\r\n      {/* <h4>Uploaded File</h4>\r\n      <ul>{files}</ul>\r\n      <ul>{rejected}</ul> */}\r\n    </div>\r\n  );\r\n}\r\n\r\n<DataLakeConcatDropzone />;\r\n","D:\\Work\\beyond-data\\src\\Pages\\DataLake\\DatasetConfigure\\DatasetConfigure.js",["616"],"import { Button, message } from \"antd\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Cliploader from \"../../../Components/Loader/Cliploader\";\r\nimport AutoMLCustomisedDatasetTabs from \"../../../Components/Tabs/AutoMLCustomisedDatasetTabs/AutoMLCustomisedDatasetTabs\";\r\nimport \"./styles.css\";\r\nimport InfoIcon from \"../../../Components/Icons/AutoML/infopreview.svg\";\r\nimport targetIcon from \"../../../Components/Icons/AutoML/targeticon.svg\";\r\nimport AutoMLCustomisedDatasetsPreviewTable from \"../../../Components/Tables/AutoMLCustomisedDatasetsPreviewTable/AutoMLCustomisedDatasetsPreviewTable\";\r\nimport DataLakeConfigureMetaTable from \"../../../Components/Tables/DataLakeConfigureMetaTable/DataLakeConfigureMetaTable\";\r\nimport { DataLakeBucketContext } from \"../../../Data/Contexts/DataLake/DataLakeBucketContext/DataLakeBucketContext\";\r\nimport { AuthContext } from \"../../../Data/Contexts/AutoMLAuthContext/AutoMLAuthContext\";\r\nimport { DataLakeDatasetContext } from \"../../../Data/Contexts/DataLake/DataLakeDatasetContext/DataLakeDatasetContext\";\r\nimport axios from \"axios\";\r\nimport { URL } from \"../../../Config/config\";\r\n\r\nexport default function DatasetConfigure(props) {\r\n  let { dataset } = useParams();\r\n\r\n  const [tab, settab] = useState(\"meta_data\");\r\n  const [target, settarget] = useState({ id: \"\", name: \"\" });\r\n  const [data, setdata] = useState([\r\n    {\r\n      name: \"Customer ID\",\r\n      id: 1,\r\n      data_type: \"Integer\",\r\n      nullable: \"false\",\r\n      missing_values: \"1.5%\",\r\n      invalid_values: \"1.2%\",\r\n      distinct_values: \"1022\",\r\n      correlation: \"126\",\r\n      options: [\"Integer\", \"String\"],\r\n    },\r\n    {\r\n      name: \"Customer Name\",\r\n      id: 2,\r\n      data_type: \"String\",\r\n      nullable: \"true\",\r\n      missing_values: \"2.5%\",\r\n      invalid_values: \"1.4%\",\r\n      distinct_values: \"1452\",\r\n      correlation: \"056\",\r\n      options: [\"Integer\", \"String\"],\r\n    },\r\n    {\r\n      name: \"Customer Address\",\r\n      id: 3,\r\n      data_type: \"String\",\r\n      nullable: \"false\",\r\n      missing_values: \"1.2%\",\r\n      invalid_values: \"2.5%\",\r\n      distinct_values: \"1342\",\r\n      correlation: \"157\",\r\n      options: [\"Integer\", \"String\"],\r\n    },\r\n    {\r\n      name: \"Date of Purchase\",\r\n      id: 4,\r\n      data_type: \"String\",\r\n      nullable: \"true\",\r\n      missing_values: \"2.4%\",\r\n      invalid_values: \"3.1%\",\r\n      distinct_values: \"1410\",\r\n      correlation: \"202\",\r\n      options: [\"Integer\", \"String\"],\r\n    },\r\n    {\r\n      name: \"Quantity\",\r\n      id: 5,\r\n      data_type: \"Integer\",\r\n      nullable: \"true\",\r\n      missing_values: \"2.2%\",\r\n      invalid_values: \"0%\",\r\n      distinct_values: \"1502\",\r\n      correlation: \"111\",\r\n      options: [\"Integer\", \"String\"],\r\n    },\r\n  ]);\r\n  const [loading, setloading] = useState(false);\r\n  const [previewrows, setpreviewrows] = useState([\r\n    [\r\n      \"Customer ID\",\r\n      \"Product ID\",\r\n      \"Dept Name\",\r\n      \"Quantity\",\r\n      \"Lorem ipsum\",\r\n      \"Price\",\r\n    ],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n    [\"1234\", \"AB567\", \"QIB768\", \"Lorem Ipsum\", \"Oil Barrel\", \"1500\"],\r\n  ]);\r\n  const [rendertable, setrendertable] = useState(false);\r\n  const [enable, setenable] = useState(false);\r\n\r\n  const { Bucket } = useContext(DataLakeBucketContext);\r\n  const { Auth } = useContext(AuthContext);\r\n  const { Dataset } = useContext(DataLakeDatasetContext);\r\n\r\n  const [data1, setdata1] = useState(null);\r\n\r\n  const loadData = () => {\r\n    setdata1(\"asdasd\");\r\n    console.log(Dataset.dataset);\r\n    if (Dataset.dataset && Dataset.dataset.dataset_metadata.columns) {\r\n      let arr = [];\r\n      Dataset.dataset.dataset_metadata.columns.forEach((element, index) => {\r\n        let opt = [];\r\n        if (Dataset.dataset.dataset_metadata.toggle_dtype[index] === true) {\r\n          if (Dataset.dataset.dataset_metadata.dtypes[index] === \"numeric\") {\r\n            opt = [\"numeric\", \"categorical\"];\r\n          } else if (\r\n            Dataset.dataset.dataset_metadata.dtypes[index] === \"categorical\"\r\n          ) {\r\n            opt = [\"categorical\", \"numeric\"];\r\n          } else if (\r\n            Dataset.dataset.dataset_metadata.dtypes[index] === \"timestamp\"\r\n          ) {\r\n            opt = [\"timestamp\", \"categorical\"];\r\n          }\r\n        }\r\n        let obj = {\r\n          name: element,\r\n          id: index,\r\n          data_type: Dataset.dataset.dataset_metadata.dtypes[index],\r\n          missing_values:\r\n            Dataset.dataset.dataset_metadata.missing_percentage[index].toFixed(\r\n              1\r\n            ),\r\n          invalid_values:\r\n            Dataset.dataset.dataset_metadata.invalid_values_percentage[\r\n              index\r\n            ].toFixed(1),\r\n          distinct_values:\r\n            Dataset.dataset.dataset_metadata.distinct_values_percentage[\r\n              index\r\n            ].toFixed(1),\r\n          options: opt,\r\n          changed: false,\r\n        };\r\n        arr.push(obj);\r\n      });\r\n      setdata(arr);\r\n      let temp = [];\r\n      let keys = Object.keys(Dataset.dataset.dataset_preview);\r\n      temp.push(keys);\r\n      Dataset.dataset.dataset_preview[`${keys[0]}`].forEach(\r\n        (element, index) => {\r\n          let arr = [];\r\n          keys.forEach((element) => {\r\n            arr.push(Dataset.dataset.dataset_preview[`${element}`][index]);\r\n          });\r\n          temp.push(arr);\r\n        }\r\n      );\r\n      setpreviewrows(temp);\r\n    } else {\r\n      setdata(null);\r\n      setpreviewrows(null);\r\n    }\r\n  };\r\n\r\n  if (data1 === null) {\r\n    loadData();\r\n  }\r\n\r\n  const changeType = (val, index) => {\r\n    setenable(true);\r\n    let temp = [];\r\n    data.forEach((element) => {\r\n      temp.push(element);\r\n    });\r\n    temp[index].data_type = val;\r\n    temp[index].changed = true;\r\n    setdata(temp);\r\n    setrendertable(!rendertable);\r\n  };\r\n\r\n  const cancelAction = () => {\r\n    console.log(\"cancel\");\r\n    props.history.push({\r\n      pathname: `/datalake/${Bucket.bucket.name}/datasets/`,\r\n      state: {\r\n        detail: \"I am from Databuckets Screen\",\r\n        page_name: \"Datasets_Screen\",\r\n      },\r\n    });\r\n  };\r\n  const saveAction = async () => {\r\n    setloading(true);\r\n    let updated = {};\r\n    data.forEach((element, index) => {\r\n      if (element.options.length > 0) {\r\n        if (element.data_type !== element.options[0]) {\r\n          updated[`${element.name}`] = {\r\n            current_dtype: element.options[0],\r\n            updated_dtype: element.options[1],\r\n          };\r\n        }\r\n      }\r\n    });\r\n    let obj = {\r\n      company_id: Auth.company_id,\r\n      user_id: Auth.user_id,\r\n      company_name: Auth.company_name,\r\n      databucket_name: Bucket.bucket.name,\r\n      dataset_name: Dataset.dataset.name,\r\n      update: updated,\r\n    };\r\n    console.log(obj);\r\n    await axios({\r\n      method: \"post\",\r\n      url: `${URL}/automl/configure_dataset/`,\r\n      data: {\r\n        company_id: Auth.company_id,\r\n        user_id: Auth.user_id,\r\n        company_name: Auth.company_name,\r\n        databucket_name: Bucket.bucket.name,\r\n        dataset_name: Dataset.dataset.name,\r\n        update: updated,\r\n      },\r\n    })\r\n      .then(function (response) {\r\n        setloading(false);\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        setloading(false);\r\n        if (error.response) {\r\n          // Request made and server responded\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          message.error(error.response.data);\r\n          console.log(error.response.headers);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          console.log(error.request);\r\n        } else {\r\n          // Something happened in setting up the request that triggered an Error\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"DatasetConfigure\">\r\n      <Cliploader loading={loading} handleCancel={() => setloading(false)} />\r\n      <h3\r\n        style={{\r\n          textAlign: \"left\",\r\n          fontSize: \"20px\",\r\n          fontWeight: \"bold\",\r\n          marginBottom: \"1px\",\r\n        }}\r\n      >\r\n        Configuration\r\n      </h3>\r\n      <h3 className=\"titleBold\">{dataset}</h3>\r\n      <hr\r\n        style={{\r\n          width: \"100%\",\r\n          backgroundColor: \"#E1EEFF\",\r\n          border: \"none\",\r\n          height: \"1px\",\r\n          marginBottom: \"0px\",\r\n        }}\r\n      />\r\n      <div>\r\n        <AutoMLCustomisedDatasetTabs setTab={(val) => settab(val)} />\r\n      </div>\r\n\r\n      <div\r\n        className=\"box1\"\r\n        style={\r\n          tab === \"meta_data\"\r\n            ? { display: \"flex\", flexDirection: \"column\", height: \"inherit\" }\r\n            : { display: \"none\" }\r\n        }\r\n      >\r\n        <div style={{ textAlign: \"left\" }}>\r\n          <h3 className=\"rowtitle\">{dataset}</h3>\r\n          <ul className=\"custom_row\">\r\n            {data.map((d) => (\r\n              <li\r\n                key={d.name}\r\n                className={target.name === d.name ? \"highlighted\" : \"listitem\"}\r\n                style={{ display: \"inline-block\" }}\r\n              >\r\n                <img\r\n                  src={targetIcon}\r\n                  alt=\"targetIcon\"\r\n                  width={13}\r\n                  style={\r\n                    target.name === d.name\r\n                      ? { marginRight: \"5px\", paddingBottom: \"1px\" }\r\n                      : { display: \"none\" }\r\n                  }\r\n                />\r\n                {d.name}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n          <hr\r\n            style={{\r\n              width: \"100%\",\r\n              backgroundColor: \"#E1EEFF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginTop: \"20px\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          />\r\n        </div>\r\n        <div\r\n          style={{\r\n            flexGrow: \"1\",\r\n            height: \"10vh\",\r\n            width: \"70%\",\r\n            marginBottom: \"5px\",\r\n            overflowY: \"scroll\",\r\n          }}\r\n        >\r\n          <DataLakeConfigureMetaTable\r\n            data={data}\r\n            render={rendertable}\r\n            changeType={(val, index) => changeType(val, index)}\r\n          />\r\n        </div>\r\n        <div style={{ display: \"flex\" }}>\r\n          <div className=\"discard\" onClick={() => cancelAction()}>\r\n            Cancel\r\n          </div>\r\n          <Button\r\n            className={enable ? \"generatebutton\" : \"generatebuttondisabled\"}\r\n            disabled={!enable}\r\n            onClick={() => saveAction()}\r\n          >\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <div\r\n        className=\"box2\"\r\n        style={\r\n          tab === \"meta_data\"\r\n            ? { display: \"none\" }\r\n            : { display: \"flex\", flexDirection: \"column\", height: \"inherit\" }\r\n        }\r\n      >\r\n        <div style={{ flexGrow: \"1\", overflowY: \"scroll\", height: \"10vh\" }}>\r\n          <p style={{ textAlign: \"left\", color: \"#6d6d6d\", fontSize: \"13px\" }}>\r\n            <img src={InfoIcon} alt=\"info\" width={12} /> Showing data for first\r\n            50 rows only\r\n          </p>\r\n          <AutoMLCustomisedDatasetsPreviewTable\r\n            rows={previewrows}\r\n            target={target.name}\r\n          />\r\n        </div>\r\n        <hr\r\n          style={{\r\n            width: \"100%\",\r\n            backgroundColor: \"#E1EEFF\",\r\n            border: \"none\",\r\n            height: \"1px\",\r\n            marginBottom: \"0px\",\r\n          }}\r\n        />\r\n        {/* <Button className=\"generatebutton\">Save</Button> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Tables\\DataLakeConfigureMetaTable\\DataLakeConfigureMetaTable.js",[],"D:\\Work\\beyond-data\\src\\Data\\Contexts\\DataLake\\DataLakeBucketContext\\DataLakeBucketContext.js",["617","618"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst DataLakeBucketContext = React.createContext();\r\n\r\nclass DataLakeBucketProvider extends Component {\r\n  state = {\r\n    bucket: JSON.parse(localStorage.getItem(\"Bucket\"))\r\n      ? JSON.parse(localStorage.getItem(\"Bucket\")).bucket\r\n      : null,\r\n    type: JSON.parse(localStorage.getItem(\"Bucket\"))\r\n      ? JSON.parse(localStorage.getItem(\"Bucket\")).type\r\n      : null,\r\n  };\r\n\r\n  setBucket = (value) => {\r\n    this.setState({\r\n      bucket: value.bucket,\r\n      type: value.type,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"Bucket\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DataLakeBucketContext.Provider\r\n        value={{ Bucket: this.state, setBucket: this.setBucket }}\r\n      >\r\n        {this.props.children}\r\n      </DataLakeBucketContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst DataLakeBucketConsumer = DataLakeBucketContext.Consumer;\r\n\r\nexport { DataLakeBucketProvider, DataLakeBucketContext };\r\n","D:\\Work\\beyond-data\\src\\Data\\Contexts\\DataLake\\DataLakeDatasetContext\\DataLakeDatasetContext.js",["619","620"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst DataLakeDatasetContext = React.createContext();\r\n\r\nclass DataLakeDatasetProvider extends Component {\r\n  state = {\r\n    dataset: JSON.parse(localStorage.getItem(\"Dataset\"))\r\n      ? JSON.parse(localStorage.getItem(\"Dataset\")).dataset\r\n      : null,\r\n  };\r\n\r\n  setDataset = (value) => {\r\n    this.setState({\r\n      dataset: value,\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"Dataset\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DataLakeDatasetContext.Provider\r\n        value={{ Dataset: this.state, setDataset: this.setDataset }}\r\n      >\r\n        {this.props.children}\r\n      </DataLakeDatasetContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst DataLakeDatasetConsumer = DataLakeDatasetContext.Consumer;\r\n\r\nexport { DataLakeDatasetProvider, DataLakeDatasetContext };\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeBucketDownloadModal\\DataLakeBucketDownloadModal.js",["621"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport ShareAvatar from \"../../Images/AutoML/shareAvatar.svg\";\r\nimport \"./DataLakeBucketDownloadModal.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\n\r\nexport default function DataLakeBucketDownloadModal(props) {\r\n  const [pin, setpin] = useState(\"\");\r\n  const [datasets, setdatasets] = useState(null);\r\n  const [rendered, setrendered] = useState(false);\r\n  if (datasets === null && props.datasets) {\r\n    let temp = [];\r\n    if (props.datasets) {\r\n      props.datasets.forEach((item) => {\r\n        let obj = { name: item, checked: true };\r\n        temp.push(obj);\r\n      });\r\n      setdatasets(temp);\r\n    }\r\n  }\r\n\r\n  const clickcheckbox = (index, val) => {\r\n    let temp = datasets;\r\n    temp[index].checked = !temp[index].checked;\r\n    setdatasets(temp);\r\n    setrendered(!rendered);\r\n  };\r\n\r\n  return (\r\n    <div className=\"DataLakeBucketDownloadModal\">\r\n      <Modal\r\n        width={\"40%\"}\r\n        centered\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={() => {\r\n          setdatasets(null);\r\n          props.handleCancel();\r\n        }}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EFF4F9\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"25px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"500\",\r\n                color: \"#90A8BE\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"normal\",\r\n              }}\r\n            >\r\n              Are you Sure?\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n            <img\r\n              src={ShareAvatar}\r\n              style={{\r\n                width: \"73px\",\r\n                height: \"107px\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n                marginLeft: \"30px\",\r\n                marginRight: \"20px\",\r\n                marginBottom: \"20px\",\r\n                marginTop: \"0px\",\r\n              }}\r\n            />\r\n            <div>\r\n              <h2\r\n                style={{\r\n                  fontFamily: \"Lato\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"18px\",\r\n                  textAlign: \"left\",\r\n                  fontStyle: \"normal\",\r\n                }}\r\n              >\r\n                Download Data Bucket\r\n              </h2>\r\n              <p\r\n                style={{\r\n                  padding: \"25px\",\r\n                  paddingLeft: \"0px\",\r\n                  paddingTop: \"0px\",\r\n                  fontFamily: \"Lato\",\r\n                  fontSize: \"13px\",\r\n                  fontStyle: \"normal\",\r\n                  color: \"#A1A1A1\",\r\n                  textAlign: \"left\",\r\n                }}\r\n              >\r\n                Select the datasets that you want to download.\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <p\r\n            style={{\r\n              textAlign: \"left\",\r\n              marginLeft: \"30px\",\r\n              color: \"black\",\r\n              fontWeight: \"bold\",\r\n              fontStyle: \"normal\",\r\n              marginBottom: \"5px\",\r\n            }}\r\n          >\r\n            Datasets\r\n          </p>\r\n          <div style={{ height: \"15vh\", overflow: \"scroll\" }}>\r\n            {datasets && datasets.length > 0\r\n              ? datasets.map((item, index) => (\r\n                  <div\r\n                    key={index}\r\n                    style={{ textAlign: \"left\", display: \"flex\" }}\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"vehicle1\"\r\n                      name=\"vehicle1\"\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                        marginLeft: \"30px\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      checked={item.checked}\r\n                      onChange={(e) => clickcheckbox(index, e.target.value)}\r\n                    />\r\n                    <p\r\n                      style={{\r\n                        flexGrow: \"1\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </p>\r\n                    {/* <p\r\n                      style={{\r\n                        marginRight: \"20px\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"normal\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.desc}\r\n                    </p> */}\r\n                    <br />\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </div>\r\n          <input\r\n            placeholder=\"Enter 4 Digits Pin to confirm\"\r\n            type=\"text\"\r\n            maxLength={4}\r\n            autoComplete=\"off\"\r\n            value={pin}\r\n            style={{\r\n              width: \"50%\",\r\n              margin: \"auto\",\r\n              marginBottom: \"15px\",\r\n              borderRadius: \"10px\",\r\n            }}\r\n            onChange={(e) => setpin(e.target.value)}\r\n          />\r\n\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"#E2E9EF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n          <div style={{ marginBottom: \"0px\" }}>\r\n            <Button\r\n              style={{\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"white\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n                color: \"#085FAB\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n              }}\r\n              onClick={() => {\r\n                setdatasets(null);\r\n                props.handleCancel();\r\n              }}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                width: \"130px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"#085FAB\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                letterSpacing: \"0.5px\",\r\n                color: \"white\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n                borderColor: \"none\",\r\n              }}\r\n              onClick={() => props.handleOK(datasets)}\r\n            >\r\n              Confirm\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\Misc\\BucketShareReplaceModal\\BucketShareReplaceModal.js",["622","623","624","625","626"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport ShareAvatar from \"../../../Images/AutoML/shareAvatar.svg\";\r\nimport \"./BucketShareReplaceModal.css\";\r\nimport closeIcon from \"../../../Icons/AutoML/closeicon.svg\";\r\n\r\nexport default function BucketShareReplaceModal(props) {\r\n  const [pin, setpin] = useState(\"\");\r\n  // const [datasets, setdatasets] = useState(null);\r\n  const [rendered, setrendered] = useState(false);\r\n\r\n  // if (datasets === null) {\r\n  //   let temp = [];\r\n  //   props.data.datasets.map((item) => {\r\n  //     let obj = { name: item.name, desc: item.desc, checked: true };\r\n  //     temp.push(obj);\r\n  //   });\r\n  //   setdatasets(temp);\r\n  // }\r\n\r\n  // const clickcheckbox = (index, val) => {\r\n  //   let temp = datasets;\r\n  //   temp[index].checked = !temp[index].checked;\r\n  //   setdatasets(temp);\r\n  //   setrendered(!rendered);\r\n  // };\r\n\r\n  return (\r\n    <div className=\"BucketShareReplaceModal\">\r\n      <Modal\r\n        width={\"30%\"}\r\n        centered\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={props.handleCancel}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EFF4F9\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"25px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"500\",\r\n                color: \"#90A8BE\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"normal\",\r\n              }}\r\n            >\r\n              Replace File?\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <img\r\n              src={ShareAvatar}\r\n              style={{\r\n                width: \"73px\",\r\n                height: \"107px\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n              }}\r\n            />\r\n            <div>\r\n              <h2\r\n                style={{\r\n                  fontFamily: \"Lato\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"18px\",\r\n                  textAlign: \"center\",\r\n                  fontStyle: \"normal\",\r\n                }}\r\n              >\r\n                Replace File?\r\n              </h2>\r\n              <p\r\n                style={{\r\n                  padding: \"25px\",\r\n                  paddingLeft: \"0px\",\r\n                  paddingTop: \"0px\",\r\n                  paddingBottom: \"10px\",\r\n                  fontFamily: \"Lato\",\r\n                  marginLeft: \"50px\",\r\n                  marginRight: \"50px\",\r\n                  fontSize: \"13px\",\r\n                  fontStyle: \"normal\",\r\n                  color: \"#A1A1A1\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                System found a file with a same name, Do you want to Replace the\r\n                file or Keep both?\r\n              </p>\r\n            </div>\r\n          </div>\r\n          {/* <p\r\n            style={{\r\n              textAlign: \"left\",\r\n              marginLeft: \"30px\",\r\n              color: \"black\",\r\n              fontWeight: \"bold\",\r\n              fontStyle: \"normal\",\r\n              marginBottom: \"5px\",\r\n            }}\r\n          >\r\n            Datasets\r\n          </p>\r\n          <div style={{ height: \"15vh\", overflow: \"scroll\" }}>\r\n            {datasets && datasets.length > 0\r\n              ? datasets.map((item, index) => (\r\n                  <div\r\n                    key={index}\r\n                    style={{ textAlign: \"left\", display: \"flex\" }}\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"vehicle1\"\r\n                      name=\"vehicle1\"\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                        marginLeft: \"30px\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      checked={item.checked}\r\n                      onChange={(e) => clickcheckbox(index, e.target.value)}\r\n                    />\r\n                    <p\r\n                      style={{\r\n                        flexGrow: \"1\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </p>\r\n                    <p\r\n                      style={{\r\n                        marginRight: \"20px\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"normal\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.desc}\r\n                    </p>\r\n                    <br />\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </div> */}\r\n          {/* <input\r\n            placeholder=\"Enter 4 Digits Pin to confirm\"\r\n            type=\"text\"\r\n            maxLength={4}\r\n            autoComplete=\"off\"\r\n            value={pin}\r\n            style={{\r\n              width: \"80%\",\r\n              margin: \"auto\",\r\n              borderRadius: \"10px\",\r\n              marginBottom: \"15px\",\r\n            }}\r\n            onChange={(e) => setpin(e.target.value)}\r\n          /> */}\r\n\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"#E2E9EF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n          <div style={{ marginBottom: \"0px\" }}>\r\n            <Button\r\n              style={{\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"white\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n                color: \"#085FAB\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n              }}\r\n              onClick={props.handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                width: \"130px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"#085FAB\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                letterSpacing: \"0.5px\",\r\n                color: \"white\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n                borderColor: \"none\",\r\n              }}\r\n              onClick={() => props.handleOK()}\r\n            >\r\n              Replace\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Data\\Contexts\\DataLakeFileUploadContext\\DataLakeFileUploadContext.js",["627","628"],"import React, { Component, createContext } from \"react\";\r\n\r\nconst DataLakeFileUploadContext = React.createContext();\r\n\r\nclass DataLakeFileUploadProvider extends Component {\r\n  state = {\r\n    files: JSON.parse(localStorage.getItem(\"Files\"))\r\n      ? JSON.parse(localStorage.getItem(\"Files\")).files\r\n      : null,\r\n    progress: JSON.parse(localStorage.getItem(\"Files\"))\r\n      ? JSON.parse(localStorage.getItem(\"Files\")).progress\r\n      : null,\r\n    error: JSON.parse(localStorage.getItem(\"Files\"))\r\n      ? JSON.parse(localStorage.getItem(\"Files\")).error\r\n      : null,\r\n  };\r\n\r\n  setFiles = (value) => {\r\n    this.setState({\r\n      files: value,\r\n      progress: null,\r\n      error: null,\r\n    });\r\n  };\r\n\r\n  setProgress = (value) => {\r\n    let temp = this.state.progress ? this.state.progress : {};\r\n    temp[`${value.name}`] = value.val;\r\n    this.setState({\r\n      files: this.state.files,\r\n      progress: temp,\r\n      error: this.state.error,\r\n    });\r\n  };\r\n\r\n  setError = (value) => {\r\n    let temp = this.state.error ? this.state.error : {};\r\n    temp[`${value.name}`] = value.val;\r\n    this.setState({\r\n      files: this.state.files,\r\n      progress: this.state.progress,\r\n      error: temp,\r\n    });\r\n  };\r\n\r\n  deleteFile = (index, file) => {\r\n    console.log(index, file);\r\n    console.log(this.state.files);\r\n    let temp = this.state.files;\r\n    let i = null;\r\n    if (temp) {\r\n      temp.forEach((element, count) => {\r\n        if (element.file.path === file.name) {\r\n          i = count;\r\n        }\r\n      });\r\n      if (temp.length === 1) {\r\n        temp = [];\r\n      } else {\r\n        temp = temp.splice(i, 1);\r\n      }\r\n      this.setState({\r\n        files: temp,\r\n        progress: this.state.progress,\r\n        error: this.state.error,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state !== prevState) {\r\n      // Whatever storage mechanism you end up deciding to use.\r\n      localStorage.setItem(\"Files\", JSON.stringify(this.state));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <DataLakeFileUploadContext.Provider\r\n        value={{\r\n          Files: this.state,\r\n          setFiles: this.setFiles,\r\n          setProgress: this.setProgress,\r\n          deleteFile: this.deleteFile,\r\n          setError: this.setError,\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </DataLakeFileUploadContext.Provider>\r\n    );\r\n  }\r\n}\r\nconst DataLakeFileUploadConsumer = DataLakeFileUploadContext.Consumer;\r\n\r\nexport { DataLakeFileUploadProvider, DataLakeFileUploadContext };\r\n","D:\\Work\\beyond-data\\src\\Components\\Modals\\DataLakeDownloadDatasetModal\\DataLakeDownloadDatasetModal.js",["629","630","631"],"/* eslint-disable jsx-a11y/alt-text */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal, Button } from \"antd\";\r\nimport ShareAvatar from \"../../Images/AutoML/shareAvatar.svg\";\r\nimport \"./DataLakeDownloadDatasetModal.css\";\r\nimport closeIcon from \"../../Icons/AutoML/closeicon.svg\";\r\n\r\nexport default function DataLakeDownloadDatasetModal(props) {\r\n  const [pin, setpin] = useState(\"\");\r\n  // const [datasets, setdatasets] = useState(null);\r\n  const [rendered, setrendered] = useState(false);\r\n\r\n  // if (datasets === null) {\r\n  //   let temp = [];\r\n  //   props.data.datasets.map((item) => {\r\n  //     let obj = { name: item.name, desc: item.desc, checked: true };\r\n  //     temp.push(obj);\r\n  //   });\r\n  //   setdatasets(temp);\r\n  // }\r\n\r\n  // const clickcheckbox = (index, val) => {\r\n  //   let temp = datasets;\r\n  //   temp[index].checked = !temp[index].checked;\r\n  //   setdatasets(temp);\r\n  //   setrendered(!rendered);\r\n  // };\r\n\r\n  return (\r\n    <div className=\"DataLakeDownloadDatasetModal\">\r\n      <Modal\r\n        width={\"30%\"}\r\n        centered\r\n        wrapClassName=\"ProjectsModal\"\r\n        visible={props.isModalVisible}\r\n        onCancel={props.handleCancel}\r\n        footer={false}\r\n        closable={false}\r\n        bodyStyle={{ borderRadius: \"20px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            height: \"50px\",\r\n            background: \"#EFF4F9\",\r\n            borderRadius: \"20px 20px 0px 0px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", padding: \"12px\", marginLeft: \"25px\" }}>\r\n            <h2\r\n              style={{\r\n                flexGrow: \"1\",\r\n                fontWeight: \"500\",\r\n                color: \"#90A8BE\",\r\n                fontSize: \"18px\",\r\n                fontStyle: \"normal\",\r\n              }}\r\n            >\r\n              Are you Sure?\r\n            </h2>\r\n            <img\r\n              onClick={props.handleCancel}\r\n              src={closeIcon}\r\n              style={{\r\n                paddingBottom: \"10px\",\r\n                paddingRight: \"15px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            marginTop: \"30px\",\r\n            flexDirection: \"column\",\r\n            textAlign: \"center\",\r\n            paddingBottom: \"19px\",\r\n          }}\r\n        >\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <img\r\n              src={ShareAvatar}\r\n              style={{\r\n                width: \"73px\",\r\n                height: \"107px\",\r\n                display: \"block\",\r\n                margin: \"auto\",\r\n              }}\r\n            />\r\n            <div>\r\n              <h2\r\n                style={{\r\n                  fontFamily: \"Lato\",\r\n                  fontWeight: \"bold\",\r\n                  fontSize: \"18px\",\r\n                  textAlign: \"center\",\r\n                  fontStyle: \"normal\",\r\n                }}\r\n              >\r\n                Download Dataset?\r\n              </h2>\r\n              <p\r\n                style={{\r\n                  padding: \"25px\",\r\n                  paddingLeft: \"0px\",\r\n                  paddingTop: \"0px\",\r\n                  paddingBottom: \"10px\",\r\n                  fontFamily: \"Lato\",\r\n                  marginLeft: \"50px\",\r\n                  marginRight: \"50px\",\r\n                  fontSize: \"13px\",\r\n                  fontStyle: \"normal\",\r\n                  color: \"#A1A1A1\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                This Action will result in Downloading of the Dataset named\r\n                ‘Lorem Ipsum’.{\" \"}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          {/* <p\r\n            style={{\r\n              textAlign: \"left\",\r\n              marginLeft: \"30px\",\r\n              color: \"black\",\r\n              fontWeight: \"bold\",\r\n              fontStyle: \"normal\",\r\n              marginBottom: \"5px\",\r\n            }}\r\n          >\r\n            Datasets\r\n          </p>\r\n          <div style={{ height: \"15vh\", overflow: \"scroll\" }}>\r\n            {datasets && datasets.length > 0\r\n              ? datasets.map((item, index) => (\r\n                  <div\r\n                    key={index}\r\n                    style={{ textAlign: \"left\", display: \"flex\" }}\r\n                  >\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      id=\"vehicle1\"\r\n                      name=\"vehicle1\"\r\n                      style={{\r\n                        marginTop: \"5px\",\r\n                        marginLeft: \"30px\",\r\n                        marginRight: \"10px\",\r\n                      }}\r\n                      checked={item.checked}\r\n                      onChange={(e) => clickcheckbox(index, e.target.value)}\r\n                    />\r\n                    <p\r\n                      style={{\r\n                        flexGrow: \"1\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"bold\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.name}\r\n                    </p>\r\n                    <p\r\n                      style={{\r\n                        marginRight: \"20px\",\r\n                        color: \"#6d6d6d\",\r\n                        fontWeight: \"normal\",\r\n                        fontSize: \"14px\",\r\n                        fontStyle: \"normal\",\r\n                        marginBottom: \"10px\",\r\n                      }}\r\n                    >\r\n                      {item.desc}\r\n                    </p>\r\n                    <br />\r\n                  </div>\r\n                ))\r\n              : null}\r\n          </div> */}\r\n          <input\r\n            placeholder=\"Enter 4 Digits Pin to confirm\"\r\n            type=\"text\"\r\n            maxLength={4}\r\n            autoComplete=\"off\"\r\n            value={pin}\r\n            style={{\r\n              width: \"80%\",\r\n              margin: \"auto\",\r\n              borderRadius: \"10px\",\r\n              marginBottom: \"15px\",\r\n            }}\r\n            onChange={(e) => setpin(e.target.value)}\r\n          />\r\n\r\n          <hr\r\n            style={{\r\n              backgroundColor: \"#E2E9EF\",\r\n              border: \"none\",\r\n              height: \"1px\",\r\n              marginBottom: \"20px\",\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n          <div style={{ marginBottom: \"0px\" }}>\r\n            <Button\r\n              style={{\r\n                width: \"120px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"white\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"16px\",\r\n                fontWeight: \"700\",\r\n                color: \"#085FAB\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n              }}\r\n              onClick={props.handleCancel}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                width: \"130px\",\r\n                height: \"35px\",\r\n                backgroundColor: \"#085FAB\",\r\n                fontFamily: \"Lato\",\r\n                fontSize: \"14px\",\r\n                fontWeight: \"normal\",\r\n                letterSpacing: \"0.5px\",\r\n                color: \"white\",\r\n                border: \"none\",\r\n                borderRadius: \"65px\",\r\n                borderColor: \"none\",\r\n              }}\r\n              onClick={() => props.handleOK()}\r\n            >\r\n              Continue\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Work\\beyond-data\\src\\Components\\BreadCrumbs\\DataLakeBreadcrumbs\\DataLakeBreadcrumbs.js",[],{"ruleId":"632","replacedBy":"633"},{"ruleId":"634","replacedBy":"635"},{"ruleId":"636","severity":1,"message":"637","line":3,"column":25,"nodeType":"638","messageId":"639","endLine":3,"endColumn":31},{"ruleId":"636","severity":1,"message":"640","line":4,"column":8,"nodeType":"638","messageId":"639","endLine":4,"endColumn":20},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":26},{"ruleId":"636","severity":1,"message":"642","line":3,"column":45,"nodeType":"638","messageId":"639","endLine":3,"endColumn":54},{"ruleId":"636","severity":1,"message":"643","line":28,"column":10,"nodeType":"638","messageId":"639","endLine":28,"endColumn":17},{"ruleId":"636","severity":1,"message":"644","line":33,"column":8,"nodeType":"638","messageId":"639","endLine":33,"endColumn":23},{"ruleId":"645","severity":1,"message":"646","line":35,"column":6,"nodeType":"647","endLine":35,"endColumn":8,"suggestions":"648"},{"ruleId":"636","severity":1,"message":"649","line":5,"column":10,"nodeType":"638","messageId":"639","endLine":5,"endColumn":22},{"ruleId":"636","severity":1,"message":"650","line":12,"column":10,"nodeType":"638","messageId":"639","endLine":12,"endColumn":12},{"ruleId":"636","severity":1,"message":"651","line":20,"column":10,"nodeType":"638","messageId":"639","endLine":20,"endColumn":17},{"ruleId":"636","severity":1,"message":"652","line":20,"column":19,"nodeType":"638","messageId":"639","endLine":20,"endColumn":29},{"ruleId":"636","severity":1,"message":"653","line":92,"column":7,"nodeType":"638","messageId":"639","endLine":92,"endColumn":11},{"ruleId":"654","severity":1,"message":"655","line":94,"column":20,"nodeType":"656","messageId":"657","endLine":94,"endColumn":22},{"ruleId":"645","severity":1,"message":"658","line":106,"column":14,"nodeType":"659","endLine":106,"endColumn":46},{"ruleId":"636","severity":1,"message":"660","line":154,"column":9,"nodeType":"638","messageId":"639","endLine":154,"endColumn":17},{"ruleId":"636","severity":1,"message":"661","line":6,"column":19,"nodeType":"638","messageId":"639","endLine":6,"endColumn":29},{"ruleId":"636","severity":1,"message":"662","line":8,"column":20,"nodeType":"638","messageId":"639","endLine":8,"endColumn":31},{"ruleId":"636","severity":1,"message":"663","line":20,"column":12,"nodeType":"638","messageId":"639","endLine":20,"endColumn":24},{"ruleId":"645","severity":1,"message":"664","line":182,"column":6,"nodeType":"647","endLine":182,"endColumn":18,"suggestions":"665"},{"ruleId":"645","severity":1,"message":"646","line":39,"column":6,"nodeType":"647","endLine":39,"endColumn":8,"suggestions":"666"},{"ruleId":"645","severity":1,"message":"667","line":98,"column":6,"nodeType":"647","endLine":98,"endColumn":19,"suggestions":"668"},{"ruleId":"669","severity":1,"message":"670","line":103,"column":31,"nodeType":"671","messageId":"672","endLine":103,"endColumn":32,"suggestions":"673"},{"ruleId":"669","severity":1,"message":"674","line":103,"column":33,"nodeType":"671","messageId":"672","endLine":103,"endColumn":34,"suggestions":"675"},{"ruleId":"669","severity":1,"message":"676","line":103,"column":49,"nodeType":"671","messageId":"672","endLine":103,"endColumn":50,"suggestions":"677"},{"ruleId":"636","severity":1,"message":"678","line":20,"column":11,"nodeType":"638","messageId":"639","endLine":20,"endColumn":18},{"ruleId":"636","severity":1,"message":"679","line":42,"column":5,"nodeType":"638","messageId":"639","endLine":42,"endColumn":14},{"ruleId":"636","severity":1,"message":"680","line":46,"column":12,"nodeType":"638","messageId":"639","endLine":46,"endColumn":20},{"ruleId":"636","severity":1,"message":"681","line":1,"column":10,"nodeType":"638","messageId":"639","endLine":1,"endColumn":29},{"ruleId":"636","severity":1,"message":"682","line":5,"column":8,"nodeType":"638","messageId":"639","endLine":5,"endColumn":18},{"ruleId":"683","severity":1,"message":"684","line":317,"column":17,"nodeType":"685","endLine":317,"endColumn":81},{"ruleId":"636","severity":1,"message":"682","line":5,"column":8,"nodeType":"638","messageId":"639","endLine":5,"endColumn":18},{"ruleId":"636","severity":1,"message":"661","line":16,"column":19,"nodeType":"638","messageId":"639","endLine":16,"endColumn":29},{"ruleId":"636","severity":1,"message":"686","line":34,"column":7,"nodeType":"638","messageId":"639","endLine":34,"endColumn":11},{"ruleId":"636","severity":1,"message":"687","line":47,"column":7,"nodeType":"638","messageId":"639","endLine":47,"endColumn":15},{"ruleId":"636","severity":1,"message":"641","line":1,"column":17,"nodeType":"638","messageId":"639","endLine":1,"endColumn":26},{"ruleId":"636","severity":1,"message":"688","line":4,"column":8,"nodeType":"638","messageId":"639","endLine":4,"endColumn":14},{"ruleId":"636","severity":1,"message":"689","line":9,"column":20,"nodeType":"638","messageId":"639","endLine":9,"endColumn":31},{"ruleId":"636","severity":1,"message":"641","line":3,"column":29,"nodeType":"638","messageId":"639","endLine":3,"endColumn":38},{"ruleId":"636","severity":1,"message":"690","line":28,"column":10,"nodeType":"638","messageId":"639","endLine":28,"endColumn":25},{"ruleId":"636","severity":1,"message":"691","line":28,"column":27,"nodeType":"638","messageId":"639","endLine":28,"endColumn":45},{"ruleId":"636","severity":1,"message":"692","line":63,"column":9,"nodeType":"638","messageId":"639","endLine":63,"endColumn":22},{"ruleId":"636","severity":1,"message":"693","line":122,"column":9,"nodeType":"638","messageId":"639","endLine":122,"endColumn":22},{"ruleId":"636","severity":1,"message":"694","line":149,"column":9,"nodeType":"638","messageId":"639","endLine":149,"endColumn":17},{"ruleId":"636","severity":1,"message":"695","line":150,"column":9,"nodeType":"638","messageId":"639","endLine":150,"endColumn":13},{"ruleId":"636","severity":1,"message":"696","line":259,"column":9,"nodeType":"638","messageId":"639","endLine":259,"endColumn":16},{"ruleId":"636","severity":1,"message":"697","line":327,"column":9,"nodeType":"638","messageId":"639","endLine":327,"endColumn":13},{"ruleId":"636","severity":1,"message":"698","line":8,"column":3,"nodeType":"638","messageId":"639","endLine":8,"endColumn":20},{"ruleId":"636","severity":1,"message":"699","line":10,"column":3,"nodeType":"638","messageId":"639","endLine":10,"endColumn":17},{"ruleId":"636","severity":1,"message":"700","line":19,"column":10,"nodeType":"638","messageId":"639","endLine":19,"endColumn":21},{"ruleId":"636","severity":1,"message":"701","line":19,"column":23,"nodeType":"638","messageId":"639","endLine":19,"endColumn":37},{"ruleId":"636","severity":1,"message":"702","line":24,"column":7,"nodeType":"638","messageId":"639","endLine":24,"endColumn":12},{"ruleId":"645","severity":1,"message":"703","line":55,"column":6,"nodeType":"647","endLine":55,"endColumn":18,"suggestions":"704"},{"ruleId":"645","severity":1,"message":"703","line":59,"column":6,"nodeType":"647","endLine":59,"endColumn":20,"suggestions":"705"},{"ruleId":"706","severity":1,"message":"707","line":65,"column":24,"nodeType":"708","messageId":"709","endLine":65,"endColumn":26},{"ruleId":"706","severity":1,"message":"707","line":127,"column":38,"nodeType":"708","messageId":"709","endLine":127,"endColumn":40},{"ruleId":"636","severity":1,"message":"710","line":160,"column":21,"nodeType":"638","messageId":"639","endLine":160,"endColumn":33},{"ruleId":"706","severity":1,"message":"707","line":165,"column":24,"nodeType":"708","messageId":"709","endLine":165,"endColumn":26},{"ruleId":"706","severity":1,"message":"707","line":219,"column":38,"nodeType":"708","messageId":"709","endLine":219,"endColumn":40},{"ruleId":"636","severity":1,"message":"711","line":255,"column":9,"nodeType":"638","messageId":"639","endLine":255,"endColumn":21},{"ruleId":"636","severity":1,"message":"712","line":367,"column":9,"nodeType":"638","messageId":"639","endLine":367,"endColumn":20},{"ruleId":"636","severity":1,"message":"713","line":109,"column":22,"nodeType":"638","messageId":"639","endLine":109,"endColumn":27},{"ruleId":"706","severity":1,"message":"707","line":115,"column":52,"nodeType":"708","messageId":"709","endLine":115,"endColumn":54},{"ruleId":"636","severity":1,"message":"714","line":117,"column":19,"nodeType":"638","messageId":"639","endLine":117,"endColumn":22},{"ruleId":"636","severity":1,"message":"682","line":5,"column":8,"nodeType":"638","messageId":"639","endLine":5,"endColumn":18},{"ruleId":"636","severity":1,"message":"715","line":2,"column":18,"nodeType":"638","messageId":"639","endLine":2,"endColumn":25},{"ruleId":"636","severity":1,"message":"716","line":4,"column":8,"nodeType":"638","messageId":"639","endLine":4,"endColumn":19},{"ruleId":"636","severity":1,"message":"717","line":31,"column":23,"nodeType":"638","messageId":"639","endLine":31,"endColumn":37},{"ruleId":"636","severity":1,"message":"718","line":42,"column":10,"nodeType":"638","messageId":"639","endLine":42,"endColumn":20},{"ruleId":"636","severity":1,"message":"719","line":42,"column":22,"nodeType":"638","messageId":"639","endLine":42,"endColumn":35},{"ruleId":"645","severity":1,"message":"720","line":130,"column":6,"nodeType":"647","endLine":130,"endColumn":28,"suggestions":"721"},{"ruleId":"636","severity":1,"message":"722","line":157,"column":11,"nodeType":"638","messageId":"639","endLine":157,"endColumn":19},{"ruleId":"669","severity":1,"message":"670","line":243,"column":31,"nodeType":"671","messageId":"672","endLine":243,"endColumn":32,"suggestions":"723"},{"ruleId":"669","severity":1,"message":"674","line":243,"column":33,"nodeType":"671","messageId":"672","endLine":243,"endColumn":34,"suggestions":"724"},{"ruleId":"669","severity":1,"message":"676","line":243,"column":49,"nodeType":"671","messageId":"672","endLine":243,"endColumn":50,"suggestions":"725"},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"727","line":47,"column":7,"nodeType":"638","messageId":"639","endLine":47,"endColumn":22},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"728","line":66,"column":7,"nodeType":"638","messageId":"639","endLine":66,"endColumn":19},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"729","line":77,"column":7,"nodeType":"638","messageId":"639","endLine":77,"endColumn":20},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"730","line":46,"column":7,"nodeType":"638","messageId":"639","endLine":46,"endColumn":19},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"731","line":106,"column":7,"nodeType":"638","messageId":"639","endLine":106,"endColumn":31},{"ruleId":"636","severity":1,"message":"732","line":9,"column":9,"nodeType":"638","messageId":"639","endLine":9,"endColumn":17},{"ruleId":"636","severity":1,"message":"733","line":11,"column":8,"nodeType":"638","messageId":"639","endLine":11,"endColumn":13},{"ruleId":"636","severity":1,"message":"734","line":12,"column":10,"nodeType":"638","messageId":"639","endLine":12,"endColumn":13},{"ruleId":"636","severity":1,"message":"735","line":13,"column":8,"nodeType":"638","messageId":"639","endLine":13,"endColumn":18},{"ruleId":"636","severity":1,"message":"736","line":17,"column":16,"nodeType":"638","messageId":"639","endLine":17,"endColumn":23},{"ruleId":"636","severity":1,"message":"737","line":30,"column":20,"nodeType":"638","messageId":"639","endLine":30,"endColumn":31},{"ruleId":"636","severity":1,"message":"738","line":32,"column":7,"nodeType":"638","messageId":"639","endLine":32,"endColumn":14},{"ruleId":"636","severity":1,"message":"739","line":33,"column":9,"nodeType":"638","messageId":"639","endLine":33,"endColumn":19},{"ruleId":"636","severity":1,"message":"740","line":33,"column":21,"nodeType":"638","messageId":"639","endLine":33,"endColumn":29},{"ruleId":"636","severity":1,"message":"741","line":34,"column":11,"nodeType":"638","messageId":"639","endLine":34,"endColumn":25},{"ruleId":"636","severity":1,"message":"742","line":53,"column":9,"nodeType":"638","messageId":"639","endLine":53,"endColumn":16},{"ruleId":"645","severity":1,"message":"743","line":92,"column":6,"nodeType":"647","endLine":92,"endColumn":16,"suggestions":"744"},{"ruleId":"636","severity":1,"message":"745","line":105,"column":9,"nodeType":"638","messageId":"639","endLine":105,"endColumn":20},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"746","line":38,"column":7,"nodeType":"638","messageId":"639","endLine":38,"endColumn":26},{"ruleId":"636","severity":1,"message":"747","line":13,"column":10,"nodeType":"638","messageId":"639","endLine":13,"endColumn":17},{"ruleId":"636","severity":1,"message":"661","line":13,"column":19,"nodeType":"638","messageId":"639","endLine":13,"endColumn":29},{"ruleId":"636","severity":1,"message":"741","line":19,"column":11,"nodeType":"638","messageId":"639","endLine":19,"endColumn":25},{"ruleId":"636","severity":1,"message":"748","line":37,"column":10,"nodeType":"638","messageId":"639","endLine":37,"endColumn":14},{"ruleId":"636","severity":1,"message":"749","line":37,"column":16,"nodeType":"638","messageId":"639","endLine":37,"endColumn":23},{"ruleId":"636","severity":1,"message":"747","line":13,"column":10,"nodeType":"638","messageId":"639","endLine":13,"endColumn":17},{"ruleId":"636","severity":1,"message":"661","line":13,"column":19,"nodeType":"638","messageId":"639","endLine":13,"endColumn":29},{"ruleId":"636","severity":1,"message":"750","line":16,"column":11,"nodeType":"638","messageId":"639","endLine":16,"endColumn":16},{"ruleId":"636","severity":1,"message":"741","line":20,"column":11,"nodeType":"638","messageId":"639","endLine":20,"endColumn":25},{"ruleId":"636","severity":1,"message":"751","line":4,"column":8,"nodeType":"638","messageId":"639","endLine":4,"endColumn":18},{"ruleId":"636","severity":1,"message":"752","line":6,"column":8,"nodeType":"638","messageId":"639","endLine":6,"endColumn":17},{"ruleId":"645","severity":1,"message":"753","line":189,"column":6,"nodeType":"647","endLine":189,"endColumn":21,"suggestions":"754"},{"ruleId":"636","severity":1,"message":"755","line":3,"column":17,"nodeType":"638","messageId":"639","endLine":3,"endColumn":23},{"ruleId":"636","severity":1,"message":"755","line":3,"column":17,"nodeType":"638","messageId":"639","endLine":3,"endColumn":23},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"756","line":65,"column":7,"nodeType":"638","messageId":"639","endLine":65,"endColumn":28},{"ruleId":"636","severity":1,"message":"757","line":12,"column":8,"nodeType":"638","messageId":"639","endLine":12,"endColumn":25},{"ruleId":"636","severity":1,"message":"758","line":13,"column":8,"nodeType":"638","messageId":"639","endLine":13,"endColumn":16},{"ruleId":"636","severity":1,"message":"759","line":28,"column":18,"nodeType":"638","messageId":"639","endLine":28,"endColumn":27},{"ruleId":"636","severity":1,"message":"760","line":7,"column":8,"nodeType":"638","messageId":"639","endLine":7,"endColumn":18},{"ruleId":"636","severity":1,"message":"642","line":35,"column":23,"nodeType":"638","messageId":"639","endLine":35,"endColumn":32},{"ruleId":"636","severity":1,"message":"761","line":47,"column":23,"nodeType":"638","messageId":"639","endLine":47,"endColumn":37},{"ruleId":"636","severity":1,"message":"762","line":70,"column":11,"nodeType":"638","messageId":"639","endLine":70,"endColumn":17},{"ruleId":"636","severity":1,"message":"763","line":70,"column":19,"nodeType":"638","messageId":"639","endLine":70,"endColumn":28},{"ruleId":"645","severity":1,"message":"764","line":111,"column":6,"nodeType":"647","endLine":111,"endColumn":16,"suggestions":"765"},{"ruleId":"645","severity":1,"message":"766","line":120,"column":6,"nodeType":"647","endLine":120,"endColumn":11,"suggestions":"767"},{"ruleId":"636","severity":1,"message":"737","line":6,"column":20,"nodeType":"638","messageId":"639","endLine":6,"endColumn":31},{"ruleId":"636","severity":1,"message":"768","line":7,"column":20,"nodeType":"638","messageId":"639","endLine":7,"endColumn":31},{"ruleId":"636","severity":1,"message":"742","line":28,"column":9,"nodeType":"638","messageId":"639","endLine":28,"endColumn":16},{"ruleId":"645","severity":1,"message":"769","line":36,"column":6,"nodeType":"647","endLine":36,"endColumn":16,"suggestions":"770"},{"ruleId":"636","severity":1,"message":"771","line":7,"column":10,"nodeType":"638","messageId":"639","endLine":7,"endColumn":19},{"ruleId":"636","severity":1,"message":"702","line":15,"column":10,"nodeType":"638","messageId":"639","endLine":15,"endColumn":15},{"ruleId":"636","severity":1,"message":"762","line":20,"column":11,"nodeType":"638","messageId":"639","endLine":20,"endColumn":17},{"ruleId":"645","severity":1,"message":"772","line":35,"column":6,"nodeType":"647","endLine":35,"endColumn":19,"suggestions":"773"},{"ruleId":"645","severity":1,"message":"774","line":82,"column":6,"nodeType":"647","endLine":82,"endColumn":17,"suggestions":"775"},{"ruleId":"645","severity":1,"message":"774","line":86,"column":6,"nodeType":"647","endLine":86,"endColumn":23,"suggestions":"776"},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":26},{"ruleId":"636","severity":1,"message":"716","line":4,"column":8,"nodeType":"638","messageId":"639","endLine":4,"endColumn":19},{"ruleId":"636","severity":1,"message":"777","line":14,"column":19,"nodeType":"638","messageId":"639","endLine":14,"endColumn":29},{"ruleId":"669","severity":1,"message":"670","line":28,"column":31,"nodeType":"671","messageId":"672","endLine":28,"endColumn":32,"suggestions":"778"},{"ruleId":"669","severity":1,"message":"674","line":28,"column":33,"nodeType":"671","messageId":"672","endLine":28,"endColumn":34,"suggestions":"779"},{"ruleId":"669","severity":1,"message":"676","line":28,"column":49,"nodeType":"671","messageId":"672","endLine":28,"endColumn":50,"suggestions":"780"},{"ruleId":"636","severity":1,"message":"781","line":2,"column":29,"nodeType":"638","messageId":"639","endLine":2,"endColumn":37},{"ruleId":"636","severity":1,"message":"716","line":4,"column":8,"nodeType":"638","messageId":"639","endLine":4,"endColumn":19},{"ruleId":"636","severity":1,"message":"782","line":11,"column":11,"nodeType":"638","messageId":"639","endLine":11,"endColumn":16},{"ruleId":"636","severity":1,"message":"783","line":42,"column":7,"nodeType":"638","messageId":"639","endLine":42,"endColumn":12},{"ruleId":"636","severity":1,"message":"784","line":68,"column":9,"nodeType":"638","messageId":"639","endLine":68,"endColumn":14},{"ruleId":"636","severity":1,"message":"785","line":74,"column":9,"nodeType":"638","messageId":"639","endLine":74,"endColumn":17},{"ruleId":"706","severity":1,"message":"707","line":85,"column":30,"nodeType":"708","messageId":"709","endLine":85,"endColumn":32},{"ruleId":"706","severity":1,"message":"707","line":97,"column":31,"nodeType":"708","messageId":"709","endLine":97,"endColumn":33},{"ruleId":"645","severity":1,"message":"786","line":103,"column":6,"nodeType":"647","endLine":103,"endColumn":37,"suggestions":"787"},{"ruleId":"645","severity":1,"message":"788","line":117,"column":6,"nodeType":"647","endLine":117,"endColumn":12,"suggestions":"789"},{"ruleId":"645","severity":1,"message":"753","line":42,"column":6,"nodeType":"647","endLine":42,"endColumn":13,"suggestions":"790"},{"ruleId":"636","severity":1,"message":"791","line":62,"column":9,"nodeType":"638","messageId":"639","endLine":62,"endColumn":19},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":26},{"ruleId":"706","severity":1,"message":"707","line":17,"column":33,"nodeType":"708","messageId":"709","endLine":17,"endColumn":35},{"ruleId":"636","severity":1,"message":"792","line":52,"column":10,"nodeType":"638","messageId":"639","endLine":52,"endColumn":18},{"ruleId":"636","severity":1,"message":"793","line":52,"column":20,"nodeType":"638","messageId":"639","endLine":52,"endColumn":31},{"ruleId":"645","severity":1,"message":"794","line":81,"column":6,"nodeType":"647","endLine":81,"endColumn":21,"suggestions":"795"},{"ruleId":"636","severity":1,"message":"796","line":18,"column":10,"nodeType":"638","messageId":"639","endLine":18,"endColumn":18},{"ruleId":"636","severity":1,"message":"768","line":18,"column":20,"nodeType":"638","messageId":"639","endLine":18,"endColumn":31},{"ruleId":"636","severity":1,"message":"797","line":19,"column":10,"nodeType":"638","messageId":"639","endLine":19,"endColumn":19},{"ruleId":"636","severity":1,"message":"798","line":19,"column":21,"nodeType":"638","messageId":"639","endLine":19,"endColumn":33},{"ruleId":"636","severity":1,"message":"799","line":22,"column":10,"nodeType":"638","messageId":"639","endLine":22,"endColumn":15},{"ruleId":"636","severity":1,"message":"800","line":22,"column":17,"nodeType":"638","messageId":"639","endLine":22,"endColumn":25},{"ruleId":"636","severity":1,"message":"801","line":27,"column":17,"nodeType":"638","messageId":"639","endLine":27,"endColumn":24},{"ruleId":"645","severity":1,"message":"772","line":42,"column":6,"nodeType":"647","endLine":42,"endColumn":19,"suggestions":"802"},{"ruleId":"636","severity":1,"message":"697","line":55,"column":9,"nodeType":"638","messageId":"639","endLine":55,"endColumn":13},{"ruleId":"645","severity":1,"message":"803","line":112,"column":6,"nodeType":"647","endLine":112,"endColumn":23,"suggestions":"804"},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":26},{"ruleId":"636","severity":1,"message":"805","line":7,"column":8,"nodeType":"638","messageId":"639","endLine":7,"endColumn":19},{"ruleId":"636","severity":1,"message":"796","line":12,"column":10,"nodeType":"638","messageId":"639","endLine":12,"endColumn":18},{"ruleId":"636","severity":1,"message":"768","line":12,"column":20,"nodeType":"638","messageId":"639","endLine":12,"endColumn":31},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":26},{"ruleId":"636","severity":1,"message":"796","line":11,"column":10,"nodeType":"638","messageId":"639","endLine":11,"endColumn":18},{"ruleId":"636","severity":1,"message":"768","line":11,"column":20,"nodeType":"638","messageId":"639","endLine":11,"endColumn":31},{"ruleId":"636","severity":1,"message":"783","line":40,"column":10,"nodeType":"638","messageId":"639","endLine":40,"endColumn":15},{"ruleId":"636","severity":1,"message":"806","line":40,"column":17,"nodeType":"638","messageId":"639","endLine":40,"endColumn":25},{"ruleId":"636","severity":1,"message":"784","line":69,"column":9,"nodeType":"638","messageId":"639","endLine":69,"endColumn":14},{"ruleId":"636","severity":1,"message":"785","line":75,"column":9,"nodeType":"638","messageId":"639","endLine":75,"endColumn":17},{"ruleId":"645","severity":1,"message":"788","line":95,"column":6,"nodeType":"647","endLine":95,"endColumn":16,"suggestions":"807"},{"ruleId":"636","severity":1,"message":"808","line":21,"column":18,"nodeType":"638","messageId":"639","endLine":21,"endColumn":27},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"809","line":39,"column":7,"nodeType":"638","messageId":"639","endLine":39,"endColumn":29},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"810","line":35,"column":7,"nodeType":"638","messageId":"639","endLine":35,"endColumn":30},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":26},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":26},{"ruleId":"636","severity":1,"message":"811","line":9,"column":10,"nodeType":"638","messageId":"639","endLine":9,"endColumn":13},{"ruleId":"636","severity":1,"message":"812","line":9,"column":15,"nodeType":"638","messageId":"639","endLine":9,"endColumn":21},{"ruleId":"636","severity":1,"message":"796","line":11,"column":10,"nodeType":"638","messageId":"639","endLine":11,"endColumn":18},{"ruleId":"636","severity":1,"message":"768","line":11,"column":20,"nodeType":"638","messageId":"639","endLine":11,"endColumn":31},{"ruleId":"636","severity":1,"message":"726","line":1,"column":28,"nodeType":"638","messageId":"639","endLine":1,"endColumn":41},{"ruleId":"636","severity":1,"message":"813","line":93,"column":7,"nodeType":"638","messageId":"639","endLine":93,"endColumn":33},{"ruleId":"636","severity":1,"message":"641","line":2,"column":17,"nodeType":"638","messageId":"639","endLine":2,"endColumn":26},{"ruleId":"636","severity":1,"message":"796","line":11,"column":10,"nodeType":"638","messageId":"639","endLine":11,"endColumn":18},{"ruleId":"636","severity":1,"message":"768","line":11,"column":20,"nodeType":"638","messageId":"639","endLine":11,"endColumn":31},"no-native-reassign",["814"],"no-negated-in-lhs",["815"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'AutoMLRoutes' is defined but never used.","'useEffect' is defined but never used.","'useParams' is defined but never used.","'message' is defined but never used.","'DataBucketsMain' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPageFalse'. Either include it or remove the dependency array.","ArrayExpression",["816"],"'UserOutlined' is defined but never used.","'io' is defined but never used.","'created' is assigned a value but never used.","'setcreated' is assigned a value but never used.","'user' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Assignments to the 'socket' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'sendtask' is assigned a value but never used.","'setloading' is assigned a value but never used.","'setimageUrl' is assigned a value but never used.","'beforeUpload' is defined but never used.","React Hook useEffect has a missing dependency: 'Auth'. Either include it or remove the dependency array.",["817"],["818"],"React Hook useEffect has a missing dependency: 'Model.allmodels'. Either include it or remove the dependency array.",["819"],"no-useless-escape","Unnecessary escape character: \\=.","Literal","unnecessaryEscape",["820","821"],"Unnecessary escape character: \\[.",["822","823"],"Unnecessary escape character: \\/.",["824","825"],"'TabPane' is assigned a value but never used.","'clearcart' is assigned a value but never used.","'callback' is defined but never used.","'CloseCircleOutlined' is defined but never used.","'Typography' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'rows' is assigned a value but never used.","'metaData' is assigned a value but never used.","'Circle' is defined but never used.","'setelements' is assigned a value but never used.","'tempdeletedcols' is assigned a value but never used.","'settempdeletedcols' is assigned a value but never used.","'generateTable' is assigned a value but never used.","'duplicatecols' is assigned a value but never used.","'selected' is assigned a value but never used.","'cols' is assigned a value but never used.","'indexes' is assigned a value but never used.","'temp' is assigned a value but never used.","'getConnectedEdges' is defined but never used.","'removeElements' is defined but never used.","'CustomTable' is assigned a value but never used.","'setCustomTable' is assigned a value but never used.","'data1' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'rendernew'. Either include it or remove the dependency array.",["826"],["827"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'setprocessed' is assigned a value but never used.","'onEdgeUpdate' is assigned a value but never used.","'getElements' is assigned a value but never used.","'value' is assigned a value but never used.","'key' is assigned a value but never used.","'Tooltip' is defined but never used.","'ShareAvatar' is defined but never used.","'setdatasetdesc' is assigned a value but never used.","'renderlist' is assigned a value but never used.","'setrenderlist' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Auth.company_id', 'Auth.company_name', 'Auth.user_id', and 'SelectedDatasets.datasets'. Either include them or remove the dependency array.",["828"],"'formData' is assigned a value but never used.",["829","830"],["831","832"],["833","834"],"'createContext' is defined but never used.","'ProjectConsumer' is assigned a value but never used.","'PageConsumer' is assigned a value but never used.","'ModelConsumer' is assigned a value but never used.","'AuthConsumer' is assigned a value but never used.","'SelectedDatasetsConsumer' is assigned a value but never used.","'override' is assigned a value but never used.","'axios' is defined but never used.","'URL' is defined but never used.","'Cliploader' is defined but never used.","'setmeta' is assigned a value but never used.","'setChartRef' is assigned a value but never used.","'history' is assigned a value but never used.","'project_id' is assigned a value but never used.","'model_id' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'myChart' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ChartRef', 'data.labels', and 'data.points'. Either include them or remove the dependency array.",["835"],"'FinalObject' is assigned a value but never used.","'CustomTableConsumer' is assigned a value but never used.","'loading' is assigned a value but never used.","'file' is assigned a value but never used.","'setfile' is assigned a value but never used.","'Model' is assigned a value but never used.","'deleteicon' is defined but never used.","'trainicon' is defined but never used.","React Hook useEffect has a missing dependency: 'render'. Either include it or remove the dependency array. You can also do a functional update 'setrender(r => ...)' if you only need 'render' in the 'setrender' call.",["836"],"'Button' is defined but never used.","'NotificationsConsumer' is assigned a value but never used.","'AutoMLBreadcrumbs' is defined but never used.","'Error404' is defined but never used.","'setprompt' is assigned a value but never used.","'uploadIcon' is defined but never used.","'setrendertable' is assigned a value but never used.","'Bucket' is assigned a value but never used.","'setBucket' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'recallAPI' and 'resettable'. Either include them or remove the dependency array. You can also do a functional update 'setresettable(r => ...)' if you only need 'resettable' in the 'setresettable' call.",["837"],"React Hook useEffect has a missing dependency: 'setAuth'. Either include it or remove the dependency array.",["838"],"'setrendered' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'ChartRef' and 'data'. Either include them or remove the dependency array.",["839"],"'serialize' is defined but never used.","React Hook useEffect has a missing dependency: 'tempData'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setdata' needs the current value of 'tempData'.",["840"],"React Hook useEffect has a missing dependency: 'loadBuckets'. Either include it or remove the dependency array.",["841"],["842"],"'setMessage' is assigned a value but never used.",["843","844"],["845","846"],["847","848"],"'useState' is defined but never used.","'Files' is assigned a value but never used.","'count' is assigned a value but never used.","'files' is assigned a value but never used.","'rejected' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'file' and 'render'. Either include them or remove the dependency array. You can also do a functional update 'setrender(r => ...)' if you only need 'render' in the 'setrender' call.",["849"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["850"],["851"],"'removefile' is assigned a value but never used.","'datasets' is assigned a value but never used.","'setdatasets' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Bucket.bucket.created_by', 'Bucket.bucket.name', and 'recallapi'. Either include them or remove the dependency array. You can also do a functional update 'setrecallapi(r => ...)' if you only need 'recallapi' in the 'setrecallapi' call.",["852"],"'rendered' is assigned a value but never used.","'mainCheck' is assigned a value but never used.","'setmainCheck' is assigned a value but never used.","'reset' is assigned a value but never used.","'setreset' is assigned a value but never used.","'setAuth' is assigned a value but never used.",["853"],"React Hook useEffect has a missing dependency: 'loadDatasets'. Either include it or remove the dependency array.",["854"],"'datasetIcon' is defined but never used.","'setcount' is assigned a value but never used.",["855"],"'settarget' is assigned a value but never used.","'DataLakeBucketConsumer' is assigned a value but never used.","'DataLakeDatasetConsumer' is assigned a value but never used.","'pin' is assigned a value but never used.","'setpin' is assigned a value but never used.","'DataLakeFileUploadConsumer' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"856","fix":"857"},{"desc":"858","fix":"859"},{"desc":"856","fix":"860"},{"desc":"861","fix":"862"},{"messageId":"863","fix":"864","desc":"865"},{"messageId":"866","fix":"867","desc":"868"},{"messageId":"863","fix":"869","desc":"865"},{"messageId":"866","fix":"870","desc":"868"},{"messageId":"863","fix":"871","desc":"865"},{"messageId":"866","fix":"872","desc":"868"},{"desc":"873","fix":"874"},{"desc":"875","fix":"876"},{"desc":"877","fix":"878"},{"messageId":"863","fix":"879","desc":"865"},{"messageId":"866","fix":"880","desc":"868"},{"messageId":"863","fix":"881","desc":"865"},{"messageId":"866","fix":"882","desc":"868"},{"messageId":"863","fix":"883","desc":"865"},{"messageId":"866","fix":"884","desc":"868"},{"desc":"885","fix":"886"},{"desc":"887","fix":"888"},{"desc":"889","fix":"890"},{"desc":"891","fix":"892"},{"desc":"893","fix":"894"},{"desc":"895","fix":"896"},{"desc":"897","fix":"898"},{"desc":"899","fix":"900"},{"messageId":"863","fix":"901","desc":"865"},{"messageId":"866","fix":"902","desc":"868"},{"messageId":"863","fix":"903","desc":"865"},{"messageId":"866","fix":"904","desc":"868"},{"messageId":"863","fix":"905","desc":"865"},{"messageId":"866","fix":"906","desc":"868"},{"desc":"907","fix":"908"},{"desc":"909","fix":"910"},{"desc":"911","fix":"912"},{"desc":"913","fix":"914"},{"desc":"895","fix":"915"},{"desc":"916","fix":"917"},{"desc":"918","fix":"919"},"Update the dependencies array to be: [setPageFalse]",{"range":"920","text":"921"},"Update the dependencies array to be: [Auth, props.type]",{"range":"922","text":"923"},{"range":"924","text":"921"},"Update the dependencies array to be: [Model.allmodels, props.value]",{"range":"925","text":"926"},"removeEscape",{"range":"927","text":"928"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"929","text":"930"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"931","text":"928"},{"range":"932","text":"930"},{"range":"933","text":"928"},{"range":"934","text":"930"},"Update the dependencies array to be: [props.data, rendernew]",{"range":"935","text":"936"},"Update the dependencies array to be: [props.render, rendernew]",{"range":"937","text":"938"},"Update the dependencies array to be: [Auth.company_id, Auth.company_name, Auth.user_id, SelectedDatasets.datasets, props.isModalVisible]",{"range":"939","text":"940"},{"range":"941","text":"928"},{"range":"942","text":"930"},{"range":"943","text":"928"},{"range":"944","text":"930"},{"range":"945","text":"928"},{"range":"946","text":"930"},"Update the dependencies array to be: [ChartRef, data.labels, data.points, rendered]",{"range":"947","text":"948"},"Update the dependencies array to be: [Notifications, render]",{"range":"949","text":"950"},"Update the dependencies array to be: [location, recallAPI, resettable]",{"range":"951","text":"952"},"Update the dependencies array to be: [setAuth, tab]",{"range":"953","text":"954"},"Update the dependencies array to be: [ChartRef, data, rendered]",{"range":"955","text":"956"},"Update the dependencies array to be: [props.value, tempData]",{"range":"957","text":"958"},"Update the dependencies array to be: [loadBuckets, props.tab]",{"range":"959","text":"960"},"Update the dependencies array to be: [loadBuckets, props.recallAPI]",{"range":"961","text":"962"},{"range":"963","text":"928"},{"range":"964","text":"930"},{"range":"965","text":"928"},{"range":"966","text":"930"},{"range":"967","text":"928"},{"range":"968","text":"930"},"Update the dependencies array to be: [acceptedFiles, file, fileRejections, render]",{"range":"969","text":"970"},"Update the dependencies array to be: [file, props]",{"range":"971","text":"972"},"Update the dependencies array to be: [Files, render]",{"range":"973","text":"974"},"Update the dependencies array to be: [Bucket.bucket.created_by, Bucket.bucket.name, Notifications, recallapi]",{"range":"975","text":"976"},{"range":"977","text":"958"},"Update the dependencies array to be: [loadDatasets, props.recallAPI]",{"range":"978","text":"979"},"Update the dependencies array to be: [fileList, props]",{"range":"980","text":"981"},[1887,1889],"[setPageFalse]",[5907,5919],"[Auth, props.type]",[2199,2201],[3031,3044],"[Model.allmodels, props.value]",[3755,3756],"",[3755,3755],"\\",[3757,3758],[3757,3757],[3773,3774],[3773,3773],[1467,1479],"[props.data, rendernew]",[1529,1543],"[props.render, rendernew]",[5263,5285],"[Auth.company_id, Auth.company_name, Auth.user_id, SelectedDatasets.datasets, props.isModalVisible]",[8560,8561],[8560,8560],[8562,8563],[8562,8562],[8578,8579],[8578,8578],[3082,3092],"[ChartRef, data.labels, data.points, rendered]",[6345,6360],"[Notifications, render]",[5902,5912],"[location, recallAPI, resettable]",[6082,6087],"[setAuth, tab]",[959,969],"[ChartRef, data, rendered]",[1328,1341],"[props.value, tempData]",[2757,2768],"[loadBuckets, props.tab]",[2820,2837],"[loadBuckets, props.recallAPI]",[1193,1194],[1193,1193],[1195,1196],[1195,1195],[1211,1212],[1211,1211],[2436,2467],"[acceptedFiles, file, fileRejections, render]",[2786,2792],"[file, props]",[1447,1454],"[Files, render]",[4656,4671],"[Bucket.bucket.created_by, Bucket.bucket.name, Notifications, recallapi]",[1784,1797],[3761,3778],"[loadDatasets, props.recallAPI]",[2201,2211],"[fileList, props]"]